{
  "comments": [
    {
      "key": {
        "uuid": "a624f0ad_13f19464",
        "filename": "include/ceres/local_parameterization.h",
        "patchSetId": 4
      },
      "lineNbr": 233,
      "author": {
        "id": 5002
      },
      "writtenOn": "2015-03-14T22:37:21Z",
      "side": 1,
      "message": "here in the interface you can drop the ptr suffix and just use it in the implementation.\n\nbetter readability.",
      "revId": "f2e02869e55550c9a88f94acc6a695247d1308e7",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a624f0ad_d302ecc0",
        "filename": "internal/ceres/local_parameterization.cc",
        "patchSetId": 4
      },
      "lineNbr": 225,
      "author": {
        "id": 5002
      },
      "writtenOn": "2015-03-14T22:37:21Z",
      "side": 1,
      "message": "silly optimization comment, but I think you will get better performance by multiply beta to (v.transpose() * y) and then multiplying that scalar into v.",
      "revId": "f2e02869e55550c9a88f94acc6a695247d1308e7",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a624f0ad_93fc643b",
        "filename": "internal/ceres/local_parameterization_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 249,
      "author": {
        "id": 5002
      },
      "writtenOn": "2015-03-14T22:37:21Z",
      "side": 1,
      "message": "Normalize",
      "range": {
        "startLine": 249,
        "startChar": 5,
        "endLine": 249,
        "endChar": 14
      },
      "revId": "f2e02869e55550c9a88f94acc6a695247d1308e7",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a624f0ad_7319f833",
        "filename": "internal/ceres/local_parameterization_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 252,
      "author": {
        "id": 5002
      },
      "writtenOn": "2015-03-14T22:37:21Z",
      "side": 1,
      "message": "VectorRef(x, N).normalize() will work.\n\nhttp://eigen.tuxfamily.org/dox/classEigen_1_1MatrixBase.html#acd0de676568888d848beb97dcc53ae47",
      "range": {
        "startLine": 252,
        "startChar": 11,
        "endLine": 252,
        "endChar": 13
      },
      "revId": "f2e02869e55550c9a88f94acc6a695247d1308e7",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a624f0ad_13287436",
        "filename": "internal/ceres/local_parameterization_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 320,
      "author": {
        "id": 5002
      },
      "writtenOn": "2015-03-14T22:37:21Z",
      "side": 1,
      "message": "hmm this duplication of householder vector computation is unfortunate.\nat the risk of increasing work for you, do you think its worth just templating the householdervector compute so that it can be used here and local_parameterization.cc ?",
      "revId": "f2e02869e55550c9a88f94acc6a695247d1308e7",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "068cdc85_067e8369",
        "filename": "internal/ceres/local_parameterization_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 320,
      "author": {
        "id": 5435
      },
      "writtenOn": "2015-03-20T16:45:38Z",
      "side": 1,
      "message": "I agree, this should be fix. In terms of style, I am not sure what the best approach is because they all have their caveats.  In order to not have to redo work, I\u0027d like your opinion.\n\nShould I do:\n\nsolution 1:\n\ntemplate \u003ctypename Scalar\u003e\nvoid ComputeHouseholderVector(\n    const Eigen::Matrix\u003cScalar, Eigen::Dynamic, 1\u003e\u0026 x,\n    Eigen::Matrix\u003cScalar, Eigen::Dynamic, 1\u003e* v, \n    Scalar* beta);\n\nthis has the negative that it doesn\u0027t use the typedefs in internal/eigen.h.  To be able to use the typedefs, I would either have to add another template parameter to \n\nsolution 2:\n\ntemplate \u003cint num_rows \u003d Eigen::Dynamic, int num_cols \u003d Eigen::Dynamic, typename Scalar \u003d double\u003e\nstruct EigenTypes \n\nbut this has the negative that the order is opposite the Eigen specification, but the positive is that I wouldn\u0027t need to touch the entire code base.\n\nOr create another struct:\n\nsolution 3:\n\ntemplate \u003ctypename Scalar, int num_rows \u003d Eigen::Dynamic, int num_cols \u003d Eigen::Dynamic\u003e\nstruct EigenTemplatedTypes \n\nI am leaning toward solution 2.  What do you think?",
      "parentUuid": "a624f0ad_13287436",
      "revId": "f2e02869e55550c9a88f94acc6a695247d1308e7",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "068cdc85_a6e9b72b",
        "filename": "internal/ceres/local_parameterization_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 320,
      "author": {
        "id": 5002
      },
      "writtenOn": "2015-03-20T17:07:14Z",
      "side": 1,
      "message": "I do not think there is anything sacrosanct about the internal/eigen.h. I think option 1 is quite nice and simple, I\u0027d go with it.\n\nThe only thing that looks complicated here will be compute_householder_vector.h, all call sites will be simple so it should be no problem at all.\n\nwhat do you think?",
      "parentUuid": "068cdc85_067e8369",
      "revId": "f2e02869e55550c9a88f94acc6a695247d1308e7",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    }
  ]
}