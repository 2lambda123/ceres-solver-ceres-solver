{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "585968b8_f7a7694d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-10T14:46:34Z",
      "side": 1,
      "message": "There also another AVX2 related failure in `invert_pst_test`:\n```\nStarting program: /home/sergiu/Projects/ceres-solver/build-simple-release/bin/invert_psd_matrix_test \n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/usr/lib/libthread_db.so.1\".\nRunning main() from gmock_main.cc\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] Running 5 tests from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 5 tests from InvertPSDMatrix\n[ RUN      ] InvertPSDMatrix.Identity3x3\n[       OK ] InvertPSDMatrix.Identity3x3 (0 ms)\n[ RUN      ] InvertPSDMatrix.FullRank5x5\n/home/sergiu/Projects/ceres-solver/internal/ceres/invert_psd_matrix_test.cc:68: Failure\nThe difference between (m * inverse_m - Matrix::Identity(5, 5)).norm() / 5.0 and 0.0 is nan, which exceeds 10 * std::numeric_limits\u003cdouble\u003e::epsilon(), where\n(m * inverse_m - Matrix::Identity(5, 5)).norm() / 5.0 evaluates to nan,\n0.0 evaluates to 0, and\n10 * std::numeric_limits\u003cdouble\u003e::epsilon() evaluates to 2.2204460492503131e-15.\n[  FAILED  ] InvertPSDMatrix.FullRank5x5 (0 ms)\n[ RUN      ] InvertPSDMatrix.RankDeficient5x5\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x000055555555bfda in Eigen::SVDBase\u003cEigen::JacobiSVD\u003cEigen::Matrix\u003cdouble, 5, -1, 1, 5, -1\u003e, 2\u003e \u003e::rank (this\u003d0x7fffffffd440) at /usr/include/eigen3/Eigen/src/SVD/SVDBase.h:155\n155\t    while(i\u003e\u003d0 \u0026\u0026 m_singularValues.coeff(i) \u003c premultiplied_threshold) --i;\n(gdb) p premultiplied_threshold \n$2 \u003d \u003coptimized out\u003e\n(gdb) p m_singularValues\n$3 \u003d Eigen::Matrix\u003cdouble,5,1,ColMajor\u003e (data ptr: 0x7fffffffd520) \u003d {\n  [0] \u003d 6.953355807318014e-310,\n  [1] \u003d 0,\n  [2] \u003d 1.4821969375237396e-323,\n  [3] \u003d 2.4703282292062327e-323,\n  [4] \u003d 1.9762625833649862e-323\n}\n```\nSeems to be Eigen bug in JacobiSVD though.\n",
      "revId": "97e52ec5a856b222dc3da66d29c5aebefca5f78c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d6c93bc3_cfcc9579",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6186
      },
      "writtenOn": "2022-02-10T14:48:51Z",
      "side": 1,
      "message": "Can you elaborate a little bit more on where the std::shared_ptr is? In this PR only the use of fixed size Vectors is changed and if they are not part of a struct which is dynamically allocated than alignment works since I think C++11.",
      "revId": "97e52ec5a856b222dc3da66d29c5aebefca5f78c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47bfd13c_6439c1b3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-10T14:54:15Z",
      "side": 1,
      "message": "Can you file an issue on github about this,now  that I know the issue I should be able to pull it out into a simpler example and file a bug against eigen.",
      "parentUuid": "585968b8_f7a7694d",
      "revId": "97e52ec5a856b222dc3da66d29c5aebefca5f78c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c16f7ee_1a040470",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6186
      },
      "writtenOn": "2022-02-10T14:56:15Z",
      "side": 1,
      "message": "I found that part in the Eigen docs: https://eigen.tuxfamily.org/dox/group__TopicStructHavingEigenMembers.html\n\n  For this reason, Eigen takes care by itself to require 256-bit alignment for \n  Eigen::Vector4d, by doing two things:\n  Eigen requires 256-bit alignment for the Eigen::Vector4d\u0027s array (of 4 doubles). With [c++11] this is done with the alignas keyword, or compiler\u0027s extensions for c++98/03.",
      "parentUuid": "d6c93bc3_cfcc9579",
      "revId": "97e52ec5a856b222dc3da66d29c5aebefca5f78c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afbb28bd_ef4df4b3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-10T15:00:22Z",
      "side": 1,
      "message": "It\u0027s the machinery behind `EXPECT_THAT_MANIFOLD_INVARIANTS_HOLD`, specifically the `MatcherBase` in `gtest.h` which stores a `std::shared_ptr\u003cT\u003e` as a member.\n\nFor completeness, here\u0027s the corresponding debug trace admittedly not even pointing to `std::shared_ptr\u003c\u003e`. However, I had a similar problem in a different project and after seeing the use of `std::shared_ptr` allowed me to isolate the source.\n\n\n```\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000555555586c9c in _mm256_load_pd (__P\u003d0x555555aaaa70) at /usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/avxintrin.h:869\n869\t  return *(__m256d *)__P;\n(gdb) bt\n#0  0x0000555555586c9c in _mm256_load_pd (__P\u003d0x555555aaaa70) at /usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/avxintrin.h:869\n#1  Eigen::internal::pload\u003cdouble __vector(4)\u003e(Eigen::internal::unpacket_traits\u003cdouble __vector(4)\u003e::type const*) (from\u003d0x555555aaaa70)\n    at /usr/include/eigen3/Eigen/src/Core/arch/AVX/PacketMath.h:578\n#2  0x0000555555629462 in Eigen::internal::ploadt\u003cdouble __vector(4), 32\u003e(Eigen::internal::unpacket_traits\u003cdouble __vector(4)\u003e::type const*) (from\u003d0x555555aaaa70)\n    at /usr/include/eigen3/Eigen/src/Core/GenericPacketMath.h:967\n#3  Eigen::internal::evaluator\u003cEigen::PlainObjectBase\u003cEigen::Matrix\u003cdouble, 4, 1, 0, 4, 1\u003e \u003e \u003e::packet\u003c32, double __vector(4)\u003e(long) const (this\u003d0x7fffffffd1c8, index\u003d0)\n    at /usr/include/eigen3/Eigen/src/Core/CoreEvaluators.h:245\n#4  0x0000555555624146 in Eigen::internal::binary_evaluator\u003cEigen::CwiseBinaryOp\u003cEigen::internal::scalar_difference_op\u003cdouble, double\u003e, Eigen::Matrix\u003cdouble, -1, 1, 0, -1, 1\u003e const, Eigen::Matrix\u003cdouble, 4, 1, 0, 4, 1\u003e const\u003e, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double\u003e::packet\u003c32, double __vector(4)\u003e(long) const (this\u003d0x7fffffffd1b8, index\u003d0)\n    at /usr/include/eigen3/Eigen/src/Core/CoreEvaluators.h:791\n#5  0x000055555561e37c in Eigen::internal::unary_evaluator\u003cEigen::CwiseUnaryOp\u003cEigen::internal::scalar_abs2_op\u003cdouble\u003e, Eigen::CwiseBinaryOp\u003cEigen::internal::scalar_difference_op\u003cdouble, double\u003e, Eigen::Matrix\u003cdouble, -1, 1, 0, -1, 1\u003e const, Eigen::Matrix\u003cdouble, 4, 1, 0, 4, 1\u003e const\u003e const\u003e, Eigen::internal::IndexBased, double\u003e::packet\u003c32, double __vector(4)\u003e(long) const (\n    this\u003d0x7fffffffd1b0, index\u003d0) at /usr/include/eigen3/Eigen/src/Core/CoreEvaluators.h:603\n#6  0x0000555555618736 in Eigen::internal::redux_impl\u003cEigen::internal::scalar_sum_op\u003cdouble, double\u003e, Eigen::internal::redux_evaluator\u003cEigen::CwiseUnaryOp\u003cEigen::internal::scalar_abs2_op\u003cdouble\u003e, Eigen::CwiseBinaryOp\u003cEigen::internal::scalar_difference_op\u003cdouble, double\u003e, Eigen::Matrix\u003cdouble, -1, 1, 0, -1, 1\u003e const, Eigen::Matrix\u003cdouble, 4, 1, 0, 4, 1\u003e const\u003e const\u003e \u003e, 3, 0\u003e::run\u003cEigen::CwiseUnaryOp\u003cEigen::internal::scalar_abs2_op\u003cdouble\u003e, Eigen::CwiseBinaryOp\u003cEigen::internal::scalar_difference_op\u003cdouble, double\u003e, Eigen::Matrix\u003cdouble, -1, 1, 0, -1, 1\u003e const, Eigen::Matrix\u003cdouble, 4, 1, 0, 4, 1\u003e const\u003e const\u003e \u003e (eval\u003d..., func\u003d..., xpr\u003d...) at /usr/include/eigen3/Eigen/src/Core/Redux.h:251\n#7  0x0000555555612a1d in Eigen::DenseBase\u003cEigen::CwiseUnaryOp\u003cEigen::internal::scalar_abs2_op\u003cdouble\u003e, Eigen::CwiseBinaryOp\u003cEigen::internal::scalar_difference_op\u003cdouble, double\u003e, Eigen::Matrix\u003cdouble, -1, 1, 0, -1, 1\u003e const, Eigen::Matrix\u003cdouble, 4, 1, 0, 4, 1\u003e const\u003e const\u003e \u003e::redux\u003cEigen::internal::scalar_sum_op\u003cdouble, double\u003e \u003e (this\u003d0x7fffffffd260, func\u003d...)\n    at /usr/include/eigen3/Eigen/src/Core/Redux.h:418\n#8  0x000055555560bd75 in Eigen::DenseBase\u003cEigen::CwiseUnaryOp\u003cEigen::internal::scalar_abs2_op\u003cdouble\u003e, Eigen::CwiseBinaryOp\u003cEigen::internal::scalar_difference_op\u003cdouble, double\u003e, Eigen::Matrix\u003cdouble, -1, 1, 0, -1, 1\u003e const, Eigen::Matrix\u003cdouble, 4, 1, 0, 4, 1\u003e const\u003e const\u003e \u003e::sum (this\u003d0x7fffffffd260) at /usr/include/eigen3/Eigen/src/Core/Redux.h:463\n#9  0x0000555555601e96 in Eigen::MatrixBase\u003cEigen::CwiseBinaryOp\u003cEigen::internal::scalar_difference_op\u003cdouble, double\u003e, Eigen::Matrix\u003cdouble, -1, 1, 0, -1, 1\u003e const, Eigen::Matrix\u003cdouble, 4, 1, 0, 4, 1\u003e const\u003e \u003e::squaredNorm (this\u003d0x7fffffffd360) at /usr/include/eigen3/Eigen/src/Core/Dot.h:98\n#10 0x00005555555f6f9d in Eigen::MatrixBase\u003cEigen::CwiseBinaryOp\u003cEigen::internal::scalar_difference_op\u003cdouble, double\u003e, Eigen::Matrix\u003cdouble, -1, 1, 0, -1, 1\u003e const, Eigen::Matrix\u003cdouble, 4, 1, 0, 4, 1\u003e const\u003e \u003e::norm (this\u003d0x7fffffffd360) at /usr/include/eigen3/Eigen/src/Core/Dot.h:110\n#11 0x00005555555dd8ad in ceres::XPlusZeroIsXAtMatcherP2\u003cEigen::Matrix\u003cdouble, 4, 1, 0, 4, 1\u003e, double\u003e::gmock_Impl\u003cceres::SphereManifold\u003c4\u003e const\u0026\u003e::MatchAndExplain (this\u003d0x555555aaaa50, \n    arg\u003d..., result_listener\u003d0x7fffffffd420) at /home/sergiu/Projects/ceres-solver/include/ceres/manifold_test_utils.h:72\n#12 0x00005555555a6c79 in testing::internal::MatcherBase\u003cceres::SphereManifold\u003c4\u003e const\u0026\u003e::MatchAndExplain (this\u003d0x7fffffffd490, x\u003d..., listener\u003d0x7fffffffd420)\n    at /home/sergiu/Projects/ceres-solver/internal/ceres/gtest/gtest.h:9245\n#13 0x000055555559f7dd in testing::internal::MatcherBase\u003cceres::SphereManifold\u003c4\u003e const\u0026\u003e::Matches (this\u003d0x7fffffffd490, x\u003d...)\n    at /home/sergiu/Projects/ceres-solver/internal/ceres/gtest/gtest.h:9251\n#14 0x0000555555594531 in testing::internal::PredicateFormatterFromMatcher\u003cceres::XPlusZeroIsXAtMatcherP2\u003cEigen::Matrix\u003cdouble, 4, 1, 0, 4, 1\u003e, double\u003e \u003e::operator()\u003cceres::SphereManifold\u003c4\u003e \u003e (\n    this\u003d0x7fffffffd9a0, value_text\u003d0x5555556be387 \"manifold\", x\u003d...) at /home/sergiu/Projects/ceres-solver/internal/ceres/gmock/gmock.h:3532\n#15 0x000055555557cce4 in ceres::internal::SphereManifold_ZeroTest_Test::TestBody (this\u003d0x555555aaf120) at /home/sergiu/Projects/ceres-solver/internal/ceres/manifold_test.cc:461\n#16 0x00005555556a34fe in testing::internal::HandleSehExceptionsInMethodIfSupported\u003ctesting::Test, void\u003e (object\u003d0x555555aaf120, method\u003d\u0026virtual testing::Test::TestBody(), \n    location\u003d0x5555556eef73 \"the test body\") at /home/sergiu/Projects/ceres-solver/internal/ceres/gmock_gtest_all.cc:3900\n#17 0x000055555569afab in testing::internal::HandleExceptionsInMethodIfSupported\u003ctesting::Test, void\u003e (object\u003d0x555555aaf120, method\u003d\u0026virtual testing::Test::TestBody(), \n    location\u003d0x5555556eef73 \"the test body\") at /home/sergiu/Projects/ceres-solver/internal/ceres/gmock_gtest_all.cc:3936\n#18 0x000055555566f46a in testing::Test::Run (this\u003d0x555555aaf120) at /home/sergiu/Projects/ceres-solver/internal/ceres/gmock_gtest_all.cc:3975\n#19 0x000055555566fe27 in testing::TestInfo::Run (this\u003d0x555555aa8f90) at /home/sergiu/Projects/ceres-solver/internal/ceres/gmock_gtest_all.cc:4151\n#20 0x0000555555670509 in testing::TestSuite::Run (this\u003d0x555555aa90f0) at /home/sergiu/Projects/ceres-solver/internal/ceres/gmock_gtest_all.cc:4281\n#21 0x000055555567bbeb in testing::internal::UnitTestImpl::RunAllTests (this\u003d0x555555aa6a70) at /home/sergiu/Projects/ceres-solver/internal/ceres/gmock_gtest_all.cc:6719\n```",
      "parentUuid": "d6c93bc3_cfcc9579",
      "revId": "97e52ec5a856b222dc3da66d29c5aebefca5f78c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73729807_7d93d948",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-10T15:01:43Z",
      "side": 1,
      "message": "It\u0027s not only `Eigen::Vector4d` but all multiples of 4 scalars.",
      "parentUuid": "afbb28bd_ef4df4b3",
      "revId": "97e52ec5a856b222dc3da66d29c5aebefca5f78c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9d9eeb11_0b71566f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-10T15:04:32Z",
      "side": 1,
      "message": "`alignas` applies to memory allocated using `new` only starting with C++17.",
      "parentUuid": "73729807_7d93d948",
      "revId": "97e52ec5a856b222dc3da66d29c5aebefca5f78c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d372cebd_bfd1fe74",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-10T15:31:23Z",
      "side": 1,
      "message": "Sure. As a side note, current master fails to compile because GCC does not like when C++11 style attributes such as `[[deprecated]]`` are combined with GCC `__attribute__`. Related issue I also encountered: https://gitlab.kitware.com/cmake/cmake/-/issues/22908.\n\nThis is a blocker for https://ceres-solver-review.googlesource.com/c/ceres-solver/+/20200.",
      "parentUuid": "47bfd13c_6439c1b3",
      "revId": "97e52ec5a856b222dc3da66d29c5aebefca5f78c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c292206_62b41e33",
        "filename": "internal/ceres/manifold_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 455,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-10T14:36:07Z",
      "side": 1,
      "message": "I think this can be fixed more simply, by simply not using fixed sized vectors no?",
      "range": {
        "startLine": 455,
        "startChar": 6,
        "endLine": 455,
        "endChar": 11
      },
      "revId": "97e52ec5a856b222dc3da66d29c5aebefca5f78c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a15f8931_6b6bb9e5",
        "filename": "internal/ceres/manifold_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 455,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-10T14:46:34Z",
      "side": 1,
      "message": "This would be an alternative, yes. However, using fixed sized vectors seems to be more clearer.",
      "parentUuid": "7c292206_62b41e33",
      "range": {
        "startLine": 455,
        "startChar": 6,
        "endLine": 455,
        "endChar": 11
      },
      "revId": "97e52ec5a856b222dc3da66d29c5aebefca5f78c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca56f299_0cb69799",
        "filename": "internal/ceres/manifold_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 455,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-10T14:52:14Z",
      "side": 1,
      "message": "In that case please add a detailed comment (the one in the commit log is fine) here to explain why this ifdef is needed.",
      "parentUuid": "a15f8931_6b6bb9e5",
      "range": {
        "startLine": 455,
        "startChar": 6,
        "endLine": 455,
        "endChar": 11
      },
      "revId": "97e52ec5a856b222dc3da66d29c5aebefca5f78c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64659c73_bbcd227a",
        "filename": "internal/ceres/manifold_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 455,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-10T15:22:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ca56f299_0cb69799",
      "range": {
        "startLine": 455,
        "startChar": 6,
        "endLine": 455,
        "endChar": 11
      },
      "revId": "97e52ec5a856b222dc3da66d29c5aebefca5f78c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}