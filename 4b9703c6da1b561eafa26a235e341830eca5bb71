{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "aed3d0be_74f2bb7a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-09-16T16:11:03Z",
      "side": 1,
      "message": "Thank you for revising this, I will take a look over the weekend. I imagine Sergiu also has questions/comments.",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a1ab84bb_7513b38d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-09-17T08:36:58Z",
      "side": 1,
      "message": "Thanks for revisiting the CL. I have a couple of suggestions.",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6f940a8_ecee1779",
        "filename": "include/ceres/internal/euler_angles.h",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-09-17T16:56:54Z",
      "side": 1,
      "message": "These aliases are somewhat confusing.\n\nInstead of using literals, I would have preferred to see a type definition for each axis (possibly in an inner `axis` namespace), e.g., defined as\n```\nstruct X : std::integral_constant\u003cint, 0\u003e {};\n```\nwhose value can be referenced as `Axis::value`.\n\nAlso using `bool` in the template interface makes corresponding type definitions pretty much unreadable. Again, I would define each template parameter in terms of a type (a declaration is probably sufficient):\n```\nstruct Even; \nstruct Odd;\n\nstruct ProperEuler;\nstruct TaitBryan;\n\nstruct Extrinsic;\nstruct Intrinsic;\n```\nThen, the type alias becomes\n```\nusing ExtrinsicXYX_t \u003d EulerSystem\u003cX, Even, ProperEuler, Extrinsic\u003e;\n```\nmaking it much more readable.",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aaf9d6fa_e12d6379",
        "filename": "include/ceres/internal/euler_angles.h",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 6622
      },
      "writtenOn": "2022-09-17T23:58:50Z",
      "side": 1,
      "message": "Done. Also introduced some predicate structs to aid checking these parameters.",
      "parentUuid": "d6f940a8_ecee1779",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b5a727c_c9075b3f",
        "filename": "include/ceres/internal/euler_angles.h",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-09-17T08:36:58Z",
      "side": 1,
      "message": "These can be dropped if the tag is specified directly.",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3e8a2aa_3f67543f",
        "filename": "include/ceres/internal/euler_angles.h",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-09-18T12:21:53Z",
      "side": 1,
      "message": "Also move the above aliases to the outer namespace and drop the `_t` suffix in the alias names.",
      "parentUuid": "6b5a727c_c9075b3f",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2585b388_993daee2",
        "filename": "include/ceres/internal/euler_angles.h",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 6622
      },
      "writtenOn": "2022-09-19T02:29:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e3e8a2aa_3f67543f",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca580051_ec85d422",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 4
      },
      "lineNbr": 152,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-09-17T08:36:58Z",
      "side": 1,
      "message": "I would rather swap `EulerSystem` and `T` and use the former as a required template parameter. I don\u0027t see any benefits from providing the tag as a function argument.",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50615de2_2669766a",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 4
      },
      "lineNbr": 152,
      "author": {
        "id": 6622
      },
      "writtenOn": "2022-09-17T23:58:50Z",
      "side": 1,
      "message": "It\u0027s an easy change and I\u0027m happy to do it, but I\u0027d like to appeal just once: Passing tags as function args make the call resemble other languages, e.g. MATLAB\u0027s `eul2rotm(eul,\u0027ZYZ\u0027)` or python `R.from_euler(\"ZYZ\", angle)`. Also, I\u0027ve had the impression that C++ prefers passing tag parameters, e.g. `std::adopt_lock` and `std::defer_lock`, and everything else in `rotation.h` don\u0027t seem to require explicit template params. Granted, I might be missing something so please advise.",
      "parentUuid": "ca580051_ec85d422",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8364582_d9936539",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 4
      },
      "lineNbr": 152,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-09-18T12:21:53Z",
      "side": 1,
      "message": "I don\u0027t see other languages to be particularly relevant when making API choices. The languages you specifically mention don\u0027t support compile-time constructs which considerably reduces the number of design choices already.\n\nAt the same time, the current implementation might give users the false impression that the dispatch is done at runtime because the system is specified as a function argument. However, this is clearly not the case and can result in confusion when someone tries to change the system argument at runtime (e.g., by storing the tag in a variable.)\n\nAlso, I think you are missing the context in which the tag-dispatch mechanism is used in the standard library because it is unavoidable under those specific circumstances. There are two primary use cases:\n1. to differentiate between overloads with n and n+1 arguments.\n2. to work around the language inherent limitation which does not allow to explicitly specify the template parameters of a constructor.\nNeither 1 nor 2 is applicable here.",
      "parentUuid": "50615de2_2669766a",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05e852e9_0c8bcaa8",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 4
      },
      "lineNbr": 152,
      "author": {
        "id": 6622
      },
      "writtenOn": "2022-09-19T02:29:18Z",
      "side": 1,
      "message": "That makes a lot of sense. Done.",
      "parentUuid": "f8364582_d9936539",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4150177c_ac7d633b",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 4
      },
      "lineNbr": 478,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-09-17T08:36:58Z",
      "side": 1,
      "message": "Don\u0027t mix types: `kInnerAxis` is an `int`.",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e962e9e_a8d527a9",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 4
      },
      "lineNbr": 478,
      "author": {
        "id": 6622
      },
      "writtenOn": "2022-09-17T23:58:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4150177c_ac7d633b",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df87bf6f_6845f35f",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 4
      },
      "lineNbr": 497,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-09-17T08:36:58Z",
      "side": 1,
      "message": "For ADL to work, add `using` declarations for `\u003ccmath\u003e` functions somewhere above, i.e.,\n```\nusing std::cos;\nusing std::sin;\n// etc.\n```\nAlso in the functions below.",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6666d94d_aab14278",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 4
      },
      "lineNbr": 497,
      "author": {
        "id": 6622
      },
      "writtenOn": "2022-09-17T23:58:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "df87bf6f_6845f35f",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88e846ee_c9212bfc",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 4
      },
      "lineNbr": 540,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-09-17T08:36:58Z",
      "side": 1,
      "message": "Don\u0027t mix types. Use `int` also below.",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05ddf8f9_085bb2b1",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 4
      },
      "lineNbr": 540,
      "author": {
        "id": 6622
      },
      "writtenOn": "2022-09-17T23:58:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "88e846ee_c9212bfc",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5663c617_a56d2d7f",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 4
      },
      "lineNbr": 546,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-09-17T08:36:58Z",
      "side": 1,
      "message": "I don\u0027t think you want to limit yourself to `float` precision. Generally, I would avoid the use of C-style overloads and instead use `sqrt` with a `using` declaration.\n\nYou also want to use `hypot` here:\n```\nconst T sy \u003d hypot(R(i, j), R(i, k))\n```",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9b54887c_2993b237",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 4
      },
      "lineNbr": 546,
      "author": {
        "id": 6622
      },
      "writtenOn": "2022-09-17T23:58:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5663c617_a56d2d7f",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d572d93_37cd6246",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 4
      },
      "lineNbr": 547,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-09-17T08:36:58Z",
      "side": 1,
      "message": "Use `std::numeric_limits\u003cT\u003e::epsilon()` directly. No cast necessary.",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9a36fd7_44fbbd8a",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 4
      },
      "lineNbr": 547,
      "author": {
        "id": 6622
      },
      "writtenOn": "2022-09-17T23:58:50Z",
      "side": 1,
      "message": "Done. FYI I found a few other usages of `T(std::numeric_limits\u003cdouble\u003e::epsilon())` in `rotation.h` so I thought there might be some reason behind it.",
      "parentUuid": "6d572d93_37cd6246",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db06b2ae_3aeb430d",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 4
      },
      "lineNbr": 548,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-09-17T08:36:58Z",
      "side": 1,
      "message": "`using std::atan2;`",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf332efd_38d0b5cf",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 4
      },
      "lineNbr": 548,
      "author": {
        "id": 6622
      },
      "writtenOn": "2022-09-17T23:58:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "db06b2ae_3aeb430d",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d091dcaf_cdf71ec8",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 4
      },
      "lineNbr": 557,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-09-17T08:36:58Z",
      "side": 1,
      "message": "`hypot`",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "408bcd59_15ffd36b",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 4
      },
      "lineNbr": 557,
      "author": {
        "id": 6622
      },
      "writtenOn": "2022-09-17T23:58:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d091dcaf_cdf71ec8",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "385c1eb0_beda7383",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 4
      },
      "lineNbr": 558,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-09-17T08:36:58Z",
      "side": 1,
      "message": "`std::numeric_limits\u003cT\u003e::epsilon()`",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "63c365ee_6f64c951",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 4
      },
      "lineNbr": 558,
      "author": {
        "id": 6622
      },
      "writtenOn": "2022-09-17T23:58:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "385c1eb0_beda7383",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58498eb5_869587e9",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 4
      },
      "lineNbr": 583,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-09-17T08:36:58Z",
      "side": 1,
      "message": "Use `3.1415926535897932384626433832795028841971693993751` to cover `long double`, just in case.",
      "range": {
        "startLine": 583,
        "startChar": 20,
        "endLine": 583,
        "endChar": 42
      },
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aadc2f9f_527504db",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 4
      },
      "lineNbr": 583,
      "author": {
        "id": 6622
      },
      "writtenOn": "2022-09-17T23:58:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "58498eb5_869587e9",
      "range": {
        "startLine": 583,
        "startChar": 20,
        "endLine": 583,
        "endChar": 42
      },
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4291ff43_f01d7915",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 4
      },
      "lineNbr": 591,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-09-17T08:36:58Z",
      "side": 1,
      "message": "Add a comment on what happens here and why the angle normalization is necessary.",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3902c4c5_aec62b63",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 4
      },
      "lineNbr": 591,
      "author": {
        "id": 6622
      },
      "writtenOn": "2022-09-17T23:58:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4291ff43_f01d7915",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f1dc32b_79a1d031",
        "filename": "internal/ceres/rotation_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 774,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-09-17T08:36:58Z",
      "side": 1,
      "message": "To avoid multiple definitions of the constant, define it as variable template\n```\ntemplate\u003cclass T\u003e\ninline constexpr T kPi \u003d T(3.1415926535897932384626433832795028841971693993751);\n```\nand reuse it.",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d22a9073_8313a6e3",
        "filename": "internal/ceres/rotation_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 774,
      "author": {
        "id": 6622
      },
      "writtenOn": "2022-09-17T23:58:50Z",
      "side": 1,
      "message": "There is a global `kPi` for which used to be `static const`. I redefined it `constexpr` for my tests to reuse this constant. Let me know if this might run afoul of ODR.",
      "parentUuid": "1f1dc32b_79a1d031",
      "revId": "4b9703c6da1b561eafa26a235e341830eca5bb71",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}