{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "64902c46_f9d43265",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-01T22:57:50Z",
      "side": 1,
      "message": "I would refrain from adding std:: for the stated reasons.",
      "revId": "1abf7d950a09e1b60cae258a74d54be79beec38c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32052570_ef351561",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-01T23:51:18Z",
      "side": 1,
      "message": "Sergiu,\nwould you be willing to rationalize fpclassify and the various other classification functions while you are at it to pay attention to the scalar part only?\nmight as well do it here instead of letting this inconsistency fester.",
      "revId": "1abf7d950a09e1b60cae258a74d54be79beec38c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4964558_e9d60d55",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-02T00:15:50Z",
      "side": 1,
      "message": "Sure, I can do that.",
      "parentUuid": "32052570_ef351561",
      "revId": "1abf7d950a09e1b60cae258a74d54be79beec38c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4dfca555_dfe85bc8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-02T02:21:51Z",
      "side": 1,
      "message": "Thank you.",
      "tag": "mailMessageId\u003d\u003cCABqdRUCLSjeUtcfSi-oA\u003d_JTnUuWiW3dZGokd7mc4Y7n+_5AoQ@mail.gmail.com\u003e",
      "revId": "1abf7d950a09e1b60cae258a74d54be79beec38c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdbd88a9_1311f72a",
        "filename": "include/ceres/jet.h",
        "patchSetId": 2
      },
      "lineNbr": 522,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-01T22:51:29Z",
      "side": 1,
      "message": "std::",
      "range": {
        "startLine": 522,
        "startChar": 8,
        "endLine": 522,
        "endChar": 18
      },
      "revId": "1abf7d950a09e1b60cae258a74d54be79beec38c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25f00aac_0764f672",
        "filename": "include/ceres/jet.h",
        "patchSetId": 2
      },
      "lineNbr": 522,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-01T22:57:50Z",
      "side": 1,
      "message": "std:: inhibits ADL and is therefore a bad idea. Nested Jets (possibly of custom types) etc. would not work.",
      "parentUuid": "bdbd88a9_1311f72a",
      "range": {
        "startLine": 522,
        "startChar": 8,
        "endLine": 522,
        "endChar": 18
      },
      "revId": "1abf7d950a09e1b60cae258a74d54be79beec38c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c01e1813_c0d91708",
        "filename": "include/ceres/jet.h",
        "patchSetId": 2
      },
      "lineNbr": 522,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-03T16:33:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "25f00aac_0764f672",
      "range": {
        "startLine": 522,
        "startChar": 8,
        "endLine": 522,
        "endChar": 18
      },
      "revId": "1abf7d950a09e1b60cae258a74d54be79beec38c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee008b69_58aca914",
        "filename": "include/ceres/jet.h",
        "patchSetId": 2
      },
      "lineNbr": 763,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-01T22:51:29Z",
      "side": 1,
      "message": "I do not think this is a good idea.\n\nbecause no one is going to be using this for doing automatic differentiation, but rather to check if object is finite or not, and then its not clear to me calling fpclassify on a jet object but ignoring the derivative makes much sense.\n\nsee our implementations of isinf etc, where we check both the scalar and the vector part.",
      "range": {
        "startLine": 763,
        "startChar": 10,
        "endLine": 763,
        "endChar": 18
      },
      "revId": "1abf7d950a09e1b60cae258a74d54be79beec38c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce0297d1_5c6e27a4",
        "filename": "include/ceres/jet.h",
        "patchSetId": 2
      },
      "lineNbr": 763,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-01T22:57:50Z",
      "side": 1,
      "message": "How would do suggest to support code that relies on std::fpclassify?\n\nI believe providing the overload is perfectly fine and inline with how the comparison works.",
      "parentUuid": "ee008b69_58aca914",
      "range": {
        "startLine": 763,
        "startChar": 10,
        "endLine": 763,
        "endChar": 18
      },
      "revId": "1abf7d950a09e1b60cae258a74d54be79beec38c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce2b8bcc_83514ff4",
        "filename": "include/ceres/jet.h",
        "patchSetId": 2
      },
      "lineNbr": 763,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-01T23:09:18Z",
      "side": 1,
      "message": "I understand the desire to add fpclassify, but the question remains, what should the semantics of fpclassify be. \n\nif we follow comparisons -- which make sense in terms of comparisons then I buy your argument that it should just be done on the scalar part.\n\nbut if I follow our current implementations of isinf/isnan then we should also be paying attention to the vector part. \n\nI am confused and need to figure out a consistent way to think about this. maybe our definition of isnan/isinf is wrong.",
      "parentUuid": "ce0297d1_5c6e27a4",
      "range": {
        "startLine": 763,
        "startChar": 10,
        "endLine": 763,
        "endChar": 18
      },
      "revId": "1abf7d950a09e1b60cae258a74d54be79beec38c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b30d7bf_c32db256",
        "filename": "include/ceres/jet.h",
        "patchSetId": 2
      },
      "lineNbr": 763,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-01T23:27:44Z",
      "side": 1,
      "message": "I believe the current implementation of std::isnan/std::isinf etc. overloads is not practical and actually inconsistent w.r.t. comparison operators. Besides that, it is not clear to me what the purpose of classifying the dual part of a Jet actually is outside of unit testing?\n\nSince fpclassify returns an integer, classifying multiple values raises the question how can these results be combined. I don\u0027t think this is possible considering fpclassify should provide consistent results when swapping Jet\u003c\u003e against a double or vice versa.",
      "parentUuid": "ce2b8bcc_83514ff4",
      "range": {
        "startLine": 763,
        "startChar": 10,
        "endLine": 763,
        "endChar": 18
      },
      "revId": "1abf7d950a09e1b60cae258a74d54be79beec38c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ebad96f_74723a6d",
        "filename": "include/ceres/jet.h",
        "patchSetId": 2
      },
      "lineNbr": 763,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-01T23:49:36Z",
      "side": 1,
      "message": "One could reason that a Jet acts as scalar substitute (which it is) additionally carrying derivative (secondary) information. The general use case is therefore to implement a template function or a method which works both with a Jet and a double in the same, transparent way, without the need to know what type is being passed. Hence, users will generally not care about the derivative.\n\nHowever, if one is explicitly interested in the derivative it would be more reasonable to let the user reference this part explicitly instead of trying to combine the information. For instance, why is the semantic of combining isnan results a logical OR and not a logical AND and isnormal uses exactly the opposite logic? These problems could be avoided.",
      "parentUuid": "9b30d7bf_c32db256",
      "range": {
        "startLine": 763,
        "startChar": 10,
        "endLine": 763,
        "endChar": 18
      },
      "revId": "1abf7d950a09e1b60cae258a74d54be79beec38c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cc0ec9e_961ae3ba",
        "filename": "include/ceres/jet.h",
        "patchSetId": 2
      },
      "lineNbr": 763,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-01T23:51:18Z",
      "side": 1,
      "message": "Yes I get that since fpclassify returns an integer, there is no reasonable way to combine the results of multiple fpclassify operations.",
      "parentUuid": "9b30d7bf_c32db256",
      "range": {
        "startLine": 763,
        "startChar": 10,
        "endLine": 763,
        "endChar": 18
      },
      "revId": "1abf7d950a09e1b60cae258a74d54be79beec38c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4138eb18_15280608",
        "filename": "include/ceres/jet.h",
        "patchSetId": 2
      },
      "lineNbr": 763,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-03T16:33:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7cc0ec9e_961ae3ba",
      "range": {
        "startLine": 763,
        "startChar": 10,
        "endLine": 763,
        "endChar": 18
      },
      "revId": "1abf7d950a09e1b60cae258a74d54be79beec38c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76f5ace4_f32021d5",
        "filename": "include/ceres/jet.h",
        "patchSetId": 2
      },
      "lineNbr": 1023,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-01T22:51:29Z",
      "side": 1,
      "message": "std::",
      "range": {
        "startLine": 1023,
        "startChar": 6,
        "endLine": 1023,
        "endChar": 16
      },
      "revId": "1abf7d950a09e1b60cae258a74d54be79beec38c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc69fe27_510bc275",
        "filename": "include/ceres/jet.h",
        "patchSetId": 2
      },
      "lineNbr": 1030,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-01T22:51:29Z",
      "side": 1,
      "message": "std:: here and elsewhere.",
      "range": {
        "startLine": 1030,
        "startChar": 12,
        "endLine": 1030,
        "endChar": 22
      },
      "revId": "1abf7d950a09e1b60cae258a74d54be79beec38c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}