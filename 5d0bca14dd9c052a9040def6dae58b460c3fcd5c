{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2b1b94aa_8c888518",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-09T22:05:04Z",
      "side": 1,
      "message": "if asan is changing the behaviour maybe try msan, it maybe uninitialized memory?\n\nSameer",
      "tag": "mailMessageId\u003d\u003cCABqdRUAzjF_x8VY8OoSg39MiX1nKG5mFDsfkMjVUiZEuMGU8Hw@mail.gmail.com\u003e",
      "revId": "5d0bca14dd9c052a9040def6dae58b460c3fcd5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f68c8490_27b1ca61",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-08-09T22:07:50Z",
      "side": 1,
      "message": "Unfortunately, MSVC does not support MSan: https://docs.microsoft.com/en-us/cpp/build/reference/fsanitize?view\u003dmsvc-170.",
      "parentUuid": "2b1b94aa_8c888518",
      "revId": "5d0bca14dd9c052a9040def6dae58b460c3fcd5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c3845e9_bcd5db5c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-09T22:09:38Z",
      "side": 1,
      "message": "is there any other way that msvc supports checking for use of uninitialized memory?",
      "tag": "mailMessageId\u003d\u003cCABqdRUDJfG407B4dGgqAr-cvbvSUbHTDKBucFQA-zK0hY0UowQ@mail.gmail.com\u003e",
      "revId": "5d0bca14dd9c052a9040def6dae58b460c3fcd5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "303ed82a_69565af9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-08-09T22:22:36Z",
      "side": 1,
      "message": "Yes, there are basic runtime checks: https://docs.microsoft.com/en-us/cpp/build/reference/rtc-run-time-error-checks?view\u003dmsvc-170 which are turned on by default in debug builds.\n\nIn the meantime the version of METIS I built locally worked without problems. I need to determine the differences between this version and the one built on Github along SuiteSparse.",
      "parentUuid": "2c3845e9_bcd5db5c",
      "revId": "5d0bca14dd9c052a9040def6dae58b460c3fcd5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b77ff59_caebda33",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-09T22:29:32Z",
      "side": 1,
      "message": "thats weird and interesting.\n\nYou are using your own build on github right?\n\nSameer",
      "tag": "mailMessageId\u003d\u003cCABqdRUARWDmdUUwBtOXcg34YZzS15OgMEc-87_-w60xwEai3qQ@mail.gmail.com\u003e",
      "revId": "5d0bca14dd9c052a9040def6dae58b460c3fcd5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58328e4d_d7385955",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-08-09T23:11:17Z",
      "side": 1,
      "message": "Yes, correct.\n\nI could narrow down the differences to unspecified build type in the Github workflow that publishes the binaries at https://github.com/sergiud/SuiteSparse/releases. MSVC is known to cause problems when mixing debug and release builds. This essentially means the published METIS library could have always been broken. However, then I\u0027m wondering why the Ceres METIS tests succeeded just until recently.",
      "parentUuid": "8b77ff59_caebda33",
      "revId": "5d0bca14dd9c052a9040def6dae58b460c3fcd5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f2e8b49_fe0dd6a8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-09T23:12:17Z",
      "side": 1,
      "message": "well if its a uninitialized memory thing, then its a non-deterministic error.. we were just not hitting it.",
      "tag": "mailMessageId\u003d\u003cCABqdRUCDbCeCAVQx3k+hR69kgqTku8knejEgzHw9nzw51mhJSw@mail.gmail.com\u003e",
      "revId": "5d0bca14dd9c052a9040def6dae58b460c3fcd5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fcfb34cc_74d5dfc2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-08-10T21:17:21Z",
      "side": 1,
      "message": "A small update: downgrading to METIS 5.1.0 solves the heap corruption. Essentially this means there\u0027s something wrong with the latest METIS 5.1.1 release, at least when using MSVC 2022.",
      "parentUuid": "0f2e8b49_fe0dd6a8",
      "revId": "5d0bca14dd9c052a9040def6dae58b460c3fcd5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cadf1677_a403d1da",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-10T21:19:08Z",
      "side": 1,
      "message": "Great, thanks for dealing with this.",
      "parentUuid": "fcfb34cc_74d5dfc2",
      "revId": "5d0bca14dd9c052a9040def6dae58b460c3fcd5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d45c3047_86be46f0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-08-11T21:38:39Z",
      "side": 1,
      "message": "Sameer, after the downgrade I see the following output:\n```\n   Current memory used:         416 bytes\n   Maximum memory used:         416 bytes\n***Memory allocation failed for OMETIS: cptr. Requested size: 7378697601996030192 bytes\nERROR WHILE CALLING THE METIS PACKAGE\n[       OK ] EigenSparseCholeskyMETIS/SparseCholeskyTest.FactorAndSolve/EIGEN_SPARSE_NESDIS_UseBlockStructure (3796 ms)\n[----------] 1 test from EigenSparseCholeskyMETIS/SparseCholeskyTest (3796 ms total)\n\n[----------] Global test environment tear-down\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] 1 test from 1 test suite ran. (3796 ms total)\n[  PASSED  ] 1 test.\n```\neven though the tests pass. Is this something we should worry about?",
      "parentUuid": "cadf1677_a403d1da",
      "revId": "5d0bca14dd9c052a9040def6dae58b460c3fcd5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17f0f0e2_fb00f4e2",
        "filename": "internal/ceres/sparse_cholesky_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 173,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-08-08T22:12:13Z",
      "side": 1,
      "message": "It seems some sort of heap corruption occurs now in this test when compiled using MSVC. I\u0027ll look into it tomorrow including follow up changes w.r.t. `random.h` removal.",
      "revId": "5d0bca14dd9c052a9040def6dae58b460c3fcd5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e71d80ad_b41d2546",
        "filename": "internal/ceres/sparse_cholesky_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 173,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-08T22:16:50Z",
      "side": 1,
      "message": "Wow okay. Thanks for looking at this.",
      "parentUuid": "17f0f0e2_fb00f4e2",
      "revId": "5d0bca14dd9c052a9040def6dae58b460c3fcd5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c1273fc5_c8926211",
        "filename": "internal/ceres/sparse_cholesky_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 173,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-08-09T16:12:00Z",
      "side": 1,
      "message": "After an initial analysis, I can confirm a heap corruption with memory written to past the heap buffer end in the very first trial. The failure occurs in METIS directly, specifically when running the `EigenSparseCholeskyMETIS/SparseCholeskyTest.FactorAndSolve/EIGEN_SPARSE_NESDIS_UseBlockStructure` test at `eigensparse.cc:66` within ` solver_.analyzePattern(lhs)`. The passed sparse matrix `lhs` seems to be fully dense:\n```\n1.02287 -0.121527 -0.0138689\n-0.121527 1.64576 0.0736949\n-0.0138689 0.0736949 1.00841\n```\n`block_density` for the run is `0.22192930386710247`.\n\nAny idea what might be happening here?",
      "parentUuid": "e71d80ad_b41d2546",
      "revId": "5d0bca14dd9c052a9040def6dae58b460c3fcd5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48204210_8a7dc163",
        "filename": "internal/ceres/sparse_cholesky_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 173,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-09T18:09:23Z",
      "side": 1,
      "message": "how many blocks are there in this\n\ncan you print out all the properties of the sparse matrix, on my machine I get a 5x5 dense matrix.\n\nI am wondering if there is something weird in the csr matrix that innerproductcomputer is computing.. \n\nI would be very surprised if that were the case.\n\nany chance you can get a full stack trace?",
      "parentUuid": "c1273fc5_c8926211",
      "revId": "5d0bca14dd9c052a9040def6dae58b460c3fcd5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "610cbbfe_94538a4e",
        "filename": "internal/ceres/sparse_cholesky_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 173,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-08-09T21:56:59Z",
      "side": 1,
      "message": "This one is interesting. I went back to the last known good commit (d881b5ccf380bb909d27e19b10f803aca623b74c) and the heap corruption still occurs. There\u0027s also a METIS issue that describes exactly the same problem: https://github.com/KarypisLab/METIS/issues/26.\n\nBefore `\u003crandom\u003e` refactor, the size of the matrix was 4x4, after that it\u0027s 3x3.\n\nOn error I see the following backtrace (descending into `METIS_NodeND` at the crash site):\n```\n\u003e\tsparse_cholesky_test.exe!Eigen::MetisOrdering\u003cint\u003e::operator()\u003cEigen::SparseMatrix\u003cdouble,0,int\u003e\u003e(const Eigen::SparseMatrix\u003cdouble,0,int\u003e \u0026 A, Eigen::PermutationMatrix\u003c-1,-1,int\u003e \u0026 matperm) Line 117\tC++\n \tsparse_cholesky_test.exe!Eigen::SimplicialCholeskyBase\u003cEigen::SimplicialLDLT\u003cEigen::SparseMatrix\u003cdouble,0,int\u003e,2,Eigen::MetisOrdering\u003cint\u003e\u003e\u003e::ordering(const Eigen::SparseMatrix\u003cdouble,0,int\u003e \u0026 a, const Eigen::SparseMatrix\u003cdouble,0,int\u003e * \u0026 pmat, Eigen::SparseMatrix\u003cdouble,0,int\u003e \u0026 ap) Line 673\tC++\n \tsparse_cholesky_test.exe!Eigen::SimplicialCholeskyBase\u003cEigen::SimplicialLDLT\u003cEigen::SparseMatrix\u003cdouble,0,int\u003e,2,Eigen::MetisOrdering\u003cint\u003e\u003e\u003e::analyzePattern(const Eigen::SparseMatrix\u003cdouble,0,int\u003e \u0026 a, bool doLDLT) Line 247\tC++\n \tsparse_cholesky_test.exe!Eigen::SimplicialLDLT\u003cEigen::SparseMatrix\u003cdouble,0,int\u003e,2,Eigen::MetisOrdering\u003cint\u003e\u003e::analyzePattern(const Eigen::SparseMatrix\u003cdouble,0,int\u003e \u0026 a) Line 486\tC++\n \tsparse_cholesky_test.exe!ceres::internal::EigenSparseCholeskyTemplate\u003cEigen::SimplicialLDLT\u003cEigen::SparseMatrix\u003cdouble,0,int\u003e,2,Eigen::MetisOrdering\u003cint\u003e\u003e\u003e::Factorize(const Eigen::SparseMatrix\u003cdouble,0,int\u003e \u0026 lhs, std::string * message) Line 68\tC++\n \tsparse_cholesky_test.exe!ceres::internal::EigenSparseCholeskyTemplate\u003cEigen::SimplicialLDLT\u003cEigen::SparseMatrix\u003cdouble,0,int\u003e,2,Eigen::MetisOrdering\u003cint\u003e\u003e\u003e::Factorize(ceres::internal::CompressedRowSparseMatrix * lhs, std::string * message) Line 138\tC++\n \tsparse_cholesky_test.exe!ceres::internal::SparseCholesky::FactorAndSolve(ceres::internal::CompressedRowSparseMatrix * lhs, const double * rhs, double * solution, std::string * message) Line 112\tC++\n \tsparse_cholesky_test.exe!ceres::internal::`anonymous namespace\u0027::SparseCholeskySolverUnitTest(const ceres::SparseLinearAlgebraLibraryType sparse_linear_algebra_library_type, const ceres::internal::OrderingType ordering_type, const bool use_block_structure, const int num_blocks, const int min_block_size, const int max_block_size, const double block_density) Line 139\tC++\n \tsparse_cholesky_test.exe!ceres::internal::SparseCholeskyTest_FactorAndSolve_Test::TestBody() Line 187\tC++\n \tsparse_cholesky_test.exe!testing::internal::HandleSehExceptionsInMethodIfSupported\u003ctesting::Test,void\u003e(testing::Test * object, void(testing::Test::*)() method, const char * location) Line 4083\tC++\n \tsparse_cholesky_test.exe!testing::internal::HandleExceptionsInMethodIfSupported\u003ctesting::Test,void\u003e(testing::Test * object, void(testing::Test::*)() method, const char * location) Line 4134\tC++\n \tsparse_cholesky_test.exe!testing::Test::Run() Line 4180\tC++\n \tsparse_cholesky_test.exe!testing::TestInfo::Run() Line 4355\tC++\n \tsparse_cholesky_test.exe!testing::TestSuite::Run() Line 4507\tC++\n \tsparse_cholesky_test.exe!testing::internal::UnitTestImpl::RunAllTests() Line 7347\tC++\n \tsparse_cholesky_test.exe!testing::internal::HandleSehExceptionsInMethodIfSupported\u003ctesting::internal::UnitTestImpl,bool\u003e(testing::internal::UnitTestImpl * object, bool(testing::internal::UnitTestImpl::*)() method, const char * location) Line 4083\tC++\n \tsparse_cholesky_test.exe!testing::internal::HandleExceptionsInMethodIfSupported\u003ctesting::internal::UnitTestImpl,bool\u003e(testing::internal::UnitTestImpl * object, bool(testing::internal::UnitTestImpl::*)() method, const char * location) Line 4134\tC++\n \tsparse_cholesky_test.exe!testing::UnitTest::Run() Line 6929\tC++\n \tsparse_cholesky_test.exe!RUN_ALL_TESTS() Line 12373\tC++\n \tsparse_cholesky_test.exe!main(int argc, char * * argv) Line 69\tC++\n```\n\nI also enabled the address sanitizer and the behavior changed: the crash does not occur in the very first trial anymore but instead much later.\n\nThe address sanitize output is\n```\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\u003d\u003d31772\u003d\u003dERROR: AddressSanitizer: attempting free on address which was not malloc()-ed: 0x1215682218f0 in thread T0\n    #0 0x7ffecd912787  (C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.33.31629\\bin\\Hostx64\\x64\\clang_rt.asan_dbg_dynamic-x86_64.dll+0x180052787)\n    #1 0x7ff76f015467  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1403b5467)\n    #2 0x7ff76f02b828  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1403cb828)\n    #3 0x7ff76f031eea  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1403d1eea)\n    #4 0x7ff76f031936  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1403d1936)\n    #5 0x7ff76f00d6d8  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1403ad6d8)\n    #6 0x7ff76f00d41c  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1403ad41c)\n    #7 0x7ff76f00d298  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1403ad298)\n    #8 0x7ff76f00cc77  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1403acc77)\n    #9 0x7ff76f00c907  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1403ac907)\n    #10 0x7ff76ef8b7ad  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x14032b7ad)\n    #11 0x7ff76eff3dd7  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x140393dd7)\n    #12 0x7ff76efde931  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x14037e931)\n    #13 0x7ff76efded4f  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x14037ed4f)\n    #14 0x7ff76efd95d7  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1403795d7)\n    #15 0x7ff76efda261  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x14037a261)\n    #16 0x7ff76ef3d8c0  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1402dd8c0)\n    #17 0x7ff76ec67030  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x140007030)\n    #18 0x7ff76ec67f4c  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x140007f4c)\n    #19 0x7ff76ee2f7fd  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1401cf7fd)\n    #20 0x7ff76ee2f0a3  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1401cf0a3)\n    #21 0x7ff76edba41f  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x14015a41f)\n    #22 0x7ff76edbbd39  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x14015bd39)\n    #23 0x7ff76edbd30e  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x14015d30e)\n    #24 0x7ff76edce88b  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x14016e88b)\n    #25 0x7ff76ee2f9dd  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1401cf9dd)\n    #26 0x7ff76ee2f6b7  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1401cf6b7)\n    #27 0x7ff76edbeb8e  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x14015eb8e)\n    #28 0x7ff76f07a590  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x14041a590)\n    #29 0x7ff76f07a3a5  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x14041a3a5)\n    #30 0x7ff76f075e18  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x140415e18)\n    #31 0x7ff76f075d6d  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x140415d6d)\n    #32 0x7ff76f075c2d  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x140415c2d)\n    #33 0x7ff76f075e8d  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x140415e8d)\n    #34 0x7fff4e6a54df  (C:\\WINDOWS\\System32\\KERNEL32.DLL+0x1800154df)\n    #35 0x7fff4f4a485a  (C:\\WINDOWS\\SYSTEM32\\ntdll.dll+0x18000485a)\n\n0x1215682218f0 is located 0 bytes inside of 12-byte region [0x1215682218f0,0x1215682218fc)\nallocated by thread T0 here:\n    #0 0x7ffecd912904  (C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.33.31629\\bin\\Hostx64\\x64\\clang_rt.asan_dbg_dynamic-x86_64.dll+0x180052904)\n    #1 0x7ff76f015237  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1403b5237)\n    #2 0x7ff76f016bc4  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1403b6bc4)\n    #3 0x7ff76f024169  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1403c4169)\n    #4 0x7ff76f0217e6  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1403c17e6)\n    #5 0x7ff76f01f356  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1403bf356)\n    #6 0x7ff76f01e6b7  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1403be6b7)\n    #7 0x7ff76f00d63a  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1403ad63a)\n    #8 0x7ff76f00d41c  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1403ad41c)\n    #9 0x7ff76f00d298  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1403ad298)\n    #10 0x7ff76f00cc77  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1403acc77)\n    #11 0x7ff76f00c907  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1403ac907)\n    #12 0x7ff76ef8b7ad  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x14032b7ad)\n    #13 0x7ff76eff3dd7  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x140393dd7)\n    #14 0x7ff76efde931  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x14037e931)\n    #15 0x7ff76efded4f  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x14037ed4f)\n    #16 0x7ff76efd95d7  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1403795d7)\n    #17 0x7ff76efda261  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x14037a261)\n    #18 0x7ff76ef3d8c0  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1402dd8c0)\n    #19 0x7ff76ec67030  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x140007030)\n    #20 0x7ff76ec67f4c  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x140007f4c)\n    #21 0x7ff76ee2f7fd  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1401cf7fd)\n    #22 0x7ff76ee2f0a3  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1401cf0a3)\n    #23 0x7ff76edba41f  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x14015a41f)\n    #24 0x7ff76edbbd39  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x14015bd39)\n    #25 0x7ff76edbd30e  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x14015d30e)\n    #26 0x7ff76edce88b  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x14016e88b)\n    #27 0x7ff76ee2f9dd  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1401cf9dd)\n    #28 0x7ff76ee2f6b7  (C:\\devel\\build-ceres-solver\\bin\\Debug\\sparse_cholesky_test.exe+0x1401cf6b7)\n\nSUMMARY: AddressSanitizer: bad-free (C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.33.31629\\bin\\Hostx64\\x64\\clang_rt.asan_dbg_dynamic-x86_64.dll+0x180052787)\n```\nand the backtrace:\n```\n \tKernelBase.dll!00007fff4cc7474c()\tUnknown\n \t[External Code]\t\n \tclang_rt.asan_dbg_dynamic-x86_64.dll!00007ffecd918791()\tUnknown\n \tclang_rt.asan_dbg_dynamic-x86_64.dll!00007ffecd919dd5()\tUnknown\n \tclang_rt.asan_dbg_dynamic-x86_64.dll!00007ffecd8ee4ef()\tUnknown\n \tclang_rt.asan_dbg_dynamic-x86_64.dll!00007ffecd8f38f3()\tUnknown\n \tclang_rt.asan_dbg_dynamic-x86_64.dll!00007ffecd912788()\tUnknown\n \tsparse_cholesky_test.exe!gk_free\u001e()\tUnknown\n \tsparse_cholesky_test.exe!libmetis__FreeGraph\u001e()\tUnknown\n \tsparse_cholesky_test.exe!libmetis__Project2WayNodePartition\u001e()\tUnknown\n \tsparse_cholesky_test.exe!libmetis__Refine2WayNode\u001e()\tUnknown\n \tsparse_cholesky_test.exe!libmetis__MlevelNodeBisectionL1\u001e()\tUnknown\n \tsparse_cholesky_test.exe!libmetis__MlevelNodeBisectionL2\u001e()\tUnknown\n \tsparse_cholesky_test.exe!libmetis__MlevelNodeBisectionMultiple\u001e()\tUnknown\n \tsparse_cholesky_test.exe!libmetis__MlevelNestedDissection\u001e()\tUnknown\n \tsparse_cholesky_test.exe!METIS_NodeND\u001e()\tUnknown\n\u003e\tsparse_cholesky_test.exe!Eigen::MetisOrdering\u003cint\u003e::operator()\u003cEigen::SparseMatrix\u003cdouble,0,int\u003e\u003e(const Eigen::SparseMatrix\u003cdouble,0,int\u003e \u0026 A, Eigen::PermutationMatrix\u003c-1,-1,int\u003e \u0026 matperm) Line 117\tC++\n \tsparse_cholesky_test.exe!Eigen::SimplicialCholeskyBase\u003cEigen::SimplicialLDLT\u003cEigen::SparseMatrix\u003cdouble,0,int\u003e,2,Eigen::MetisOrdering\u003cint\u003e\u003e\u003e::ordering(const Eigen::SparseMatrix\u003cdouble,0,int\u003e \u0026 a, const Eigen::SparseMatrix\u003cdouble,0,int\u003e * \u0026 pmat, Eigen::SparseMatrix\u003cdouble,0,int\u003e \u0026 ap) Line 673\tC++\n \tsparse_cholesky_test.exe!Eigen::SimplicialCholeskyBase\u003cEigen::SimplicialLDLT\u003cEigen::SparseMatrix\u003cdouble,0,int\u003e,2,Eigen::MetisOrdering\u003cint\u003e\u003e\u003e::analyzePattern(const Eigen::SparseMatrix\u003cdouble,0,int\u003e \u0026 a, bool doLDLT) Line 247\tC++\n \tsparse_cholesky_test.exe!Eigen::SimplicialLDLT\u003cEigen::SparseMatrix\u003cdouble,0,int\u003e,2,Eigen::MetisOrdering\u003cint\u003e\u003e::analyzePattern(const Eigen::SparseMatrix\u003cdouble,0,int\u003e \u0026 a) Line 486\tC++\n \tsparse_cholesky_test.exe!ceres::internal::EigenSparseCholeskyTemplate\u003cEigen::SimplicialLDLT\u003cEigen::SparseMatrix\u003cdouble,0,int\u003e,2,Eigen::MetisOrdering\u003cint\u003e\u003e\u003e::Factorize(const Eigen::SparseMatrix\u003cdouble,0,int\u003e \u0026 lhs, std::string * message) Line 68\tC++\n \tsparse_cholesky_test.exe!ceres::internal::EigenSparseCholeskyTemplate\u003cEigen::SimplicialLDLT\u003cEigen::SparseMatrix\u003cdouble,0,int\u003e,2,Eigen::MetisOrdering\u003cint\u003e\u003e\u003e::Factorize(ceres::internal::CompressedRowSparseMatrix * lhs, std::string * message) Line 138\tC++\n \tsparse_cholesky_test.exe!ceres::internal::SparseCholesky::FactorAndSolve(ceres::internal::CompressedRowSparseMatrix * lhs, const double * rhs, double * solution, std::string * message) Line 112\tC++\n \tsparse_cholesky_test.exe!ceres::internal::`anonymous namespace\u0027::SparseCholeskySolverUnitTest(const ceres::SparseLinearAlgebraLibraryType sparse_linear_algebra_library_type, const ceres::internal::OrderingType ordering_type, const bool use_block_structure, const int num_blocks, const int min_block_size, const int max_block_size, const double block_density) Line 139\tC++\n \tsparse_cholesky_test.exe!ceres::internal::SparseCholeskyTest_FactorAndSolve_Test::TestBody() Line 187\tC++\n \tsparse_cholesky_test.exe!testing::internal::HandleSehExceptionsInMethodIfSupported\u003ctesting::Test,void\u003e(testing::Test * object, void(testing::Test::*)() method, const char * location) Line 4083\tC++\n \tsparse_cholesky_test.exe!testing::internal::HandleExceptionsInMethodIfSupported\u003ctesting::Test,void\u003e(testing::Test * object, void(testing::Test::*)() method, const char * location) Line 4134\tC++\n \tsparse_cholesky_test.exe!testing::Test::Run() Line 4180\tC++\n \tsparse_cholesky_test.exe!testing::TestInfo::Run() Line 4355\tC++\n \tsparse_cholesky_test.exe!testing::TestSuite::Run() Line 4507\tC++\n \tsparse_cholesky_test.exe!testing::internal::UnitTestImpl::RunAllTests() Line 7347\tC++\n \tsparse_cholesky_test.exe!testing::internal::HandleSehExceptionsInMethodIfSupported\u003ctesting::internal::UnitTestImpl,bool\u003e(testing::internal::UnitTestImpl * object, bool(testing::internal::UnitTestImpl::*)() method, const char * location) Line 4083\tC++\n \tsparse_cholesky_test.exe!testing::internal::HandleExceptionsInMethodIfSupported\u003ctesting::internal::UnitTestImpl,bool\u003e(testing::internal::UnitTestImpl * object, bool(testing::internal::UnitTestImpl::*)() method, const char * location) Line 4134\tC++\n \tsparse_cholesky_test.exe!testing::UnitTest::Run() Line 6929\tC++\n \tsparse_cholesky_test.exe!RUN_ALL_TESTS() Line 12373\tC++\n \tsparse_cholesky_test.exe!main(int argc, char * * argv) Line 69\tC++\n```\n\nI also built Ceres against new SuiteSparse binaries believing that it\u0027s a problem with an incompatible update in the C or C++ runtime. However, no luck.",
      "parentUuid": "48204210_8a7dc163",
      "revId": "5d0bca14dd9c052a9040def6dae58b460c3fcd5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "5d0bca14dd9c052a9040def6dae58b460c3fcd5c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}