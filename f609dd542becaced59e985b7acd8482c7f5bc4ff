{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fd13a109_11c5f206",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-04-16T19:00:22Z",
      "side": 1,
      "message": "I have replaced TripletSparseMatrix with BlockSparseMatrix in BlockRandomAccessSparseMatrix.\n\nAfter modifying BlockSparseMatrix::ToCompressedRowSparseMatrix() to sort-less version, this turned out to be slightly more effective than using TripletSparseMatrix, but not by a huge margin.\n\nI have also tried to fill column indices only for the first row of row block and then copying them, but it results into very small gains, so I decided to stick to a simpler version.\n\nMaking this conversion multi-threaded saves only a couple % of total runtime, I think that it does not worth to overcomplicate this conversion right now.\n\nFinal improvement is ~20..30%, for example on `problem-4585-1324582-pre.txt` (using `./bin/bundle_adjuster  -sparse_linear_algebra_library\u003dsuite_sparse -linear_solver\u003dsparse_schur -input\u003dproblem-4585-1324582-pre.txt -num_iterations\u003d20  -num_threads\u003d28`):\n```\nBefore (TripletSparseMatrix + sort):\n\nTime (in seconds):\nPreprocessor                        61.502462\n\n  Residual only evaluation           4.333457 (20)\n  Jacobian \u0026 residual evaluation     8.741550 (12)\n  Linear solver                    487.757376 (20)\nMinimizer                          506.131221\n\nPostprocessor                        0.695486\nTotal                              568.329171\n--------------------------------------------------\nAfter (BlockSparseMatrix without sort):\n\nTime (in seconds):\nPreprocessor                        61.495169\n\n  Residual only evaluation           4.328399 (20)\n  Jacobian \u0026 residual evaluation     8.632579 (12)\n  Linear solver                    322.538992 (20)\nMinimizer                          340.644099\n\nPostprocessor                        0.640037\nTotal                              402.779307\n```\n\nIt is crucial to have a reasonably modern SuiteSparse for reproducing those results.",
      "revId": "f609dd542becaced59e985b7acd8482c7f5bc4ff",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}