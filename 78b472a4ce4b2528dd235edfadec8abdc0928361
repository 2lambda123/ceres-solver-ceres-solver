{
  "comments": [
    {
      "key": {
        "uuid": "TS3njupo",
        "filename": "include/ceres/so3.h",
        "patchSetId": 3
      },
      "lineNbr": 63,
      "author": {
        "id": 5005
      },
      "writtenOn": "2013-04-15T18:57:24Z",
      "side": 1,
      "message": "Add blank comment line after this (we try to have a blank surrounding equations in Ceres)",
      "revId": "78b472a4ce4b2528dd235edfadec8abdc0928361",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "TS-nuqnw",
        "filename": "include/ceres/so3.h",
        "patchSetId": 3
      },
      "lineNbr": 69,
      "author": {
        "id": 5005
      },
      "writtenOn": "2013-04-15T18:57:24Z",
      "side": 1,
      "message": "Can we make the col major vs row major a template argument? \n\nAlso, I\u0027m not sure about SO3LocalParameterization. You could do the same thing for a quaternion, yet this is a rotation matrix. What about SO3ColMajorMatrixParameterization? (and SO3RowMajorMatrixParameterization)?\n\nSimply surrounding the conversions with an if on the template parameter would make it easy to support both modes.",
      "revId": "78b472a4ce4b2528dd235edfadec8abdc0928361",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "TWmhrA7s",
        "filename": "include/ceres/so3.h",
        "patchSetId": 3
      },
      "lineNbr": 69,
      "author": {
        "id": 5160
      },
      "writtenOn": "2013-04-15T19:17:56Z",
      "side": 1,
      "message": "Eeh. This brings back discussion about how to call names.\n\nIf quaternion\u0027s parameteization is also considered SO3 manifold, then we shall not call files quaternion.h and so3.h, but rather call quaternion.h and rotaion_matrix.h (otherwise splitting stuff based on manifold doesn\u0027t work well).\n\nBut i\u0027m not so much sure quaternion is actually SO3. AFAIK, neither Plus() nor compute_jacobian() are explicitly using SO3.",
      "parentUuid": "TS-nuqnw",
      "revId": "78b472a4ce4b2528dd235edfadec8abdc0928361",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "TWijaq2o",
        "filename": "include/ceres/so3.h",
        "patchSetId": 3
      },
      "lineNbr": 69,
      "author": {
        "id": 5160
      },
      "writtenOn": "2013-04-15T20:07:08Z",
      "side": 1,
      "message": "Forgot to mention here.\n\nI\u0027d say i don\u0027t actually thing SO3ColMajorMatrixParameterization/SO3RowMajorMatrixParameterization is the way to go. Not as if i don\u0027t like this particular way in this particular case. But it\u0027ll be just another way in comparison what we\u0027ve got in rotation.h.\n\nI think using adapters here is better idea from API usage point of view -- it\u0027ll be consistent with what we\u0027ve got already.\n\nAs an additional think it\u0027ll be nice to have rule like \"all the arrays are column-major\" so if your application is also col-major (and in case of CG i think it\u0027ll cover most of cases) you wouldn\u0027t worry about adopters. In other cases (or if you\u0027re col-major but paranoid :) you\u0027ll use adapters.\n\nAs opposite i\u0027d say don\u0027t use adapters in rotation.h and also make it different functions (maybe templated) to deal with col- vs. row- majority.",
      "parentUuid": "TWmhrA7s",
      "revId": "78b472a4ce4b2528dd235edfadec8abdc0928361",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "TdjKXiDw",
        "filename": "include/ceres/so3.h",
        "patchSetId": 3
      },
      "lineNbr": 69,
      "author": {
        "id": 5005
      },
      "writtenOn": "2013-04-16T23:12:59Z",
      "side": 1,
      "message": "I\u0027m fine with adaptors, but I am not so sure it\u0027s easy to implement.",
      "parentUuid": "TWijaq2o",
      "revId": "78b472a4ce4b2528dd235edfadec8abdc0928361",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ThL4OmTw",
        "filename": "include/ceres/so3.h",
        "patchSetId": 3
      },
      "lineNbr": 69,
      "author": {
        "id": 5160
      },
      "writtenOn": "2013-04-17T07:49:44Z",
      "side": 1,
      "message": "Ah, see the complexeity now. Could only suggest using Column, not Col in the name. Not sure about need of Matrix in the name tho.",
      "parentUuid": "TdjKXiDw",
      "revId": "78b472a4ce4b2528dd235edfadec8abdc0928361",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "TSzkC4lQ",
        "filename": "internal/ceres/so3_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 5005
      },
      "writtenOn": "2013-04-15T18:57:24Z",
      "side": 1,
      "message": "Comment blank after",
      "revId": "78b472a4ce4b2528dd235edfadec8abdc0928361",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "TS3n8Wi8",
        "filename": "internal/ceres/so3_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 5005
      },
      "writtenOn": "2013-04-15T18:57:24Z",
      "side": 1,
      "message": "Comments should be full sentences, including a period (throughout).",
      "revId": "78b472a4ce4b2528dd235edfadec8abdc0928361",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "TS7kNUoE",
        "filename": "internal/ceres/so3_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 5005
      },
      "writtenOn": "2013-04-15T18:57:24Z",
      "side": 1,
      "message": "No need for space after ()",
      "revId": "78b472a4ce4b2528dd235edfadec8abdc0928361",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "TS3m1enM",
        "filename": "internal/ceres/so3_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 5005
      },
      "writtenOn": "2013-04-15T18:57:24Z",
      "side": 1,
      "message": "This is oddly close to re-implementing the code under test in the test. I am not sure how I feel about this. Typically you would want to test other properties; for example, that \"plus\" maintains the rotation matrix invariant.\n\nSameer, what do you think?",
      "revId": "78b472a4ce4b2528dd235edfadec8abdc0928361",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "TWkhwv6M",
        "filename": "internal/ceres/so3_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 5160
      },
      "writtenOn": "2013-04-15T19:17:56Z",
      "side": 1,
      "message": "Could be replaced with pre-computed expected matrices. And in this case no need in additional check on whether Plus() returned rotation matrix or also included scale there or so. It\u0027ll be either correct or not.\n\nIMO, this would work better than trying to use some heuristics on checking whether matrix is correct or not.",
      "parentUuid": "TS3m1enM",
      "revId": "78b472a4ce4b2528dd235edfadec8abdc0928361",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    }
  ]
}