{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "abe73630_34383bf4",
        "filename": "include/ceres/manifold.h",
        "patchSetId": 3
      },
      "lineNbr": 344,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-01-06T19:35:11Z",
      "side": 1,
      "message": "I would be tempted to copy this section of docs from the rotation.h header here as well: https://github.com/ceres-solver/ceres-solver/blob/master/include/ceres/rotation.h#L36\n\nIn addition, perhaps a brief note that this is consistent with the Quaternion definition in rotation.h, which is NOT the same storage order as that used by Eigen: [x, y, z, w].  We keep getting emails about it, so I think it\u0027s common enough to be worth being very explicit about.",
      "revId": "b54a951601e13692dccee98a828d68300f2e12c6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "771b006a_250c2644",
        "filename": "include/ceres/manifold.h",
        "patchSetId": 3
      },
      "lineNbr": 347,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-01-06T19:35:11Z",
      "side": 1,
      "message": "nitpick, but this newline seems erroneous",
      "revId": "b54a951601e13692dccee98a828d68300f2e12c6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2505fba4_7a79996c",
        "filename": "include/ceres/manifold.h",
        "patchSetId": 3
      },
      "lineNbr": 349,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-01-06T19:35:11Z",
      "side": 1,
      "message": "Minor, but I would write the vector component as:\n\nsin(|delta|) * delta / |delta|\n\nIMO, I find it slightly easier to immediately parse that you are scaling the normalised vector in this form.",
      "revId": "b54a951601e13692dccee98a828d68300f2e12c6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b78a59b2_a149a1f7",
        "filename": "include/ceres/manifold.h",
        "patchSetId": 3
      },
      "lineNbr": 352,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-01-06T19:35:11Z",
      "side": 1,
      "message": "To be super explicit, perhaps append the following to the end of this line: \u0027as |q| :\u003d 1\u0027",
      "revId": "b54a951601e13692dccee98a828d68300f2e12c6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a76a9d7_935071f5",
        "filename": "internal/ceres/manifold.cc",
        "patchSetId": 3
      },
      "lineNbr": 281,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-01-06T19:35:11Z",
      "side": 1,
      "message": "I think you\u0027re missing an explicit \u003ccmath\u003e include here, also prefer std::sqrt() for consistency with later use in this file",
      "revId": "b54a951601e13692dccee98a828d68300f2e12c6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21a94c06_8a26c0c3",
        "filename": "internal/ceres/manifold.cc",
        "patchSetId": 3
      },
      "lineNbr": 283,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-01-06T19:35:11Z",
      "side": 1,
      "message": "Prefer std::sin() and std::cos() for consistency given later usage of std::atan2()",
      "revId": "b54a951601e13692dccee98a828d68300f2e12c6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95f52908_0ba498f2",
        "filename": "internal/ceres/manifold.cc",
        "patchSetId": 3
      },
      "lineNbr": 290,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-01-06T19:35:11Z",
      "side": 1,
      "message": "I think that you could actually use the QuaternionProduct() function from rotation.h here no?  I know its signature explicitly specifies the size of the input arrays, but AFAIK that always just decays to a pointer regardless so it shouldn\u0027t matter",
      "revId": "b54a951601e13692dccee98a828d68300f2e12c6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55f00803_4b1ee995",
        "filename": "internal/ceres/manifold.cc",
        "patchSetId": 3
      },
      "lineNbr": 291,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-01-06T19:35:11Z",
      "side": 1,
      "message": "A question here, we are always assuming that x is a normalised quaternion, but even if that was initially true, numerical errors might break that assumption after repeated iterations of Plus().  Not by much, but for a large number of iterations it would introduce some extra error, should we re-normalise the result here to bound that irrespective of the iteration?  Although this would be more expensive, it would bound the error.",
      "revId": "b54a951601e13692dccee98a828d68300f2e12c6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67b272e1_0012ba7d",
        "filename": "internal/ceres/manifold.cc",
        "patchSetId": 3
      },
      "lineNbr": 328,
      "author": {
        "id": 6627
      },
      "writtenOn": "2022-01-06T19:30:47Z",
      "side": 1,
      "message": "why this std::sqrt, while in Plus() you use sqrt?",
      "range": {
        "startLine": 328,
        "startChar": 24,
        "endLine": 328,
        "endChar": 33
      },
      "revId": "b54a951601e13692dccee98a828d68300f2e12c6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "235b2622_bff0cb49",
        "filename": "internal/ceres/manifold.cc",
        "patchSetId": 3
      },
      "lineNbr": 337,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-01-06T19:35:11Z",
      "side": 1,
      "message": "Couldn\u0027t these just be a direct assignment to zero?",
      "revId": "b54a951601e13692dccee98a828d68300f2e12c6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9dad8c18_98baca2f",
        "filename": "internal/ceres/manifold_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 567,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-01-06T19:35:11Z",
      "side": 1,
      "message": "Should we use kEpsilon here instead given its use elsewhere in this test?",
      "revId": "b54a951601e13692dccee98a828d68300f2e12c6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93aa4f48_5b1baff8",
        "filename": "internal/ceres/manifold_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 589,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-01-06T19:35:11Z",
      "side": 1,
      "message": "Is this not down to whether or not the R^3 vector is a member of the lie algebra s^3, or a rotation vector (R^3)?  I\u0027m thinking of this reference (Example #5): https://arxiv.org/pdf/1812.01537.pdf",
      "revId": "b54a951601e13692dccee98a828d68300f2e12c6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "919835f9_f1bcc84e",
        "filename": "internal/ceres/manifold_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 664,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-01-06T19:35:11Z",
      "side": 1,
      "message": "I think you mean M_PI + 1e-6 here",
      "revId": "b54a951601e13692dccee98a828d68300f2e12c6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}