{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "19a51d22_1505a9ae",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-11-26T18:56:31Z",
      "side": 1,
      "message": "This should resolve #922, #887",
      "revId": "35ab69c6cc4feea78d63a9917760b480d3f71d56",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "741001e4_1957dd02",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-11-26T23:35:48Z",
      "side": 1,
      "message": "I find the need to change the test matrices a bit suspect. I find it hard to believe that the quality of blas varies so much across these cards. Something does not small right here.",
      "revId": "35ab69c6cc4feea78d63a9917760b480d3f71d56",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2643a107_ac9a61b0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-11-27T13:46:56Z",
      "side": 1,
      "message": "The CUDA Cholesky solver indeed produces subtly different results on the Jetson TX2 vs. on an RTX 6000.\nHere are the norm of the residuals for the previous test matrix at the beginning of each refinement iteration of the mixed-precision solver:\n```\n// Jetson TX2:\n0: 2.000000e+00\n1: 2.176802e-05\n2: 2.934464e-12\n3: 1.171857e-13\n\n// RTX 6000:\n0: 2.000000e+00\n1: 1.922340e-05\n2: 1.739074e-12\n3: 0.000000e+00\n```\n\nGiven that the CUDA solver is multi-threaded with a threading model that varies across GPUs, the different order of operations will result in subtly different results for ill-conditioned matrices. I\u0027m not too surprised by this.",
      "parentUuid": "741001e4_1957dd02",
      "revId": "35ab69c6cc4feea78d63a9917760b480d3f71d56",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2431c45c_a721cbe8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-11-27T14:26:05Z",
      "side": 1,
      "message": "It is weird (coincidence?) though that the variations are such that the loss of precision is more acute on lower-end and lower-power GPUs.",
      "parentUuid": "2643a107_ac9a61b0",
      "revId": "35ab69c6cc4feea78d63a9917760b480d3f71d56",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a73226f_cc78b3bf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-11-29T15:41:01Z",
      "side": 1,
      "message": "Dmitriy pointed out a good suggestion.\nWhy don\u0027t we do this: let\u0027s close this CL. \nI\u0027ll make a CL with just the namespace changes. We can defer changes to the precision failures to after we reach a conclusion on the email thread.",
      "revId": "35ab69c6cc4feea78d63a9917760b480d3f71d56",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "501726f3_06846f0e",
        "filename": "CMakeLists.txt",
        "patchSetId": 1
      },
      "lineNbr": 279,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-11-26T18:56:31Z",
      "side": 1,
      "message": "@alexs.mac@gmail.com\nDoes this seem sound? Empirically I\u0027ve had no issues on a Jetson TX2 and on an RTX 6000.",
      "revId": "35ab69c6cc4feea78d63a9917760b480d3f71d56",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d3c6ecd_8a60597c",
        "filename": "CMakeLists.txt",
        "patchSetId": 1
      },
      "lineNbr": 279,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-11-27T14:01:27Z",
      "side": 1,
      "message": "Unfortunately this does not work. I found a system where this fails.\nWe need a better way to do this, since the supported architectures will depend on the specific CUDA version. e.g. 10.2 does not know 80 or 90, while 11.8 knows 80 and 90 but does not support 50 anymore.",
      "parentUuid": "501726f3_06846f0e",
      "revId": "35ab69c6cc4feea78d63a9917760b480d3f71d56",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bcd6546_283c72c2",
        "filename": "internal/ceres/cuda_dense_cholesky_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 171,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-11-26T18:56:31Z",
      "side": 1,
      "message": "@sandwichmaker@gmail.com Sanity-check this analysis, please? Thanks. :-)",
      "revId": "35ab69c6cc4feea78d63a9917760b480d3f71d56",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "977aae47_d471d29f",
        "filename": "internal/ceres/cuda_dense_cholesky_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 171,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-11-29T02:19:41Z",
      "side": 1,
      "message": "lhs \u003d Random(kNumCols, kNumCols);\n\ngives you a matrix with values in the range [-1,1] of size knumcols x knumcols.\n\nso its frobenius norm if kNumCols, which is an upper bound on its largest singular value.\n\nthe lower bound on the smallest singular value is of course zero.\n\nlhs \u003d lhs.transpose() * lhs\n\nmeans that the lhs now has the largest singular value to be kNumCols^2\n\nadding kNumCols to the diagonal means that the condition number is upper bounded by\n\n(kNumCols^2 + kNumCols)/kNumCols \u003d kNumCols + 1\n\nso I do not think your analysis is right, unless you can somehow prove that the largest singular value/eigenvalue of lhs.transpose()  * lhs is actually kNumCols, which I do not think is the case.\n\nlhs \u003d ones(kNumCols, kNumCols) is the counter example.",
      "parentUuid": "5bcd6546_283c72c2",
      "revId": "35ab69c6cc4feea78d63a9917760b480d3f71d56",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "874a27db_22973a56",
        "filename": "internal/ceres/cuda_dense_cholesky_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 171,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-11-29T03:10:03Z",
      "side": 1,
      "message": "Ah, thanks for the analysis and good counter example. \nBut this seems to indicate that previously the random tests were generating matrices with condition number upper-bounded by (kNumCols^2 + 1e-3)/1e-3 ~\u003d 1e3 * kNumCols^2 which is really bad.\n\nThe difference in sampling between [-1, 1] and (-1, 1) seems to be significant. Here\u0027s a test Matlab script:\n```\nN \u003d 1600;\nfor i \u003d 1:100\n  % Note that this will sample from (-1, 1) not [-1, 1]\n  A \u003d 2.0 * (rand(N)-0.5);\n  A \u003d A * A\u0027;\n  fprintf(\"%15e %15e %f\\n\", cond(A), cond(A + N * eye(N)));\nend\n```\nThis seems to produce max condition numbers around 2.33",
      "parentUuid": "977aae47_d471d29f",
      "revId": "35ab69c6cc4feea78d63a9917760b480d3f71d56",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3beff8cb_ae5fe432",
        "filename": "internal/ceres/cuda_kernels.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 6141
      },
      "writtenOn": "2022-11-29T15:27:29Z",
      "side": 1,
      "message": "As far as I understand, only nested namespace definition syntax introduced with c++17:\n\n```\nnamespace ceres::internal {\n...\n}\n```\nis not supported by older versions of nvcc.\n\nBut regular nested namespaces:\n\n```\nnamespace ceres {\nnamespace internal {\n...\n}\n}\n```\nare supported, so we can use an older syntax in order to maintain naming uniformity.",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 26
      },
      "revId": "35ab69c6cc4feea78d63a9917760b480d3f71d56",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b539633_e093f9ed",
        "filename": "internal/ceres/cuda_kernels.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-11-29T15:41:01Z",
      "side": 1,
      "message": "Yes, you\u0027re right, that works!",
      "parentUuid": "3beff8cb_ae5fe432",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 26
      },
      "revId": "35ab69c6cc4feea78d63a9917760b480d3f71d56",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "35ab69c6cc4feea78d63a9917760b480d3f71d56",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}