{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "43c453a1_bc76a7d2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-06-06T14:53:12Z",
      "side": 1,
      "message": "Thanks for going through this. I have some follow-up questions.",
      "revId": "b812d20e5b0a770f86211feeeb4e37865d6de72e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c12d6200_3bc9f3c2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-06-06T21:32:35Z",
      "side": 1,
      "message": "thoughts on the c++14 + c++17 mix needed here?",
      "tag": "mailMessageId\u003d\u003cCABqdRUBso1Dxj41S1Rdh_GOpksOmtBPSGX76uFrYRj8yRL52pA@mail.gmail.com\u003e",
      "revId": "b812d20e5b0a770f86211feeeb4e37865d6de72e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4ffe13f_5bb1ee13",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-06-06T22:09:38Z",
      "side": 1,
      "message": "Mixing C++14 and C++17 is safe in my experience.\n\nWhat I\u0027m wondering about: will Ceres ship the kernels in a separate library? The `add_library` call will generate either a static or a shared library depending on `BUILD_SHARED_LIBS`.\n\nIf a separate library is not necessary, the CUDA kernels can be added to the `ceres_internal` target directly using `target_sources(... PRIVATE)` as I\u0027m assuming these are not intended to be exported. Here, the C++ standard can also be set per translation unit using `set_source_files_properties (... PROPERTIES CXX_STANDARD 14)`.\n\nYou also need to decide whether the language standard is a strict requirement and use `set_source_files_properties (... PROPERTIES CXX_STANDARD_REQUIRED ON)` accordingly as otherwise the compiler will decay to latest supported standard.",
      "parentUuid": "c12d6200_3bc9f3c2",
      "revId": "b812d20e5b0a770f86211feeeb4e37865d6de72e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9543c0d8_f2d7a923",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-06-06T22:55:35Z",
      "side": 1,
      "message": "I\u0027m way out of my depth in cmake land here, but here\u0027s what I tried:\n\n```\nset(CUDA_STANDARD 14)\n  set_property(TARGET ceres_internal PROPERTY CUDA_STANDARD 14)\n  set_property(TARGET ceres PROPERTY CUDA_STANDARD 14)\n  target_sources(ceres_internal PRIVATE ceres_cuda_kernels.cu)\n  set_source_files_properties(ceres_cuda_kernels.cu PROPERTIES CXX_STANDARD 14)\n  set_source_files_properties(ceres_cuda_kernels.cu PROPERTIES CUDA_STANDARD 14)\n  set_source_files_properties(ceres_cuda_kernels.cu\n      PROPERTIES CXX_STANDARD_REQUIRED ON)\n```\n\nHowever, this still fails with the following cmake error:\n```\nCMake Error at internal/ceres/CMakeLists.txt:287 (add_library):\n  CUDA_STANDARD is set to invalid value \u002717\u0027\n\n\nCMake Error at internal/ceres/CMakeLists.txt:164 (add_library):\n  CUDA_STANDARD is set to invalid value \u002717\u0027\n```",
      "parentUuid": "b4ffe13f_5bb1ee13",
      "revId": "b812d20e5b0a770f86211feeeb4e37865d6de72e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edaa91f0_51013f0f",
        "filename": "internal/ceres/CMakeLists.txt",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-06-06T00:31:21Z",
      "side": 1,
      "message": "I have no idea what havoc this will wreck.",
      "range": {
        "startLine": 152,
        "startChar": 45,
        "endLine": 152,
        "endChar": 51
      },
      "revId": "b812d20e5b0a770f86211feeeb4e37865d6de72e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20c1a969_c8abdc67",
        "filename": "internal/ceres/CMakeLists.txt",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-06-06T14:53:12Z",
      "side": 1,
      "message": "Agreed, me neither. We need a \"good\" way to compile cuda kernels alongside ceres for the kinds of extensions we\u0027re planning in the future. Now is probably a good time to figure out what the correct way to do it is.",
      "parentUuid": "edaa91f0_51013f0f",
      "range": {
        "startLine": 152,
        "startChar": 45,
        "endLine": 152,
        "endChar": 51
      },
      "revId": "b812d20e5b0a770f86211feeeb4e37865d6de72e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "172a3c6c_7514e6f0",
        "filename": "internal/ceres/CMakeLists.txt",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-06-06T15:23:55Z",
      "side": 1,
      "message": "Alex, do you know what is the right thing here?",
      "parentUuid": "20c1a969_c8abdc67",
      "range": {
        "startLine": 152,
        "startChar": 45,
        "endLine": 152,
        "endChar": 51
      },
      "revId": "b812d20e5b0a770f86211feeeb4e37865d6de72e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30ea4a01_666b84a0",
        "filename": "internal/ceres/ceres_cuda_kernels.h",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-06-06T00:31:21Z",
      "side": 1,
      "message": "shouldn\u0027t there be cuda functions for this already?",
      "range": {
        "startLine": 50,
        "startChar": 5,
        "endLine": 50,
        "endChar": 20
      },
      "revId": "b812d20e5b0a770f86211feeeb4e37865d6de72e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b742bf37_3ac690fe",
        "filename": "internal/ceres/ceres_cuda_kernels.h",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-06-06T14:53:12Z",
      "side": 1,
      "message": "There is `cudaMemset`, but out of a (potential over-) abundance of caution this calls a kernel that does a safe type cast. I could be swayed to revert to cudaMemset if you think that is preferable.",
      "parentUuid": "30ea4a01_666b84a0",
      "range": {
        "startLine": 50,
        "startChar": 5,
        "endLine": 50,
        "endChar": 20
      },
      "revId": "b812d20e5b0a770f86211feeeb4e37865d6de72e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "226fccd3_7d698ce9",
        "filename": "internal/ceres/ceres_cuda_kernels.h",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-06-06T15:23:55Z",
      "side": 1,
      "message": "you should be able to make a type specific cudaMemset call no?",
      "parentUuid": "b742bf37_3ac690fe",
      "range": {
        "startLine": 50,
        "startChar": 5,
        "endLine": 50,
        "endChar": 20
      },
      "revId": "b812d20e5b0a770f86211feeeb4e37865d6de72e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72e105c5_a70d6499",
        "filename": "internal/ceres/ceres_cuda_kernels.h",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-06-06T00:31:21Z",
      "side": 1,
      "message": "This needs a better name, not sure what though.\n\nalso are you sure you x \u003d x + y and not x \u003d x + a * y or something like that in which case you just have axpy no?",
      "range": {
        "startLine": 56,
        "startChar": 5,
        "endLine": 56,
        "endChar": 21
      },
      "revId": "b812d20e5b0a770f86211feeeb4e37865d6de72e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6f63b0c_f13d2d4c",
        "filename": "internal/ceres/ceres_cuda_kernels.h",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-06-06T14:53:12Z",
      "side": 1,
      "message": "It does need a better more descriptive name. \nIt actually does more than just x \u003d x + y. It operates on different types for x and y, and casts to the destination type before performing the addition.\ncublas *axpy operations operate on the same type for all values.",
      "parentUuid": "72e105c5_a70d6499",
      "range": {
        "startLine": 56,
        "startChar": 5,
        "endLine": 56,
        "endChar": 21
      },
      "revId": "b812d20e5b0a770f86211feeeb4e37865d6de72e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbdd307b_30b4d03f",
        "filename": "internal/ceres/ceres_cuda_kernels.h",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-06-06T15:23:55Z",
      "side": 1,
      "message": "dsaxpy is a good name, there is a precendent for this typed of mixed naming in blas.",
      "parentUuid": "e6f63b0c_f13d2d4c",
      "range": {
        "startLine": 56,
        "startChar": 5,
        "endLine": 56,
        "endChar": 21
      },
      "revId": "b812d20e5b0a770f86211feeeb4e37865d6de72e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cea1c21d_2603ad94",
        "filename": "internal/ceres/dense_cholesky.cc",
        "patchSetId": 2
      },
      "lineNbr": 363,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-06-06T15:23:55Z",
      "side": 1,
      "message": "I think it will make the code much simpler to read if you introduced private high level methods which took care of doing the operation while using the various member variables. For example\n\ncusolver_handle,\n                       CUBLAS_FILL_MODE_LOWER,\n                       num_cols,\n                       1,\n                       lhs.data(),\n                       num_cols,\n                       solution.data(),\n                       num_cols,\n                       error.data()\n                       \n                       \nshould be replaced by a private member which takes care of the cuda boiler plate etc.",
      "range": {
        "startLine": 363,
        "startChar": 28,
        "endLine": 363,
        "endChar": 59
      },
      "revId": "b812d20e5b0a770f86211feeeb4e37865d6de72e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e689bfd7_2e89f16d",
        "filename": "internal/ceres/dense_cholesky.cc",
        "patchSetId": 2
      },
      "lineNbr": 431,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-06-06T00:31:21Z",
      "side": 1,
      "message": "is there a point to splitting this out into its own function, its called exactly once.",
      "range": {
        "startLine": 431,
        "startChar": 28,
        "endLine": 431,
        "endChar": 38
      },
      "revId": "b812d20e5b0a770f86211feeeb4e37865d6de72e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c5d387c_2d986ece",
        "filename": "internal/ceres/dense_cholesky.cc",
        "patchSetId": 2
      },
      "lineNbr": 431,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-06-06T14:53:12Z",
      "side": 1,
      "message": "I\u0027ll move it to a private method. Factorizing it out improves readability of the iterative solver.",
      "parentUuid": "e689bfd7_2e89f16d",
      "range": {
        "startLine": 431,
        "startChar": 28,
        "endLine": 431,
        "endChar": 38
      },
      "revId": "b812d20e5b0a770f86211feeeb4e37865d6de72e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d24dc6c_8f1185d4",
        "filename": "internal/ceres/dense_cholesky.h",
        "patchSetId": 2
      },
      "lineNbr": 180,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-06-06T00:31:21Z",
      "side": 1,
      "message": "unless you plan to test this method on its own -- I recommend having this just as a private method of cudadensecholeskymixedprecision.",
      "range": {
        "startLine": 180,
        "startChar": 28,
        "endLine": 180,
        "endChar": 38
      },
      "revId": "b812d20e5b0a770f86211feeeb4e37865d6de72e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f0cb72f_a25fb824",
        "filename": "internal/ceres/dense_cholesky.h",
        "patchSetId": 2
      },
      "lineNbr": 180,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-06-06T14:53:12Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0d24dc6c_8f1185d4",
      "range": {
        "startLine": 180,
        "startChar": 28,
        "endLine": 180,
        "endChar": 38
      },
      "revId": "b812d20e5b0a770f86211feeeb4e37865d6de72e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}