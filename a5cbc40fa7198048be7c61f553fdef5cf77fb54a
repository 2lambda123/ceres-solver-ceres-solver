{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0e6245c7_0e05f568",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-01-16T15:39:34Z",
      "side": 1,
      "message": "Sergiu would you mind taking a look? a second pair of eyes when restructuring this would be helpful.\n\nDmitriy I will send a full review later in the day. I need some coffee before I opine on this :)",
      "revId": "a5cbc40fa7198048be7c61f553fdef5cf77fb54a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff37ed89_ad1927f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2023-01-16T19:51:49Z",
      "side": 1,
      "message": "Sameer, I\u0027ll review this CL tomorrow as I\u0027m pretty much done for today.",
      "parentUuid": "0e6245c7_0e05f568",
      "revId": "a5cbc40fa7198048be7c61f553fdef5cf77fb54a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f0e16e9_6c1e36d4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-01-16T19:57:47Z",
      "side": 1,
      "message": "Tomorrow is perfectly okay! Ty.",
      "tag": "mailMessageId\u003d\u003cCABqdRUDtd1q+Xr-xj-UxOs70Lf\u003d49TxBssejOKNtDPMaokdVKw@mail.gmail.com\u003e",
      "revId": "a5cbc40fa7198048be7c61f553fdef5cf77fb54a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0bff952_44e92bee",
        "filename": "internal/ceres/parallel_for.cc",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-01-17T12:49:57Z",
      "side": 1,
      "message": "may I suggest that we limit this CL to just a reordering of the code, and come back and make changes like this in a subsequent CL? it will make for a cleaner commit history but also debugging if there is a bug introduced somewhere.",
      "range": {
        "startLine": 55,
        "startChar": 19,
        "endLine": 55,
        "endChar": 20
      },
      "revId": "a5cbc40fa7198048be7c61f553fdef5cf77fb54a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e03dc60_05cae026",
        "filename": "internal/ceres/parallel_for.cc",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-01-17T18:45:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a0bff952_44e92bee",
      "range": {
        "startLine": 55,
        "startChar": 19,
        "endLine": 55,
        "endChar": 20
      },
      "revId": "a5cbc40fa7198048be7c61f553fdef5cf77fb54a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e00159c8_7fa3fd37",
        "filename": "internal/ceres/parallel_for.h",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 6612
      },
      "writtenOn": "2023-01-17T19:12:15Z",
      "side": 1,
      "message": "I\u0027d rather unpack the tuple using `std::apply` and then pass the IDs a individual parameters because the lambda signature looks inconsistent. This will simplify the code by eliminating the structured bindings used over and over.",
      "revId": "a5cbc40fa7198048be7c61f553fdef5cf77fb54a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36feadda_efeb8eea",
        "filename": "internal/ceres/parallel_for.h",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-01-30T17:00:45Z",
      "side": 1,
      "message": "`InvokeOnSegment` needs to solve two problems via dispatching based on argument types of `F`:\n - Supplying \"optional\" `thread_id` argument\n - Making a loop for functions operating on a single index\n\nSo far I don\u0027t see a way to replace it with `std::apply` invocations without explicit extracting argument types of `F`.\n\n\nBelow is a brief rationale behind co-existence of parallelizable functions accepting `(int)`, `(int, int)`, `(tuple\u003cint, int\u003e)` and `(int, tuple\u003cint, int\u003e)`.\n\n\n\nIn files affected by this CL `std::tuple\u003cint, int\u003e` always has a meaning of contiguous segment of integers `[a; b)`\n\n\nWe have 4 \u003d 2 x 2 types of parallelizable functions:\n - Functions expecting either a single loop index or a contiguous range of loop indices per call\n - Functions that (do not) expect thread_id as a first argument\n\n\nThe following table summarizes signatures of all supported functions:\n\n```\n                 | Works with indices | Works with ranges\n-----------------+--------------------+-----------------------\n Needs thread_id | (int, int)         | (int, tuple\u003cint, int\u003e)\n-----------------+--------------------+-----------------------\n No thread_id    | (int)              | (tuple\u003cint, int\u003e)\n-----------------+--------------------+-----------------------\n```\n\n\nFunctions accepting a range of loop indices were introduced together with parallel vector operations (CL 23621), because those are ineffective to perform on index-by-index basis.\n\nBecause functions requiring thread_id and operating on a single index already used signature `(int, int)`, I decided to make functions operating on ranges accept range as a `tuple\u003cint, int\u003e`.\nWhile we could use `(int thread_id, int start, int end)` for parallelizable functions accepting range and requiring thread-id, this would make API for functions accepting range and (not-)requiring thread-id inconsistent.\n\n\nFor functions operating on a single index we need to add a loop over elements of range provided by scheduling part of code (`ParallelInvoke`), while functions operating on ranges can accept the range directly.",
      "parentUuid": "e00159c8_7fa3fd37",
      "revId": "a5cbc40fa7198048be7c61f553fdef5cf77fb54a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3354be99_52ce9176",
        "filename": "internal/ceres/parallel_for.h",
        "patchSetId": 3
      },
      "lineNbr": 152,
      "author": {
        "id": 6612
      },
      "writtenOn": "2023-01-17T19:12:15Z",
      "side": 1,
      "message": "Any reason for the functor to be a `const` reference? I\u0027d use r-value references to allow for perfect forwarding.",
      "range": {
        "startLine": 152,
        "startChar": 17,
        "endLine": 152,
        "endChar": 22
      },
      "revId": "a5cbc40fa7198048be7c61f553fdef5cf77fb54a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2715eb03_2271a2f1",
        "filename": "internal/ceres/parallel_for.h",
        "patchSetId": 3
      },
      "lineNbr": 152,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-01-30T17:00:45Z",
      "side": 1,
      "message": "I made a change to forwarding r-value reference.\nAssuming that the only goal was to get a non-const binding of rvalues, I decided not to forward them downwards, since lvalue references to callables seem to be good enough.\n\nFrom my point, however, requiring function-like object used for concurrent invocation to have a const-qualified operator() seem to be a reasonable expectation.",
      "parentUuid": "3354be99_52ce9176",
      "range": {
        "startLine": 152,
        "startChar": 17,
        "endLine": 152,
        "endChar": 22
      },
      "revId": "a5cbc40fa7198048be7c61f553fdef5cf77fb54a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6dcf82c_14ed242e",
        "filename": "internal/ceres/parallel_for.h",
        "patchSetId": 3
      },
      "lineNbr": 173,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-01-17T12:49:57Z",
      "side": 1,
      "message": "I think the functions below ParallelAssign, ParallelSetZero should live in their own file no? say parallel_vector_ops.h ?",
      "range": {
        "startLine": 173,
        "startChar": 3,
        "endLine": 173,
        "endChar": 11
      },
      "revId": "a5cbc40fa7198048be7c61f553fdef5cf77fb54a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d3689a5_a6a390a1",
        "filename": "internal/ceres/parallel_for.h",
        "patchSetId": 3
      },
      "lineNbr": 173,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-01-17T18:45:03Z",
      "side": 1,
      "message": "Done.\n\nBy the way, should I also split implementations into separate files, or it is ok to keep those 5 functions in parallel_for.cc?",
      "parentUuid": "b6dcf82c_14ed242e",
      "range": {
        "startLine": 173,
        "startChar": 3,
        "endLine": 173,
        "endChar": 11
      },
      "revId": "a5cbc40fa7198048be7c61f553fdef5cf77fb54a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc13c3a8_3506a3c0",
        "filename": "internal/ceres/parallel_for_invoke_impl.h",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-01-17T12:49:57Z",
      "side": 1,
      "message": "I think this file should be named parallel_invoke.h",
      "range": {
        "startLine": 30,
        "startChar": 2,
        "endLine": 30,
        "endChar": 12
      },
      "revId": "a5cbc40fa7198048be7c61f553fdef5cf77fb54a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20c1b057_fb69f51a",
        "filename": "internal/ceres/parallel_for_invoke_impl.h",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-01-17T18:45:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dc13c3a8_3506a3c0",
      "range": {
        "startLine": 30,
        "startChar": 2,
        "endLine": 30,
        "endChar": 12
      },
      "revId": "a5cbc40fa7198048be7c61f553fdef5cf77fb54a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ac58221_93c78c00",
        "filename": "internal/ceres/parallel_for_partition.h",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-01-17T12:49:57Z",
      "side": 1,
      "message": "I think ComputePartition should be renamed to PartitionRangeForParallelFor and the file renamed to partition_range_for_parallel_for.h. I do not like the for_foo_for pattern, but its the best I have right now.",
      "range": {
        "startLine": 29,
        "startChar": 12,
        "endLine": 29,
        "endChar": 17
      },
      "revId": "a5cbc40fa7198048be7c61f553fdef5cf77fb54a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e9211ca_223a4b9c",
        "filename": "internal/ceres/parallel_for_partition.h",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-01-17T18:45:03Z",
      "side": 1,
      "message": "Is PartitionRangeMinimizingMaximalCost any better?\n\nAbout file name the only idea I\u0027ve come up with is minmax_range_partition.h , what do you think?",
      "parentUuid": "9ac58221_93c78c00",
      "range": {
        "startLine": 29,
        "startChar": 12,
        "endLine": 29,
        "endChar": 17
      },
      "revId": "a5cbc40fa7198048be7c61f553fdef5cf77fb54a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dea69c8b_40c47065",
        "filename": "internal/ceres/parallel_for_synchronization.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-01-17T12:49:57Z",
      "side": 1,
      "message": "I am a bit perplexed by the original structure of this code, why do we have a class called ThreadPool but a separate object called ThreadPoolState that the ThreadPool does not refer to? but is only referred to by the ParallelInvoke? this seems to indicate that this is not a great name for this class no? or it is at the wrong place.",
      "range": {
        "startLine": 35,
        "startChar": 16,
        "endLine": 35,
        "endChar": 17
      },
      "revId": "a5cbc40fa7198048be7c61f553fdef5cf77fb54a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55a2572b_f9b461c7",
        "filename": "internal/ceres/parallel_for_synchronization.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-01-17T18:45:03Z",
      "side": 1,
      "message": "Yes, it is only used for handling \"dynamic\" part of job assignment.\nBlockUntilFinished is also only used for ParallelInvoke implementation.\n\nWill WorkCompletionStatus / WorkCompletionState be a better name?\n\nDo you think we should move those synchronization primitives to header with  ParallelInvoke ?",
      "parentUuid": "dea69c8b_40c47065",
      "range": {
        "startLine": 35,
        "startChar": 16,
        "endLine": 35,
        "endChar": 17
      },
      "revId": "a5cbc40fa7198048be7c61f553fdef5cf77fb54a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "312c8c38_8154e0bb",
        "filename": "internal/ceres/parallel_for_synchronization.h",
        "patchSetId": 3
      },
      "lineNbr": 63,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-01-17T12:49:57Z",
      "side": 1,
      "message": "shouldn\u0027 this be const?",
      "range": {
        "startLine": 63,
        "startChar": 6,
        "endLine": 63,
        "endChar": 21
      },
      "revId": "a5cbc40fa7198048be7c61f553fdef5cf77fb54a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e17c3d3_46742a8e",
        "filename": "internal/ceres/parallel_for_synchronization.h",
        "patchSetId": 3
      },
      "lineNbr": 63,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-01-17T18:45:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "312c8c38_8154e0bb",
      "range": {
        "startLine": 63,
        "startChar": 6,
        "endLine": 63,
        "endChar": 21
      },
      "revId": "a5cbc40fa7198048be7c61f553fdef5cf77fb54a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}