{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f5bf7328_e379d321",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 6141
      },
      "writtenOn": "2022-09-15T07:34:48Z",
      "side": 1,
      "message": "Major changes once again:\n - Removed `std::function\u003c...\u003e` usage in favor of template-driven inlining\n - Reverted changes from patchset #3 related to passing range to loop bodies, because removing `std::function\u003c...\u003e` allows to preserve more usable syntax\n\n\nAll backends get a common prologue for dealing with `num_threads \u003d\u003d 1`, `end \u003e\u003d start + 1`.\n\nCXX threading backend: replaced `ThreadTokenProvider` with another atomic int in `ThreadPoolState`, because we are never reusing tokens, hence no need for maintaining a thread-safe queue\n\nOpenMP backend: replaced scheduling dynamic-\u003eguided; which makes it slightly worse than new CXX backend, but better than old CXX backend.",
      "revId": "b2998c0f95cf86aba89fe5dc31ca1d9366a9655b",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9fb9488e_6bd39863",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-09-15T16:03:23Z",
      "side": 1,
      "message": "Dmitriy,\nThanks for iterating on this, I will take a look shortly. Are the benchmarks still current?\nSameer\n ",
      "revId": "b2998c0f95cf86aba89fe5dc31ca1d9366a9655b",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c2fb83a3_158131d1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-09-15T16:08:04Z",
      "side": 1,
      "message": "one more thought before I review, I think it maybe time to junk the openmp backend.\nand seriously think about not having the nothreads backend either. since we are using c++17, we are guaranteed to have c++ threads (which was not the case when these backends were introduced). and single threaded performance seems to be on par now, so we could simplify our lives considerlay.\n\nMike what do you think? I will also add alex to this discussion to see what he thinks.",
      "revId": "b2998c0f95cf86aba89fe5dc31ca1d9366a9655b",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38cb1859_348ff2bc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-09-15T16:48:35Z",
      "side": 1,
      "message": "From a quick examination, this looks great.  To follow-up on Sameer\u0027s questions re: the no-threads and OpenMP options, I\u0027m in favour of dropping the no-threads backend, as I\u0027m not aware of any use-case where it now adds value.\n\nFor OpenMP, it would be good to have some benchmark results to show that its performance is comparable to the C++ threads option before deleting it, but if that is the case (which is what I expect) then I am happy to remove it, especially as there are now quite a few platforms (including the majority of the ones that we maintainers actually use) that do not support OpenMP.",
      "parentUuid": "c2fb83a3_158131d1",
      "revId": "b2998c0f95cf86aba89fe5dc31ca1d9366a9655b",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d9287c3_98c1bea0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-09-19T12:39:35Z",
      "side": 1,
      "message": "I think we do not need to worry about no-threads and openmp in this CL. lets do that in a follow-up CL.",
      "parentUuid": "38cb1859_348ff2bc",
      "revId": "b2998c0f95cf86aba89fe5dc31ca1d9366a9655b",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d06e3bf0_dfafc693",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-09-19T12:39:35Z",
      "side": 1,
      "message": "I thought I had reviewed this, but apparently all my comments were sitting in the queue. Sorry about that.",
      "revId": "b2998c0f95cf86aba89fe5dc31ca1d9366a9655b",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e98bcd75_b7587a19",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-09-19T16:36:58Z",
      "side": 1,
      "message": "Alex I did some quick benchmarking, and even at HEAD without Dmitriy\u0027s changes CXX_THREADS is faster than OpenMP.\n\n./bin/bundle_adjuster --input ${HOME}/bal_problems/problem-744-543562-pre.txt\n\nOpenMP:\nPreprocessor                        17.609368\n\n  Residual only evaluation           1.727921 (5)\n  Jacobian \u0026 residual evaluation     6.731878 (6)\n  Linear solver                     36.640296 (5)\nMinimizer                           49.505668\n\nPostprocessor                        0.286242\nTotal                               67.401280\n\nCXX:\nPreprocessor                        17.996831\n\n  Residual only evaluation           0.518822 (5)\n  Jacobian \u0026 residual evaluation     7.362002 (6)\n  Linear solver                     34.516102 (5)\nMinimizer                           46.748151\n\nPostprocessor                        0.285872\nTotal                               65.030854\n\n./bin/bundle_adjuster --input ${HOME}/bal_problems/problem-951-708276-pre.txt\nOpenMP\nPreprocessor                        23.855088\n\n  Residual only evaluation           2.528524 (5)\n  Jacobian \u0026 residual evaluation     8.800000 (5)\n  Linear solver                     57.068341 (5)\nMinimizer                           73.529374\n\nPostprocessor                        0.365246\nTotal                               97.749709\n\nCXX:\nPreprocessor                        23.893380\n\n  Residual only evaluation           0.556834 (5)\n  Jacobian \u0026 residual evaluation     6.941720 (5)\n  Linear solver                     54.890267 (5)\nMinimizer                           67.108281\n\nPostprocessor                        0.351945\nTotal                               91.353606",
      "parentUuid": "1d9287c3_98c1bea0",
      "revId": "b2998c0f95cf86aba89fe5dc31ca1d9366a9655b",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98674c73_46c3cfb4",
        "filename": "internal/ceres/parallel_for.h",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-09-19T12:39:35Z",
      "side": 1,
      "message": "this is really nice.",
      "range": {
        "startLine": 48,
        "startChar": 12,
        "endLine": 48,
        "endChar": 15
      },
      "revId": "b2998c0f95cf86aba89fe5dc31ca1d9366a9655b",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bb454e7_0be78ce1",
        "filename": "internal/ceres/parallel_for.h",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-09-19T12:39:35Z",
      "side": 1,
      "message": "I think OptionalInvoke is not a great name for this. since it sounds like the invocation is optional.\n\nEither it should be named to indicate that we may ignore one of the arguments, or it should be named to ignore the thread id in particular or invoke with it.\n\nYou could also just call this InvokeImpl and document that this template metaprogramming is done to include/ignore the thread_id as needed.",
      "range": {
        "startLine": 63,
        "startChar": 7,
        "endLine": 63,
        "endChar": 21
      },
      "revId": "b2998c0f95cf86aba89fe5dc31ca1d9366a9655b",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5235d78_fe419691",
        "filename": "internal/ceres/parallel_for_cxx.h",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-09-19T12:39:35Z",
      "side": 1,
      "message": "at this time you should add your name to this and other files.",
      "range": {
        "startLine": 29,
        "startChar": 24,
        "endLine": 29,
        "endChar": 27
      },
      "revId": "b2998c0f95cf86aba89fe5dc31ca1d9366a9655b",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c68b6598_fc8c3ac2",
        "filename": "internal/ceres/parallel_for_cxx.h",
        "patchSetId": 4
      },
      "lineNbr": 166,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-09-19T12:39:35Z",
      "side": 1,
      "message": "I am confused by this comment. are you saying that this function can exit and this object can be destroyed before all the work is done?\n\nIsn\u0027t the final call to shared_state-\u003eblock_until_finished.Block(); ensure that this object lives as long as needed?",
      "range": {
        "startLine": 166,
        "startChar": 18,
        "endLine": 166,
        "endChar": 33
      },
      "revId": "b2998c0f95cf86aba89fe5dc31ca1d9366a9655b",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe18fe52_6da9c2c2",
        "filename": "internal/ceres/parallel_for_cxx.h",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-09-19T12:39:35Z",
      "side": 1,
      "message": "nit: maybe just call this task ?",
      "range": {
        "startLine": 170,
        "startChar": 7,
        "endLine": 170,
        "endChar": 20
      },
      "revId": "b2998c0f95cf86aba89fe5dc31ca1d9366a9655b",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91c5e597_2c31be04",
        "filename": "internal/ceres/parallel_for_cxx.h",
        "patchSetId": 4
      },
      "lineNbr": 173,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-09-19T12:39:35Z",
      "side": 1,
      "message": "this comment is confusing.",
      "range": {
        "startLine": 173,
        "startChar": 25,
        "endLine": 173,
        "endChar": 27
      },
      "revId": "b2998c0f95cf86aba89fe5dc31ca1d9366a9655b",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4200edc4_d249e3e2",
        "filename": "internal/ceres/parallel_for_cxx.h",
        "patchSetId": 4
      },
      "lineNbr": 226,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-09-19T12:39:35Z",
      "side": 1,
      "message": "I think this comment belongs at the top where the task_function is defined. so the reader reads the definition more carefully and sees it being passed by value.",
      "range": {
        "startLine": 226,
        "startChar": 30,
        "endLine": 226,
        "endChar": 43
      },
      "revId": "b2998c0f95cf86aba89fe5dc31ca1d9366a9655b",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d984e015_effd52b3",
        "filename": "internal/ceres/parallel_for_cxx.h",
        "patchSetId": 4
      },
      "lineNbr": 239,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-09-19T12:39:35Z",
      "side": 1,
      "message": "won\u0027t this ensure that all threads are done before we exit this function?",
      "range": {
        "startLine": 239,
        "startChar": 16,
        "endLine": 239,
        "endChar": 36
      },
      "revId": "b2998c0f95cf86aba89fe5dc31ca1d9366a9655b",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd3303dd_700543e7",
        "filename": "internal/ceres/parallel_for_nothreads.cc",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-09-19T12:39:35Z",
      "side": 1,
      "message": "since you have the implementation of parallelfor in the header you could also have this in the header too no?",
      "range": {
        "startLine": 42,
        "startChar": 4,
        "endLine": 42,
        "endChar": 26
      },
      "revId": "b2998c0f95cf86aba89fe5dc31ca1d9366a9655b",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6667828_f46228e3",
        "filename": "internal/ceres/parallel_for_nothreads.cc",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-09-19T12:41:04Z",
      "side": 1,
      "message": "don\u0027t worry about this, we will just come back and remove this in a follow up.",
      "parentUuid": "dd3303dd_700543e7",
      "range": {
        "startLine": 42,
        "startChar": 4,
        "endLine": 42,
        "endChar": 26
      },
      "revId": "b2998c0f95cf86aba89fe5dc31ca1d9366a9655b",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}