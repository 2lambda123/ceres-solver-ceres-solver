{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bc2b834a_3ff84be4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-13T23:26:24Z",
      "side": 1,
      "message": "here is another thought for the public api. I am curious what you folks think.\n\ninstead of inserting the non-expansion macro, would it be better to define \n\nCERES_MIN and CERES_MAX macros or functions which would make this less intrusive but still better behaved?",
      "revId": "6549f8cebe6253055ccbd44fd98f89126317d26d",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac3e92e4_211983b3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-13T23:40:19Z",
      "side": 1,
      "message": "IMHO, never use macros for function calls. This can have nasty side effects.",
      "parentUuid": "bc2b834a_3ff84be4",
      "revId": "6549f8cebe6253055ccbd44fd98f89126317d26d",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4f468aa_b0b31447",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-13T23:55:30Z",
      "side": 1,
      "message": "In cases where `std::min` and `std::max` are fully qualified (no ADL), parens instead of a macro can be used.",
      "parentUuid": "ac3e92e4_211983b3",
      "revId": "6549f8cebe6253055ccbd44fd98f89126317d26d",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0706d199_e4db79f6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-14T13:26:58Z",
      "side": 1,
      "message": "I just went through the CL again, and I think that using parens will resolve the rest of the cases no?",
      "parentUuid": "a4f468aa_b0b31447",
      "revId": "6549f8cebe6253055ccbd44fd98f89126317d26d",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e98376a_f384c4f9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-14T13:28:44Z",
      "side": 1,
      "message": "No, not all. Method definitions (in `jet.h`) cannot be solved using parens, AFAIK.",
      "parentUuid": "0706d199_e4db79f6",
      "revId": "6549f8cebe6253055ccbd44fd98f89126317d26d",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a4a942b_49cad4c4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-14T13:34:47Z",
      "side": 1,
      "message": "my bad, I misread the two critical methods in jet.h",
      "parentUuid": "3e98376a_f384c4f9",
      "revId": "6549f8cebe6253055ccbd44fd98f89126317d26d",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab78c0e7_9d1749a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-15T09:25:19Z",
      "side": 1,
      "message": "No problem.",
      "parentUuid": "2a4a942b_49cad4c4",
      "revId": "6549f8cebe6253055ccbd44fd98f89126317d26d",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfce687b_8e15bc42",
        "filename": "CMakeLists.txt",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-13T23:26:24Z",
      "side": 1,
      "message": "what is a reasonable version of cmake to target at this point?",
      "range": {
        "startLine": 32,
        "startChar": 23,
        "endLine": 32,
        "endChar": 30
      },
      "revId": "6549f8cebe6253055ccbd44fd98f89126317d26d",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b31c4a2_26114b39",
        "filename": "CMakeLists.txt",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-13T23:40:19Z",
      "side": 1,
      "message": "I\u0027d rather update CMake as necessary and neglect version availability in a specific distribution (such as Ubuntu). CMake is readily available for all major operating systems and can be used without installation. CMake 3.16 in Ubuntu 20.04, for instance, is already over 2 years old but nevertheless could help avoid some workarounds in Ceres.",
      "parentUuid": "cfce687b_8e15bc42",
      "range": {
        "startLine": 32,
        "startChar": 23,
        "endLine": 32,
        "endChar": 30
      },
      "revId": "6549f8cebe6253055ccbd44fd98f89126317d26d",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}