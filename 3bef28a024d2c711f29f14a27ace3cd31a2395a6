{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a0133d05_12098229",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2021-11-22T14:21:26Z",
      "side": 1,
      "message": "Keir it would be worth it for you to take a look at this too.",
      "revId": "3bef28a024d2c711f29f14a27ace3cd31a2395a6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1bf1543_af8730bd",
        "filename": "include/ceres/jet.h",
        "patchSetId": 12
      },
      "lineNbr": 178,
      "author": {
        "id": 5002
      },
      "writtenOn": "2021-11-22T14:21:26Z",
      "side": 1,
      "message": "This is a very interesting way of implementing comparisons.\n\nOne question I have is, we already have some stuff being defined in the std namespace below for numeric limits, can we consolidate all the std namespace below?\n\nThe binary operation functions don\u0027t need to be in the ceres namespace no? so they could be moved out and put at the bottom of the file? \n\nI think that will make this chunk more readable and collocated where it is used.",
      "range": {
        "startLine": 178,
        "startChar": 2,
        "endLine": 178,
        "endChar": 3
      },
      "revId": "3bef28a024d2c711f29f14a27ace3cd31a2395a6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "273bcdbb_71eb7d4a",
        "filename": "include/ceres/jet.h",
        "patchSetId": 12
      },
      "lineNbr": 178,
      "author": {
        "id": 6612
      },
      "writtenOn": "2021-11-22T14:26:36Z",
      "side": 1,
      "message": "Hi Sameer,\n\nDefining functions/classes in std namespace is generally not allowed with few exceptions (std::common_type being one of them).\n\nApart from that, proving operators in a namespace different from the one that originally defined the type will break ADL.",
      "parentUuid": "c1bf1543_af8730bd",
      "range": {
        "startLine": 178,
        "startChar": 2,
        "endLine": 178,
        "endChar": 3
      },
      "revId": "3bef28a024d2c711f29f14a27ace3cd31a2395a6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "763819b6_b0d9019f",
        "filename": "include/ceres/jet.h",
        "patchSetId": 12
      },
      "lineNbr": 178,
      "author": {
        "id": 5002
      },
      "writtenOn": "2021-11-22T14:29:07Z",
      "side": 1,
      "message": "I did not mean that we should define anything more than what you already have in the std namespace. The only other thing we have is the definition of numeric limits for jets to allow eigen to use them.\n\nI did not know the rules for ADL, thanks for clarifying them. I\u0027d like Keir to take a look at this one too before submitting. I will have him take a look later in the day.",
      "parentUuid": "273bcdbb_71eb7d4a",
      "range": {
        "startLine": 178,
        "startChar": 2,
        "endLine": 178,
        "endChar": 3
      },
      "revId": "3bef28a024d2c711f29f14a27ace3cd31a2395a6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5086cf7e_a2d5e57d",
        "filename": "include/ceres/jet.h",
        "patchSetId": 12
      },
      "lineNbr": 178,
      "author": {
        "id": 6612
      },
      "writtenOn": "2021-11-22T15:13:16Z",
      "side": 1,
      "message": "Oh, sorry. I misread your question.\n\nThe specializations in the std namespace are independent from each other. For better code readability, the std::common_type partial specializations would ideally appear before they used. Therefore, I don\u0027t see a good reason for moving the code.",
      "parentUuid": "763819b6_b0d9019f",
      "range": {
        "startLine": 178,
        "startChar": 2,
        "endLine": 178,
        "endChar": 3
      },
      "revId": "3bef28a024d2c711f29f14a27ace3cd31a2395a6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76b2688c_f93c7c65",
        "filename": "include/ceres/jet.h",
        "patchSetId": 12
      },
      "lineNbr": 178,
      "author": {
        "id": 6612
      },
      "writtenOn": "2021-11-22T15:23:08Z",
      "side": 1,
      "message": "This of course does not mean consolidating the std definitions will not work. However, I believe it is logically clearer to define the partial specializations prior to their use.",
      "parentUuid": "5086cf7e_a2d5e57d",
      "range": {
        "startLine": 178,
        "startChar": 2,
        "endLine": 178,
        "endChar": 3
      },
      "revId": "3bef28a024d2c711f29f14a27ace3cd31a2395a6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a824e4c8_69942170",
        "filename": "include/ceres/jet.h",
        "patchSetId": 12
      },
      "lineNbr": 178,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-22T18:17:39Z",
      "side": 1,
      "message": "This is a great enhancement to jets that fixes the long-standing reason we didn\u0027t have implicit conversions.\n\nThe ordering of declarations makes sense to me as-is; Sameer, feel free to re-open if you want.",
      "parentUuid": "76b2688c_f93c7c65",
      "range": {
        "startLine": 178,
        "startChar": 2,
        "endLine": 178,
        "endChar": 3
      },
      "revId": "3bef28a024d2c711f29f14a27ace3cd31a2395a6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4daf0714_93eda6cc",
        "filename": "internal/ceres/jet_test.cc",
        "patchSetId": 12
      },
      "lineNbr": 1310,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-22T18:17:39Z",
      "side": 1,
      "message": "Please add some no-compile tests that demonstrate that naive mixing of int literals and jets doesn\u0027t compile. Historically, that was the reason we didn\u0027t permit implicit conversions; since it led to costly bugs that are hard to track down.",
      "revId": "3bef28a024d2c711f29f14a27ace3cd31a2395a6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a604593_9cd58ff5",
        "filename": "internal/ceres/jet_test.cc",
        "patchSetId": 12
      },
      "lineNbr": 1310,
      "author": {
        "id": 6612
      },
      "writtenOn": "2021-11-22T18:32:43Z",
      "side": 1,
      "message": "Hi Keir,\n\nThanks for the comments. However, I do not understand what do you mean by no-compile tests. Restrictions disallowing the mixture of Jets with literals (i.e., explicit constructors) are still in place and were not changed. The changes here affect solely the comparison operators.\n\nAlso note that no implicit conversion is performed (as mentioned in the source comments). Rather, the constraints for supported types allowed to be passed to logical comparison operators are slightly relaxed.",
      "parentUuid": "4daf0714_93eda6cc",
      "revId": "3bef28a024d2c711f29f14a27ace3cd31a2395a6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb6ca5fb_c8998bc9",
        "filename": "internal/ceres/jet_test.cc",
        "patchSetId": 12
      },
      "lineNbr": 1310,
      "author": {
        "id": 6612
      },
      "writtenOn": "2021-11-23T10:08:46Z",
      "side": 1,
      "message": "Keir, is it possible that we understand different things under \"implicit conversions\"?\n\nAccording to my understanding, an implicit conversion is provided either by a converting constructor (without an explicit modifier, e.g., to construct a Jet from an int) or a user-defined conversion function (e.g., operator double() that converts a Jet to a scalar by extracting the real part of the dual and thus discarding the derivative).\n\nEither way, I would be interested to learn more about the problems you encountered in the past and the specifics of previously employed implicit conversion that caused those problems. At least, converting constructors should be generally safe since the derivative of constants can be generally assumed to be 0. However, a used-defined conversion function that extracts the real part of a Jet is clearly problematic.",
      "parentUuid": "2a604593_9cd58ff5",
      "revId": "3bef28a024d2c711f29f14a27ace3cd31a2395a6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}