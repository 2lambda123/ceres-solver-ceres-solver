{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cf2ba11f_4158a7a8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-08-16T14:56:08Z",
      "side": 1,
      "message": "Sergiu WDYT? this is also one of the patches that Dmitriy\u0027s CLs refer to.",
      "revId": "cae5fcc2649ea7ca8e66048c6c31b9462cc2f554",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3758f06a_fb71dda9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2023-08-16T16:38:31Z",
      "side": 1,
      "message": "LGTM",
      "revId": "cae5fcc2649ea7ca8e66048c6c31b9462cc2f554",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18a4fa75_e6c86901",
        "filename": "CMakeLists.txt",
        "patchSetId": 5
      },
      "lineNbr": 271,
      "author": {
        "id": 5155
      },
      "writtenOn": "2023-08-03T21:01:50Z",
      "side": 1,
      "message": "This looks suspicious, as we are using cudaMalloc() and cudaFree() which are part of the CUDA Runtime API.  This option is only intended (AFAIK) for the case when you were using the low-level driver APIs exclusively which is (particularly now) very rare.\n\nThis is also however misleading, in that we\u0027re explicitly specifying CUDA::cudart above, which is why this continued to compile given our function usage so explicitly declaring here that it should be None (not empty, but specifically none) means that the resulting generated compile command is going to look something like -cudart\u003dNone ... -cudart\u003d\u003cShared/Static\u003e derived from FindCUDAToolkit and/or Ceres\u0027 target build type.\n\nI can\u0027t find much evidence of this being used to cover this issue, which still makes me suspicious that this is not a general issue but a configuration specific one.  It might work, and you could fix it for your configuration by passing -DCMAKE_CUDA_RUNTIME_LIBRARY\u003dNone when you configure Ceres, I\u0027m not sure given the obvious contradiction in what this specifies vs what we\u0027re doing in the line above that this is a good idea in general.",
      "revId": "cae5fcc2649ea7ca8e66048c6c31b9462cc2f554",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8baae3d_c98b5fb5",
        "filename": "CMakeLists.txt",
        "patchSetId": 5
      },
      "lineNbr": 271,
      "author": {
        "id": 6762
      },
      "writtenOn": "2023-08-07T04:40:56Z",
      "side": 1,
      "message": "I modified CERES_CUDA_LIBRARIES by changing CUDA::cudart to CUDA::cudart_static. I did this in both CMakeLists.txt and internal/ceres/CMakeLists.txt. As I suspected, the linker command in VS no longer tries to link cudart.lib and only links cudart_static.lib (where it used to link cudart.lib, it replaces it with cudart_static.lib). There are no longer any conflicts. So by using CUDA::cudart, we are forcing the CUDA runtime library to be shared. Instead of setting CMAKE_CUDA_RUNTIME_LIBRARY\u003dNone, we can set CMAKE_CUDA_RUNTIME_LIBRARY\u003dShared. I tried this and there are no conflicts during linking. Would this be an appropriate fix that\u0027s not misleading?",
      "parentUuid": "18a4fa75_e6c86901",
      "revId": "cae5fcc2649ea7ca8e66048c6c31b9462cc2f554",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}