{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f2fa291b_08d0b772",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-18T13:42:48Z",
      "side": 1,
      "message": "This is a great idea. However, I\u0027m wondering why annotate internal classes only? IMHO, all classes that are not intended to be inherited from should be also marked as `final`.\n\nThis leaves classes that are special instances of an interface, such as `ProductManifold`. While debatable, I think these should also be marked as `final` because it is possible to resort to delegation which should be preferred anyway. Specifically, if one wishes to define a manifold based on `ProductManifold`, it it possible to derive from `Manifold` directly and use a `ProductManifold` member in the implementation.\n\nThe sealing of classes in the public interface would prevent misuse.",
      "revId": "bb7c644f11073d13c75c5cc21f507d253d777c8d",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25497c44_fa41c6b2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-18T14:55:23Z",
      "side": 1,
      "message": "yes I was going to take a pass at the public API also. There things are a bit more complicated. Its possible we will break existing code.",
      "parentUuid": "f2fa291b_08d0b772",
      "revId": "bb7c644f11073d13c75c5cc21f507d253d777c8d",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d76d15c8_a923f601",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-18T14:55:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "25497c44_fa41c6b2",
      "revId": "bb7c644f11073d13c75c5cc21f507d253d777c8d",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc36e98f_0e0713ba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-18T15:00:00Z",
      "side": 1,
      "message": "This can be seen as a chance to point out incorrect use.",
      "parentUuid": "d76d15c8_a923f601",
      "revId": "bb7c644f11073d13c75c5cc21f507d253d777c8d",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "027cf2a2_74b98dad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-18T16:00:52Z",
      "side": 1,
      "message": "I was curious what else could be sealed and grepped through public includes and saw that `Context` is in the public namespace although it is not exported. `context.h` could therefore be moved into `internal` directory leaving only a forward declaration, no?",
      "revId": "bb7c644f11073d13c75c5cc21f507d253d777c8d",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}