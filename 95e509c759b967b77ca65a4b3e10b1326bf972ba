{
  "comments": [
    {
      "key": {
        "uuid": "3e3be95b_8f43814d",
        "filename": "docs/source/nnls_tutorial.rst",
        "patchSetId": 3
      },
      "lineNbr": 957,
      "author": {
        "id": 5002
      },
      "writtenOn": "2016-08-14T06:23:30Z",
      "side": 1,
      "message": "same comment as the header file.",
      "range": {
        "startLine": 957,
        "startChar": 23,
        "endLine": 957,
        "endChar": 24
      },
      "revId": "95e509c759b967b77ca65a4b3e10b1326bf972ba",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "def1ed14_3d752fd8",
        "filename": "examples/slam/pose_graph_3d/CMakeLists.txt",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 5155
      },
      "writtenOn": "2016-08-14T15:22:03Z",
      "side": 1,
      "message": "I would move this closing paren to the end of the previous line.",
      "revId": "95e509c759b967b77ca65a4b3e10b1326bf972ba",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1eec653b_ff28dfea",
        "filename": "examples/slam/pose_graph_3d/README.md",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 5155
      },
      "writtenOn": "2016-08-14T15:22:03Z",
      "side": 1,
      "message": "Include a link?",
      "range": {
        "startLine": 29,
        "startChar": 9,
        "endLine": 29,
        "endChar": 19
      },
      "revId": "95e509c759b967b77ca65a4b3e10b1326bf972ba",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1eec653b_df2d1bf9",
        "filename": "examples/slam/pose_graph_3d/pose_graph_3d.cc",
        "patchSetId": 3
      },
      "lineNbr": 142,
      "author": {
        "id": 5155
      },
      "writtenOn": "2016-08-14T15:22:03Z",
      "side": 1,
      "message": "I would use glog \u0026 gflags here (with the necessary initialisation calls) as gflags is already a dependency for the examples, and it means the glog output from Ceres will be nicely formatted and controllable via the flags as well as making the flag parsing clearer \u0026 more extensible.",
      "revId": "95e509c759b967b77ca65a4b3e10b1326bf972ba",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "def1ed14_1d72f3ef",
        "filename": "examples/slam/pose_graph_3d/pose_graph_3d.cc",
        "patchSetId": 3
      },
      "lineNbr": 152,
      "author": {
        "id": 5155
      },
      "writtenOn": "2016-08-14T15:22:03Z",
      "side": 1,
      "message": "If using glog, then things like this could be CHECK()\u0027s or LOG_IF(FATAL), which IMO is more compact / cleaner (also colours nicely when run with -colorlogtostderr).",
      "revId": "95e509c759b967b77ca65a4b3e10b1326bf972ba",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e3be95b_2f40353f",
        "filename": "examples/slam/pose_graph_3d/pose_graph_3d_error_term.h",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 5002
      },
      "writtenOn": "2016-08-14T06:23:30Z",
      "side": 1,
      "message": "you maybe better off naming the input variables as p_a_ptr and so on and having the maps be just p_a, that way the actual expressions are much smaller and easier to read.",
      "range": {
        "startLine": 79,
        "startChar": 38,
        "endLine": 79,
        "endChar": 43
      },
      "revId": "95e509c759b967b77ca65a4b3e10b1326bf972ba",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e3be95b_4f3d79bc",
        "filename": "examples/slam/pose_graph_3d/pose_graph_3d_error_term.h",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 5002
      },
      "writtenOn": "2016-08-14T06:23:30Z",
      "side": 1,
      "message": "what does the suffix _est mean? estimated?\nI\u0027d go ahead and call it that.",
      "range": {
        "startLine": 89,
        "startChar": 25,
        "endLine": 89,
        "endChar": 33
      },
      "revId": "95e509c759b967b77ca65a4b3e10b1326bf972ba",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e3be95b_ef580d3b",
        "filename": "examples/slam/pose_graph_3d/pose_graph_3d_error_term.h",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 5002
      },
      "writtenOn": "2016-08-14T06:23:30Z",
      "side": 1,
      "message": "meas is not a great abbreviation, t_ab_measured_ is better.",
      "range": {
        "startLine": 123,
        "startChar": 15,
        "endLine": 123,
        "endChar": 25
      },
      "revId": "95e509c759b967b77ca65a4b3e10b1326bf972ba",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe1dd11b_3633985e",
        "filename": "examples/slam/pose_graph_3d/read_g2o.cc",
        "patchSetId": 3
      },
      "lineNbr": 114,
      "author": {
        "id": 5155
      },
      "writtenOn": "2016-08-14T15:22:03Z",
      "side": 1,
      "message": "IMO this would be better via glog.",
      "revId": "95e509c759b967b77ca65a4b3e10b1326bf972ba",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e3be95b_cf198983",
        "filename": "include/ceres/local_parameterization.h",
        "patchSetId": 3
      },
      "lineNbr": 216,
      "author": {
        "id": 5002
      },
      "writtenOn": "2016-08-14T06:23:30Z",
      "side": 1,
      "message": "\"Ceres\u0027 rotation representation\" maybe a bad phrase. Its more that eigen\u0027s internal ordering is just a different one from the one which is \"usually\" used by some definition of usually.  Giving ceres credit for this decision makes the quaternions we are using sound weird.",
      "range": {
        "startLine": 216,
        "startChar": 29,
        "endLine": 216,
        "endChar": 34
      },
      "revId": "95e509c759b967b77ca65a4b3e10b1326bf972ba",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e3be95b_6f1f1d66",
        "filename": "include/ceres/local_parameterization.h",
        "patchSetId": 3
      },
      "lineNbr": 224,
      "author": {
        "id": 5002
      },
      "writtenOn": "2016-08-14T06:23:30Z",
      "side": 1,
      "message": "stack instead of pack.",
      "range": {
        "startLine": 224,
        "startChar": 26,
        "endLine": 224,
        "endChar": 32
      },
      "revId": "95e509c759b967b77ca65a4b3e10b1326bf972ba",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe1dd11b_d62d04f9",
        "filename": "internal/ceres/local_parameterization.cc",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 5155
      },
      "writtenOn": "2016-08-14T15:22:03Z",
      "side": 1,
      "message": "I think it makes sense to keep this #include here, as if user code is using EIgen::Quaternions, they should explicitly #include it themselves, and as they don\u0027t appear in our public API, I don\u0027t think their header should either.  \n\nI also think it\u0027s potentially more confusing to have an Eigen::Quaterniond typedef in the public Ceres Eigen header (ala Matrix \u0026 Vector), as then that really muddies the water as to the difference between an Eigen Quaternion vs a Ceres Quaternion (in terms of the ordering).",
      "revId": "95e509c759b967b77ca65a4b3e10b1326bf972ba",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e3be95b_2f291589",
        "filename": "internal/ceres/local_parameterization.cc",
        "patchSetId": 3
      },
      "lineNbr": 198,
      "author": {
        "id": 5002
      },
      "writtenOn": "2016-08-14T06:23:30Z",
      "side": 1,
      "message": "sin_delta_by_delta like the other implementation.",
      "range": {
        "startLine": 198,
        "startChar": 17,
        "endLine": 198,
        "endChar": 25
      },
      "revId": "95e509c759b967b77ca65a4b3e10b1326bf972ba",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e3be95b_ef31edf0",
        "filename": "internal/ceres/local_parameterization.cc",
        "patchSetId": 3
      },
      "lineNbr": 200,
      "author": {
        "id": 5002
      },
      "writtenOn": "2016-08-14T06:23:30Z",
      "side": 1,
      "message": "this -\u003e the",
      "range": {
        "startLine": 200,
        "startChar": 16,
        "endLine": 200,
        "endChar": 20
      },
      "revId": "95e509c759b967b77ca65a4b3e10b1326bf972ba",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e0049b2_78e86175",
        "filename": "internal/ceres/local_parameterization.cc",
        "patchSetId": 3
      },
      "lineNbr": 203,
      "author": {
        "id": 5155
      },
      "writtenOn": "2016-08-14T15:22:03Z",
      "side": 1,
      "message": "What about maintaining the normalisation of the quaternion?  Eigen will I think allow you to construct an un-normalised quaternion, and it does not normalise the result of operator*().  So I would see two potential failure modes: 1) The user doesn\u0027t supply a normalised quaternion to begin with, and 2) After repeated updates the resulting quaternion is not normalised.\n\nIt\u0027s interesting to note that Sophus has a lot of calls to normalize() (including in operator*\u003d()) to try to keep everything normalised throughout.",
      "revId": "95e509c759b967b77ca65a4b3e10b1326bf972ba",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7bbc9397_1ea3bd46",
        "filename": "internal/ceres/local_parameterization.cc",
        "patchSetId": 3
      },
      "lineNbr": 203,
      "author": {
        "id": 5435
      },
      "writtenOn": "2016-08-16T16:43:20Z",
      "side": 1,
      "message": "I have always wanted to have this discussion about how, where and when to account for numerical error so I am happy this came up. \n\nWith regard to #2 and maintaining unit norm. I ran a simulation where I generated 10 million unit quaternions and multiplied them in sequence. At the end 1 - ||q|| \u003d 1e-13 which is about machine epsilon. \n\nI ran the same simulation where the quaternions were normalized to 1 - delta and at the end \n\ndelta,           1 - ||q||\n\n1e-15,          1e-8\n\n1e-14,          1e-7\n\n1e-13,          1e-6\n\n1e-12,          1e-5\n\nSo if the quaternions are normalized on input, it doesn\u0027t seem like you need to worry about the product every time. When the quaternions are near unit norm it seems like it could lead to trouble after a while. \n\nIn the cost function, if you apply normalization after every product then when you use AD you will end up differentiating the normalization which is there only to account for numerical errors. So this will end up disagreeing with analytical derivatives which assumes perfect operations. For me, it isn\u0027t clear who is \"correct\" in this scenario. \n\nSo we can either normalize after every product, or only in the quaternion local parameterization update function to try to eliminate the potential for it drifting over many multiplications. This may be overthinking it as well because most optimizations probably terminate \u003c1000 iterations.\n\nWhatever we decide here, we should also update the ceres::QuaternionLocalParameterization because it doesn\u0027t normalize the quaternion after the product either.\n\nWith regard to #1, it is always tricky with how much to guard against user error. We can always normalize the quaternions on input (same question about AD), return false if the input is not normalized, or assume it is valid. The last is probably the worst.\n\nLet me know what you think.",
      "parentUuid": "3e0049b2_78e86175",
      "revId": "95e509c759b967b77ca65a4b3e10b1326bf972ba",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b2813c6_8aa74bfe",
        "filename": "internal/ceres/local_parameterization.cc",
        "patchSetId": 3
      },
      "lineNbr": 203,
      "author": {
        "id": 5002
      },
      "writtenOn": "2016-08-16T18:37:54Z",
      "side": 1,
      "message": "two things here IMO.\n\n1. The local parameterization should preserve the norm of the quaternion to whatever it is. so the current implementation is fine by me, it is the same in the other \"normal\" quaternion implementation.\n\n2. The bigger issue is that people will start the optimization with quaternions which are not normalized, or do not associated a parameterization with one and then forget to normalize.\n\nand there is some interaction between the second issue and the first one. \n\n(2) requires a broader discussion (and is an important issue) and should not hold up this CL IMO.",
      "parentUuid": "7bbc9397_1ea3bd46",
      "revId": "95e509c759b967b77ca65a4b3e10b1326bf972ba",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e3be95b_6f463d60",
        "filename": "internal/ceres/local_parameterization_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 190,
      "author": {
        "id": 5002
      },
      "writtenOn": "2016-08-14T06:23:30Z",
      "side": 1,
      "message": "it would be nice if this and the code below could be refactored to share code.",
      "range": {
        "startLine": 190,
        "startChar": 0,
        "endLine": 190,
        "endChar": 42
      },
      "revId": "95e509c759b967b77ca65a4b3e10b1326bf972ba",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    }
  ]
}