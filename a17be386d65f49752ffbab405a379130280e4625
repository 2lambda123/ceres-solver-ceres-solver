{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4f53d994_16ec9557",
        "filename": "CMakeLists.txt",
        "patchSetId": 7
      },
      "lineNbr": 68,
      "author": {
        "id": 6612
      },
      "writtenOn": "2024-05-30T20:22:41Z",
      "side": 1,
      "message": "I generally advise against the unconditional use of `FetchContent`. There are two main reasons for this:\n1. `FetchContent` requires internet connection at CMake configuration time (not during repository checkout). In case Github is offline or internet access is limited due to certain network security policies (e.g., in a Docker container, firewall restrictions in an enterprise network), building tests or any other components for that matter will fail.\n2. Many systems (e.g., various Linux distributions such as Arch Linux, Alpine Linux) and package managers (Homebrew, msys2, vcpkg to name a few) already provide a (precompiled) version of gtest whose use should be prioritized over the bundled one (included via `FetchContent`).\n\nFor these reasons, I suggest adding either an opt-out option for using system packages and/or prioritizing the system package and falling back to `FetchContent` if the corresponding package is not available.\n\nIn general, `FetchContent` should only be used as an additional layer for injecting dependencies into the project but not as the main one, which should be left to the basic `find_package` integration mechanism.",
      "revId": "a17be386d65f49752ffbab405a379130280e4625",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "707580c0_e7e2705c",
        "filename": "CMakeLists.txt",
        "patchSetId": 7
      },
      "lineNbr": 68,
      "author": {
        "id": 5002
      },
      "writtenOn": "2024-05-30T22:29:44Z",
      "side": 1,
      "message": "I had basically the same concern as I was adding this. If I understand your suggestion correctly, you are suggesting changing the unconditional FetchContent(...) to something like this:\n\nif (FLAG) {\n  find_package()\n} else {\n  FetchContent()\n}\n\nthoughts on a good flag name here?",
      "parentUuid": "4f53d994_16ec9557",
      "revId": "a17be386d65f49752ffbab405a379130280e4625",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ee11d2c_a4ff0166",
        "filename": "CMakeLists.txt",
        "patchSetId": 7
      },
      "lineNbr": 68,
      "author": {
        "id": 6612
      },
      "writtenOn": "2024-05-30T23:16:25Z",
      "side": 1,
      "message": "This is exactly what I had in mind. `BUILD_GTEST` as a flag name should do the job here.\n\nWe could cascade the checks to allow for a fallback in case `BUILD_GTEST` has not been initialized yet and `find_package` fails:\n\n```cmake\n# Undefined or OFF\nif (NOT BUILD_GTEST)\n  find_package (GTest)\nendif (NOT BUILD_GTEST)\n\nif (NOT DEFINED BUILD_GTEST)\n  if (GTest_FOUND)\n    option (BUILD_GTEST \"...\" OFF)\n  else (GTest_FOUND)\n    option (BUILD_GTEST \"...\" ON)\n  endif (GTest_FOUND)\nendif (NOT DEFINED BUILD_GTEST)\n\nif (BUILD_GTEST)\n  FetchContent (...)\nendif (BUILD_GTEST)\n```",
      "parentUuid": "707580c0_e7e2705c",
      "revId": "a17be386d65f49752ffbab405a379130280e4625",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3aee627_715ad5ff",
        "filename": "internal/ceres/CMakeLists.txt",
        "patchSetId": 7
      },
      "lineNbr": 402,
      "author": {
        "id": 5002
      },
      "writtenOn": "2024-05-30T19:52:40Z",
      "side": 1,
      "message": "there should be a better way to do this, since we are hard coding the path separator here, which may or may not work on windows.",
      "range": {
        "startLine": 402,
        "startChar": 73,
        "endLine": 402,
        "endChar": 74
      },
      "revId": "a17be386d65f49752ffbab405a379130280e4625",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0240e243_4a75f385",
        "filename": "internal/ceres/CMakeLists.txt",
        "patchSetId": 7
      },
      "lineNbr": 402,
      "author": {
        "id": 6612
      },
      "writtenOn": "2024-05-30T20:22:41Z",
      "side": 1,
      "message": "I\u0027d set the path to `${Ceres_SOURCE_DIR}/data` as used before.",
      "parentUuid": "f3aee627_715ad5ff",
      "range": {
        "startLine": 402,
        "startChar": 73,
        "endLine": 402,
        "endChar": 74
      },
      "revId": "a17be386d65f49752ffbab405a379130280e4625",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df2de8f6_a05592c5",
        "filename": "internal/ceres/CMakeLists.txt",
        "patchSetId": 7
      },
      "lineNbr": 402,
      "author": {
        "id": 5002
      },
      "writtenOn": "2024-05-30T22:29:44Z",
      "side": 1,
      "message": "it has to be a relative path, because SrcDir returns \"./bin\" so adding an absolute path here won\u0027t quite work.",
      "parentUuid": "0240e243_4a75f385",
      "range": {
        "startLine": 402,
        "startChar": 73,
        "endLine": 402,
        "endChar": 74
      },
      "revId": "a17be386d65f49752ffbab405a379130280e4625",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db3ee03b_c30e9399",
        "filename": "internal/ceres/CMakeLists.txt",
        "patchSetId": 7
      },
      "lineNbr": 402,
      "author": {
        "id": 6612
      },
      "writtenOn": "2024-05-30T23:16:25Z",
      "side": 1,
      "message": "Does this imply that running test executables manually from a directory other than the build directory does not work?",
      "parentUuid": "df2de8f6_a05592c5",
      "range": {
        "startLine": 402,
        "startChar": 73,
        "endLine": 402,
        "endChar": 74
      },
      "revId": "a17be386d65f49752ffbab405a379130280e4625",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}