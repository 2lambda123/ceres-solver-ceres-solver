{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8c81596a_daed4f3b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2024-05-31T00:15:42Z",
      "side": 1,
      "message": "Yes it\u0027s possible that the brew installed version is bringing in headers that do not match the version of the core that we are building from GitHub.\n\nSo this is going to be a problem quite generally. Should we just not use the fetched version and stick to using the version which is already installed with a minimum version requirement?\n\nThat seems simpler than trying to navigate both of these worlds imo.",
      "tag": "mailMessageId\u003d\u003cCABqdRUCeKUKeG8MoZ6g-\u003dJk2i9RhJ1Cvn1PvEyC_HW0K3otB9A@mail.gmail.com\u003e",
      "revId": "a17be386d65f49752ffbab405a379130280e4625",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95ead7d2_8591a8d1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2024-05-31T00:30:09Z",
      "side": 1,
      "message": "Definitely. Mixing prefixes with overlapping library installations is a recipe for disaster.",
      "parentUuid": "8c81596a_daed4f3b",
      "revId": "a17be386d65f49752ffbab405a379130280e4625",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a995b93_9bce9ede",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2024-05-31T00:33:19Z",
      "side": 1,
      "message": "Okay then I am going to just change things to a find_package based solution and link to the system installed googletest and make sure we are at a minimum version.",
      "tag": "mailMessageId\u003d\u003cCABqdRUAF9hTFuXfxJjVOS0Mnpei0c5xPBhadpwAFg55rSK05uQ@mail.gmail.com\u003e",
      "revId": "a17be386d65f49752ffbab405a379130280e4625",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f53d994_16ec9557",
        "filename": "CMakeLists.txt",
        "patchSetId": 7
      },
      "lineNbr": 68,
      "author": {
        "id": 6612
      },
      "writtenOn": "2024-05-30T20:22:41Z",
      "side": 1,
      "message": "I generally advise against the unconditional use of `FetchContent`. There are two main reasons for this:\n1. `FetchContent` requires internet connection at CMake configuration time (not during repository checkout). In case Github is offline or internet access is limited due to certain network security policies (e.g., in a Docker container, firewall restrictions in an enterprise network), building tests or any other components for that matter will fail.\n2. Many systems (e.g., various Linux distributions such as Arch Linux, Alpine Linux) and package managers (Homebrew, msys2, vcpkg to name a few) already provide a (precompiled) version of gtest whose use should be prioritized over the bundled one (included via `FetchContent`).\n\nFor these reasons, I suggest adding either an opt-out option for using system packages and/or prioritizing the system package and falling back to `FetchContent` if the corresponding package is not available.\n\nIn general, `FetchContent` should only be used as an additional layer for injecting dependencies into the project but not as the main one, which should be left to the basic `find_package` integration mechanism.",
      "revId": "a17be386d65f49752ffbab405a379130280e4625",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "707580c0_e7e2705c",
        "filename": "CMakeLists.txt",
        "patchSetId": 7
      },
      "lineNbr": 68,
      "author": {
        "id": 5002
      },
      "writtenOn": "2024-05-30T22:29:44Z",
      "side": 1,
      "message": "I had basically the same concern as I was adding this. If I understand your suggestion correctly, you are suggesting changing the unconditional FetchContent(...) to something like this:\n\nif (FLAG) {\n  find_package()\n} else {\n  FetchContent()\n}\n\nthoughts on a good flag name here?",
      "parentUuid": "4f53d994_16ec9557",
      "revId": "a17be386d65f49752ffbab405a379130280e4625",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ee11d2c_a4ff0166",
        "filename": "CMakeLists.txt",
        "patchSetId": 7
      },
      "lineNbr": 68,
      "author": {
        "id": 6612
      },
      "writtenOn": "2024-05-30T23:16:25Z",
      "side": 1,
      "message": "This is exactly what I had in mind. `BUILD_GTEST` as a flag name should do the job here.\n\nWe could cascade the checks to allow for a fallback in case `BUILD_GTEST` has not been initialized yet and `find_package` fails:\n\n```cmake\n# Undefined or OFF\nif (NOT BUILD_GTEST)\n  find_package (GTest)\nendif (NOT BUILD_GTEST)\n\nif (NOT DEFINED BUILD_GTEST)\n  if (GTest_FOUND)\n    option (BUILD_GTEST \"...\" OFF)\n  else (GTest_FOUND)\n    option (BUILD_GTEST \"...\" ON)\n  endif (GTest_FOUND)\nendif (NOT DEFINED BUILD_GTEST)\n\nif (BUILD_GTEST)\n  FetchContent (...)\nendif (BUILD_GTEST)\n```",
      "parentUuid": "707580c0_e7e2705c",
      "revId": "a17be386d65f49752ffbab405a379130280e4625",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff3427fd_306c53c1",
        "filename": "CMakeLists.txt",
        "patchSetId": 7
      },
      "lineNbr": 68,
      "author": {
        "id": 5002
      },
      "writtenOn": "2024-05-30T23:30:34Z",
      "side": 1,
      "message": "Before I do this, let me share something quite weird that I just observed on my laptop and maybe you have some insight.\n\nWhen I was initially developing this version I did not have googletest installed on my laptop and this patch worked fine.\n\nThen I used homebrew to install googletest and suddenly I started getting link errors of the form\n\nUndefined symbols for architecture arm64:\n  \"testing::internal::MakeAndRegisterTestInfo(char const*, char const*, char const*, char const*, testing::internal::CodeLocation, void const*, void (*)(), void (*)(), testing::internal::TestFactoryBase*)\", referenced from:\n      __GLOBAL__sub_I_array_utils_test.cc in array_utils_test.cc.o\n      __GLOBAL__sub_I_array_utils_test.cc in array_utils_test.cc.o\n      __GLOBAL__sub_I_array_utils_test.cc in array_utils_test.cc.o\n      __GLOBAL__sub_I_array_utils_test.cc in array_utils_test.cc.o\n      __GLOBAL__sub_I_array_utils_test.cc in array_utils_test.cc.o\nld: symbol(s) not found for architecture arm64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nninja: build stopped: subcommand failed.\n\nI think it may have to do with the fact that the command line is of the form\n\n\nc++ -Wmissing-declarations -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-missing-field-initializers -Qunused-arguments -mllvm -inline-threshold\u003d600 -Wno-return-type-c-linkage -O3 -DNDEBUG -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.5.sdk -Wl,-search_paths_first -Wl,-headerpad_max_install_names  internal/ceres/CMakeFiles/array_utils_test.dir/array_utils_test.cc.o -o bin/array_utils_test  -Wl,-rpath,/opt/homebrew/lib  lib/libtest_util.a  lib/libceres.a  lib/libgmock_main.a  /opt/homebrew/lib/libspqr.dylib  /opt/homebrew/lib/libcholmod.dylib  /opt/homebrew/lib/libamd.dylib  /opt/homebrew/lib/libcamd.dylib  /opt/homebrew/lib/libccolamd.dylib  /opt/homebrew/lib/libcolamd.dylib  /opt/homebrew/lib/libsuitesparseconfig.dylib  /opt/homebrew/lib/libmetis.dylib  -framework Accelerate  -lm  -ldl  /opt/homebrew/lib/libglog.0.6.0.dylib  /opt/homebrew/lib/libgflags.2.2.2.dylib  lib/libgmock.a  lib/libgtest.a\n\nand the key part being \n\n-Wl,-rpath,/opt/homebrew/lib \n\nwhich is where gtest is installed. so trying to use the fetched gtest seems to conflict with the version thats installed, but I am not entirely sure why, because it is explicitly trying to link to the locally built versions as listed in the last two entries of the command line.\n\nAny ideas as to what maybe going on?",
      "parentUuid": "9ee11d2c_a4ff0166",
      "revId": "a17be386d65f49752ffbab405a379130280e4625",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42f7d769_9930832b",
        "filename": "CMakeLists.txt",
        "patchSetId": 7
      },
      "lineNbr": 68,
      "author": {
        "id": 6612
      },
      "writtenOn": "2024-05-31T00:07:49Z",
      "side": 1,
      "message": "Is it possible that there\u0027s a mismatch between the gtest headers being included and the version of the library being linked (i.e., brew gtest includes vs. fetched gtest lib or the other way around). What include directories (and their order) are used by the compiler?",
      "parentUuid": "ff3427fd_306c53c1",
      "revId": "a17be386d65f49752ffbab405a379130280e4625",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a8da8e9_f0300f78",
        "filename": "CMakeLists.txt",
        "patchSetId": 7
      },
      "lineNbr": 68,
      "author": {
        "id": 5002
      },
      "writtenOn": "2024-05-31T02:50:36Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "42f7d769_9930832b",
      "revId": "a17be386d65f49752ffbab405a379130280e4625",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3aee627_715ad5ff",
        "filename": "internal/ceres/CMakeLists.txt",
        "patchSetId": 7
      },
      "lineNbr": 402,
      "author": {
        "id": 5002
      },
      "writtenOn": "2024-05-30T19:52:40Z",
      "side": 1,
      "message": "there should be a better way to do this, since we are hard coding the path separator here, which may or may not work on windows.",
      "range": {
        "startLine": 402,
        "startChar": 73,
        "endLine": 402,
        "endChar": 74
      },
      "revId": "a17be386d65f49752ffbab405a379130280e4625",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0240e243_4a75f385",
        "filename": "internal/ceres/CMakeLists.txt",
        "patchSetId": 7
      },
      "lineNbr": 402,
      "author": {
        "id": 6612
      },
      "writtenOn": "2024-05-30T20:22:41Z",
      "side": 1,
      "message": "I\u0027d set the path to `${Ceres_SOURCE_DIR}/data` as used before.",
      "parentUuid": "f3aee627_715ad5ff",
      "range": {
        "startLine": 402,
        "startChar": 73,
        "endLine": 402,
        "endChar": 74
      },
      "revId": "a17be386d65f49752ffbab405a379130280e4625",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df2de8f6_a05592c5",
        "filename": "internal/ceres/CMakeLists.txt",
        "patchSetId": 7
      },
      "lineNbr": 402,
      "author": {
        "id": 5002
      },
      "writtenOn": "2024-05-30T22:29:44Z",
      "side": 1,
      "message": "it has to be a relative path, because SrcDir returns \"./bin\" so adding an absolute path here won\u0027t quite work.",
      "parentUuid": "0240e243_4a75f385",
      "range": {
        "startLine": 402,
        "startChar": 73,
        "endLine": 402,
        "endChar": 74
      },
      "revId": "a17be386d65f49752ffbab405a379130280e4625",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db3ee03b_c30e9399",
        "filename": "internal/ceres/CMakeLists.txt",
        "patchSetId": 7
      },
      "lineNbr": 402,
      "author": {
        "id": 6612
      },
      "writtenOn": "2024-05-30T23:16:25Z",
      "side": 1,
      "message": "Does this imply that running test executables manually from a directory other than the build directory does not work?",
      "parentUuid": "df2de8f6_a05592c5",
      "range": {
        "startLine": 402,
        "startChar": 73,
        "endLine": 402,
        "endChar": 74
      },
      "revId": "a17be386d65f49752ffbab405a379130280e4625",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b64cc507_8a6f5774",
        "filename": "internal/ceres/CMakeLists.txt",
        "patchSetId": 7
      },
      "lineNbr": 402,
      "author": {
        "id": 5002
      },
      "writtenOn": "2024-05-31T02:50:36Z",
      "side": 1,
      "message": "Unfortunately yes.",
      "parentUuid": "db3ee03b_c30e9399",
      "range": {
        "startLine": 402,
        "startChar": 73,
        "endLine": 402,
        "endChar": 74
      },
      "revId": "a17be386d65f49752ffbab405a379130280e4625",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3192d9e0_375c2fa7",
        "filename": "internal/ceres/CMakeLists.txt",
        "patchSetId": 7
      },
      "lineNbr": 402,
      "author": {
        "id": 6612
      },
      "writtenOn": "2024-06-03T19:10:49Z",
      "side": 1,
      "message": "In that case I would at least mention this restriction either here as a comment or somewhere in the documentation.",
      "parentUuid": "b64cc507_8a6f5774",
      "range": {
        "startLine": 402,
        "startChar": 73,
        "endLine": 402,
        "endChar": 74
      },
      "revId": "a17be386d65f49752ffbab405a379130280e4625",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f369d13b_6aa11f65",
        "filename": "internal/ceres/CMakeLists.txt",
        "patchSetId": 7
      },
      "lineNbr": 402,
      "author": {
        "id": 6612
      },
      "writtenOn": "2024-06-03T19:36:16Z",
      "side": 1,
      "message": "Unfortunately, this relative path does not work with the Visual Studio generator:\n\nhttps://github.com/sergiud/ceres-solver/actions/runs/9355681890/job/25751383556#step:22:2590\n\nThis is because there\u0027s an additional subdirectory involved which is not considered here. In fact, the relative path imposes several constraints on the build directory in a conjunction:\n1. The build directory must be created within the project root directory.\n2. The tests are executed from the `bin/` subdirectory in the build directory.\n\nWhile 2. can be dealt with, 1. is a major restriction which should probably be avoided.",
      "parentUuid": "3192d9e0_375c2fa7",
      "range": {
        "startLine": 402,
        "startChar": 73,
        "endLine": 402,
        "endChar": 74
      },
      "revId": "a17be386d65f49752ffbab405a379130280e4625",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca71e2f4_d3558631",
        "filename": "internal/ceres/CMakeLists.txt",
        "patchSetId": 7
      },
      "lineNbr": 402,
      "author": {
        "id": 5002
      },
      "writtenOn": "2024-06-05T03:58:08Z",
      "side": 1,
      "message": "This was just meant for testing for now, I am wondering if this is a crappy way to do this anyways.\n\nshould we think about not using this compile time hard coding at all and instead passing just a command line argument (without a flag) to the test?",
      "parentUuid": "f369d13b_6aa11f65",
      "range": {
        "startLine": 402,
        "startChar": 73,
        "endLine": 402,
        "endChar": 74
      },
      "revId": "a17be386d65f49752ffbab405a379130280e4625",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}