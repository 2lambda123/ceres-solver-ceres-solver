{
  "comments": [
    {
      "key": {
        "uuid": "af48cda1_c4d3d111",
        "filename": "internal/ceres/coordinate_descent_minimizer.cc",
        "patchSetId": 2
      },
      "lineNbr": 219,
      "author": {
        "id": 5001
      },
      "writtenOn": "2017-11-21T00:36:28Z",
      "side": 1,
      "message": "Indentation here seems off; not sure if this should change or not.",
      "revId": "8ce71d52ae1cfdc8c4450fe3a86f143fa55c4b92",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "859c601b_860e2b1a",
        "filename": "internal/ceres/coordinate_descent_minimizer.cc",
        "patchSetId": 2
      },
      "lineNbr": 219,
      "author": {
        "id": 5435
      },
      "writtenOn": "2017-11-21T01:36:00Z",
      "side": 1,
      "message": "I\u0027m not sure what the best way to format this is.  The body of the for loop is indented wrt to the openmp for loop.  The TBB code path has an additional indentation due to the task_arena context.  The line 219 closes the parallel_for and the line on 220 closes the task_arena.  \n\nMaybe 219 should be indented one more level?",
      "parentUuid": "af48cda1_c4d3d111",
      "revId": "8ce71d52ae1cfdc8c4450fe3a86f143fa55c4b92",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6d7002e_3cfdb5da",
        "filename": "internal/ceres/coordinate_descent_minimizer.cc",
        "patchSetId": 2
      },
      "lineNbr": 219,
      "author": {
        "id": 5001
      },
      "writtenOn": "2017-11-27T02:17:45Z",
      "side": 1,
      "message": "You\u0027re right; what\u0027s here is fine.",
      "parentUuid": "859c601b_860e2b1a",
      "revId": "8ce71d52ae1cfdc8c4450fe3a86f143fa55c4b92",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5555696c_16b82603",
        "filename": "internal/ceres/solver.cc",
        "patchSetId": 2
      },
      "lineNbr": 518,
      "author": {
        "id": 5001
      },
      "writtenOn": "2017-11-21T00:36:28Z",
      "side": 1,
      "message": "Does this work reasonably for multiple calls to solve? May be worth commenting on the semantics here, since looking up the tbb semantics is onerous.",
      "revId": "8ce71d52ae1cfdc8c4450fe3a86f143fa55c4b92",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cf1d9c3_2a9726a8",
        "filename": "internal/ceres/solver.cc",
        "patchSetId": 2
      },
      "lineNbr": 518,
      "author": {
        "id": 5002
      },
      "writtenOn": "2017-11-27T19:04:32Z",
      "side": 1,
      "message": "Keir, what do you mean by multiple calls here? do you mean multiple sequential calls? or multiple simultaneous calls?\n\nalso do we know if num_threads \u003d 1 leads to a no-op here?",
      "parentUuid": "5555696c_16b82603",
      "revId": "8ce71d52ae1cfdc8c4450fe3a86f143fa55c4b92",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2d729b1_4c0a4347",
        "filename": "internal/ceres/solver.cc",
        "patchSetId": 2
      },
      "lineNbr": 518,
      "author": {
        "id": 5001
      },
      "writtenOn": "2017-11-27T19:49:12Z",
      "side": 1,
      "message": "I mean multiple top-level calls from the user. E.g.\n\n  for (...) {\n    ceres::Solve(...);\n  }\n\nThis will invoke task_scheduler_init() many times. I just want to make sure this is sane and supported. Furthermore, what happens if the user is using TBB? Does this work with nested TBB?",
      "parentUuid": "5cf1d9c3_2a9726a8",
      "revId": "8ce71d52ae1cfdc8c4450fe3a86f143fa55c4b92",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6cee55b_93a38b54",
        "filename": "internal/ceres/solver.cc",
        "patchSetId": 2
      },
      "lineNbr": 518,
      "author": {
        "id": 5435
      },
      "writtenOn": "2017-11-28T00:37:58Z",
      "side": 1,
      "message": "You can call task_scheduler_init() as many times as you want.  However, only the first one instantiated will be honored, which means you can\u0027t change the number of active threads.\n\nIf the user is using TBB and called task_scheduler_init, then the call in Ceres does nothing.  If the user requested only 1 thread and Ceres wants 10 threads, then there will only be 1 thread available.\n\nI decided to remove the explicit call to tbb_task_scheduler_init here to simplify the code and logic.  Since we have moved to the task_arena\u0027s they will control the maximum number of threads Ceres is allowed to use.  This allows TBB to determine the correct number of threads to use for the application. This also follows Intel\u0027s recommendation below for performance.\n\n\"To minimize time overhead, it is best to rely upon automatic creation of the task scheduler, or create a single task_scheduler_init object whose activation spans all uses of the library\u0027s task scheduler.\"\n\nRE: \"also do we know if num_threads \u003d 1 leads to a no-op here?\"\n\nI have not been able to find any documentation on what happens if you only want 1 thread.  I looked through the code, but it is hard to know if there is a fast path.  I empirically tested with and without TBB on a program that calls 1500 small problems to solve and they were about the same test time accounting for the variability in timing, load etc.",
      "parentUuid": "a2d729b1_4c0a4347",
      "revId": "8ce71d52ae1cfdc8c4450fe3a86f143fa55c4b92",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    }
  ]
}