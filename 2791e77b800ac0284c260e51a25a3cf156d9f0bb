{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "78c369ca_1e8ff4f5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-11T22:39:23Z",
      "side": 1,
      "message": "Thanks Mark, I will take a look later today or early tomorrow morning!",
      "revId": "2791e77b800ac0284c260e51a25a3cf156d9f0bb",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "688526e1_808c3284",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-11T23:19:25Z",
      "side": 1,
      "message": "btw in both of the my comments, I am thinking out aloud and i am really curious what you think about this. since you have actual experience using this. ",
      "revId": "2791e77b800ac0284c260e51a25a3cf156d9f0bb",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c40b084_21d56d68",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-12T13:20:05Z",
      "side": 1,
      "message": "I did some informal experimentation, and the results are not very conclusive. but thats not reason to block this CL, once this goes in I can do more experimentation.",
      "revId": "2791e77b800ac0284c260e51a25a3cf156d9f0bb",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "710ef71a_d633c3fd",
        "filename": "include/ceres/solver.h",
        "patchSetId": 1
      },
      "lineNbr": 696,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-11T22:54:49Z",
      "side": 1,
      "message": "why not always use this? is there a downside to using this initialization?",
      "range": {
        "startLine": 696,
        "startChar": 9,
        "endLine": 696,
        "endChar": 50
      },
      "revId": "2791e77b800ac0284c260e51a25a3cf156d9f0bb",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9600da4b_bc2d24c3",
        "filename": "include/ceres/solver.h",
        "patchSetId": 1
      },
      "lineNbr": 696,
      "author": {
        "id": 6667
      },
      "writtenOn": "2022-08-11T23:04:28Z",
      "side": 1,
      "message": "I think that there might be problems conditioned well enough, that (especially with trivial preconditioner) are solvable with vanilla pcg in less wall time, then with usage of such initialization. But maybe it is better to find particular problem that suites given assumption.",
      "parentUuid": "710ef71a_d633c3fd",
      "range": {
        "startLine": 696,
        "startChar": 9,
        "endLine": 696,
        "endChar": 50
      },
      "revId": "2791e77b800ac0284c260e51a25a3cf156d9f0bb",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b853c383_390ab680",
        "filename": "include/ceres/solver.h",
        "patchSetId": 1
      },
      "lineNbr": 696,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-11T23:09:07Z",
      "side": 1,
      "message": "bundle adjustment problems are usually pretty poorly conditioned. in fact now I want to use this initialization for iterative schur in general if it helps ðŸ˜Š\n\nI suggest we do this in general and if push comes to shove come back and add options for disabling this.",
      "parentUuid": "9600da4b_bc2d24c3",
      "range": {
        "startLine": 696,
        "startChar": 9,
        "endLine": 696,
        "endChar": 50
      },
      "revId": "2791e77b800ac0284c260e51a25a3cf156d9f0bb",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd5922cd_ed84b1af",
        "filename": "include/ceres/solver.h",
        "patchSetId": 1
      },
      "lineNbr": 696,
      "author": {
        "id": 6667
      },
      "writtenOn": "2022-08-11T23:24:59Z",
      "side": 1,
      "message": "I believe that doing a \"help in general\", as i mentioned earlier, would be to use initialization only for a few LM steps and disabling it later on. Though, this statement need some benchmarking or, better, math based estimates ðŸ˜Š\n\nMaybe you will suggest a subset (2-3 problems) of bal dataset that i will use to exhaustively benchmark a set of parameter combinations to have more objective data for discussion?",
      "parentUuid": "b853c383_390ab680",
      "range": {
        "startLine": 696,
        "startChar": 9,
        "endLine": 696,
        "endChar": 50
      },
      "revId": "2791e77b800ac0284c260e51a25a3cf156d9f0bb",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fcf39f5_45a6bcab",
        "filename": "include/ceres/solver.h",
        "patchSetId": 1
      },
      "lineNbr": 696,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-11T23:32:22Z",
      "side": 1,
      "message": "later LM iterations require more accuracy not less, so I think it is the reverse of what you are saying. I do not remember the poorly conditioned ones, but let me see what I can find. I will play with this tomorrow sometime and get back to you.",
      "parentUuid": "fd5922cd_ed84b1af",
      "range": {
        "startLine": 696,
        "startChar": 9,
        "endLine": 696,
        "endChar": 50
      },
      "revId": "2791e77b800ac0284c260e51a25a3cf156d9f0bb",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0b21260_9b739ba2",
        "filename": "include/ceres/solver.h",
        "patchSetId": 1
      },
      "lineNbr": 696,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-12T13:19:12Z",
      "side": 1,
      "message": "I think for now it is useful to have this as a bool.",
      "parentUuid": "0fcf39f5_45a6bcab",
      "range": {
        "startLine": 696,
        "startChar": 9,
        "endLine": 696,
        "endChar": 50
      },
      "revId": "2791e77b800ac0284c260e51a25a3cf156d9f0bb",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "461fc0f0_c85818ec",
        "filename": "include/ceres/solver.h",
        "patchSetId": 1
      },
      "lineNbr": 699,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-11T22:39:50Z",
      "side": 1,
      "message": "I thought the paper recommends a default value of 0.01 no?",
      "range": {
        "startLine": 699,
        "startChar": 11,
        "endLine": 699,
        "endChar": 25
      },
      "revId": "2791e77b800ac0284c260e51a25a3cf156d9f0bb",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08a94eee_718466ea",
        "filename": "include/ceres/solver.h",
        "patchSetId": 1
      },
      "lineNbr": 699,
      "author": {
        "id": 6667
      },
      "writtenOn": "2022-08-11T22:51:21Z",
      "side": 1,
      "message": "Yes, but paper focuses on usage of expansion for linear system solution, where here we are using it for preconditioning and initialization. In preconditioning mode this option is irrelevant. In initialization mode, the tests i run showed that speedups possible mostly in low wall time region, so its not that unreasonable to use lower tolerance with given bounds on number of iterations.",
      "parentUuid": "461fc0f0_c85818ec",
      "range": {
        "startLine": 699,
        "startChar": 11,
        "endLine": 699,
        "endChar": 25
      },
      "revId": "2791e77b800ac0284c260e51a25a3cf156d9f0bb",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d246ef5_f0a4ad30",
        "filename": "include/ceres/solver.h",
        "patchSetId": 1
      },
      "lineNbr": 699,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-11T22:54:49Z",
      "side": 1,
      "message": "then why bother with this tolerance at all?",
      "parentUuid": "08a94eee_718466ea",
      "range": {
        "startLine": 699,
        "startChar": 11,
        "endLine": 699,
        "endChar": 25
      },
      "revId": "2791e77b800ac0284c260e51a25a3cf156d9f0bb",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b62b3c7_e6597024",
        "filename": "include/ceres/solver.h",
        "patchSetId": 1
      },
      "lineNbr": 699,
      "author": {
        "id": 6667
      },
      "writtenOn": "2022-08-11T23:04:28Z",
      "side": 1,
      "message": "I assume that there might be problems, where number of initialization iterations that substantially reduce the residual might vary, but maybe we need to come up with particular instance to reason about this.",
      "parentUuid": "0d246ef5_f0a4ad30",
      "range": {
        "startLine": 699,
        "startChar": 11,
        "endLine": 699,
        "endChar": 25
      },
      "revId": "2791e77b800ac0284c260e51a25a3cf156d9f0bb",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f63ec3b1_5c0ba139",
        "filename": "include/ceres/solver.h",
        "patchSetId": 1
      },
      "lineNbr": 699,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-11T23:09:07Z",
      "side": 1,
      "message": "I think we can keep this, since it maybe difficult to control the accuracy of the preconditioner using iterations alone, but if you feel this is not that useful and we never really reach this tolerance then we should just drop it and use num-iterations as the control to begin with. \n\nyour call. my bias is for APIs which can be used in general because most people are going to just set these tolerances and forget them rather than tuning them for one problem at a time.",
      "parentUuid": "0b62b3c7_e6597024",
      "range": {
        "startLine": 699,
        "startChar": 11,
        "endLine": 699,
        "endChar": 25
      },
      "revId": "2791e77b800ac0284c260e51a25a3cf156d9f0bb",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d863d7c_ac1ebd91",
        "filename": "internal/ceres/iterative_schur_complement_solver.cc",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-12T13:19:12Z",
      "side": 1,
      "message": "this option when used with schur_jacobi preconditioner causes a crash. The reason is that inside implicit_schur_complement ftf is computed only if the preconditioner is jacobi or schur_power_series_expansion, but if the preconditioner is schur_jacobi this is never triggered, but power series expansion based initialization requires it.\n\nso implicit_schur_complement needs to check for that bool too.",
      "revId": "2791e77b800ac0284c260e51a25a3cf156d9f0bb",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5610d580_07c64381",
        "filename": "internal/ceres/iterative_schur_complement_solver.cc",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 6667
      },
      "writtenOn": "2022-08-12T14:12:46Z",
      "side": 1,
      "message": "Blocking on https://ceres-solver-review.googlesource.com/c/ceres-solver/+/22460 to fix this.",
      "parentUuid": "2d863d7c_ac1ebd91",
      "revId": "2791e77b800ac0284c260e51a25a3cf156d9f0bb",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18f289ff_a6a254ba",
        "filename": "internal/ceres/solver.cc",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-12T13:19:12Z",
      "side": 1,
      "message": "this is odd. if the only use of this is for preconditioner why are we allowing max and min values which are different?",
      "range": {
        "startLine": 189,
        "startChar": 14,
        "endLine": 189,
        "endChar": 33
      },
      "revId": "2791e77b800ac0284c260e51a25a3cf156d9f0bb",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "710ed2cb_c512df62",
        "filename": "internal/ceres/solver.cc",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 6667
      },
      "writtenOn": "2022-08-12T14:10:45Z",
      "side": 1,
      "message": "Sameer, sorry to introduce such an ambiguity. The assumption here is that even if SCHUR_POWER_SERIES_EXPANSION preconditioner is not used, its implementation via PowerSeriesExpansionPreconditioner still might be involved for initalization purposes, so then difference of bounds on number of iterations is a valid state. But, this holds only if there are examples where speedups appear and executed number of iterations for initialization vary. I think, that coming up with such an example needs a bit of experimenting.",
      "parentUuid": "18f289ff_a6a254ba",
      "range": {
        "startLine": 189,
        "startChar": 14,
        "endLine": 189,
        "endChar": 33
      },
      "revId": "2791e77b800ac0284c260e51a25a3cf156d9f0bb",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3aee9f6_4a1ba80b",
        "filename": "internal/ceres/solver.cc",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-12T14:21:54Z",
      "side": 1,
      "message": "Couple of thoughts.\n\n1. min_num_preconditioner_iterations and max_num_preconditioner_iterations should be renamed to min_num_spse_iterations and max_num_spse_iterations. The reason is that these options are used whether spse is the preconditioner or not, because you could easily combine spse initialization with any other preconditioner no? so calling them preconditioner iterations seems wrong.\n\n2. With regards to this check, why does PCG require that these values be the same?",
      "parentUuid": "710ed2cb_c512df62",
      "range": {
        "startLine": 189,
        "startChar": 14,
        "endLine": 189,
        "endChar": 33
      },
      "revId": "2791e77b800ac0284c260e51a25a3cf156d9f0bb",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "098b9e98_04a69eb2",
        "filename": "internal/ceres/solver.cc",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 6667
      },
      "writtenOn": "2022-08-12T15:13:05Z",
      "side": 1,
      "message": "1. Agree.\n\n2. This is mostly because of my ignorance of pcg convergence proof for variable preconditioner case. I agree that this does not sound as a valuable reason for this change and i will be grateful for a pointer/hint for such proof (or an explanation why existing proof holds even if preconditioner is variable).",
      "parentUuid": "e3aee9f6_4a1ba80b",
      "range": {
        "startLine": 189,
        "startChar": 14,
        "endLine": 189,
        "endChar": 33
      },
      "revId": "2791e77b800ac0284c260e51a25a3cf156d9f0bb",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d8125e9_75879ee2",
        "filename": "internal/ceres/solver.cc",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-12T16:38:33Z",
      "side": 1,
      "message": "Mark let me see what I can find on variable preconditioning. Thats a good point and I had not though that through.\n\nIt is also possible that that the incremental improvement we are seeing when using spse is because the cg loop does not deal with variable preconditioning correctly and it needs to be more sophisticated.",
      "parentUuid": "098b9e98_04a69eb2",
      "range": {
        "startLine": 189,
        "startChar": 14,
        "endLine": 189,
        "endChar": 33
      },
      "revId": "2791e77b800ac0284c260e51a25a3cf156d9f0bb",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ece49dba_36b8dd93",
        "filename": "internal/ceres/solver.cc",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-12T19:54:39Z",
      "side": 1,
      "message": "https://arxiv.org/pdf/math/0605767.pdf\n\nMark as this paper points out variable preconditioning is a bit of a minefield which requires care. So having the preconditioner quit based on spse_tolerance is not a good idea. It should be a fixed number of iterations.  This will ensure the same linear operator is being used for preconditioning\n\nInitialization is different matter, there we can use whatever tolerance we want to use.\n\nso one scheme we can follow is have two tolerances.\n\nspse_tolerance\nmax_num_spse_iterations.\n\nwhere initialization uses both of these options, but when constructing the preconditioner we assume spse_tolerance \u003d 0.\n\nWDYT?",
      "parentUuid": "4d8125e9_75879ee2",
      "range": {
        "startLine": 189,
        "startChar": 14,
        "endLine": 189,
        "endChar": 33
      },
      "revId": "2791e77b800ac0284c260e51a25a3cf156d9f0bb",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}