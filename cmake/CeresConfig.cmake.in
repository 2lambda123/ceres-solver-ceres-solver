# Ceres Solver - A fast non-linear least squares minimizer
# Copyright 2013 Google Inc. All rights reserved.
# http://code.google.com/p/ceres-solver/
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of Google Inc. nor the names of its contributors may be
#   used to endorse or promote products derived from this software without
#   specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# 
# Author: alexs.mac@gmail.com (Alex Stewart)
#

# Config file for Ceres Solver - Find Ceres & dependencies.
#
# This file is used by CMake when FIND_PACKAGE( Ceres ) is invoked (and
# the directory containing this file is present in CMAKE_MODULE_PATH).
#
# This module defines the following variables:
#
# CERES_VERSION
# CERES_INCLUDE_DIRS: Include directories for Ceres and the dependencies which
#                     appear in the Ceres public API and are thus required to
#                     use Ceres.
# CERES_LIBRARIES: Libraries for Ceres and all dependencies against which Ceres
#                  was compiled. This will not include any optional dependencies
#                  that were disabled when Ceres was compiled.
#
# The following variables are also defined for legacy compatibility only.
# Any new code should not use them as they do not conform to the standard CMake
# FindPackage naming conventions.
#
# CERES_INCLUDES = ${CERES_INCLUDE_DIRS}.

# Called if we have failed to find Ceres, or any of its required dependencies,
# unsets all variables defined by this script and reports error message if not
# being found quietly.
MACRO(CERES_REPORT_NOT_FOUND REASON_MSG)
  UNSET(CERES_FOUND)
  UNSET(CERES_INCLUDE_DIRS)
  UNSET(CERES_LIBRARIES)
  IF (CERES_FIND_REQUIRED)
    MESSAGE(FATAL_ERROR ${REASON_MSG} ${ARGN})
  ELSEIF (NOT CERES_FIND_QUIETLY)
    MESSAGE(WARNING ${REASON_MSG} ${ARGN})
  ENDIF()
  RETURN()
ENDMACRO(CERES_REPORT_NOT_FOUND)

# Get the (current, i.e. installed) directory containing this file.
GET_FILENAME_COMPONENT(CURRENT_CONFIG_INSTALL_DIR
  ${CMAKE_CURRENT_LIST_FILE} PATH)

# Build the absolute root install directory as a relative path (determined when
# Ceres was configured & built) from the current install directory for this
# this file.  This allows for the install tree to be relocated, after Ceres was
# built, outside of CMake.
GET_FILENAME_COMPONENT(CURRENT_ROOT_INSTALL_DIR
  ${CURRENT_CONFIG_INSTALL_DIR}/@INSTALL_ROOT_REL_CONFIG_INSTALL_DIR@ ABSOLUTE)
IF (NOT EXISTS ${CURRENT_ROOT_INSTALL_DIR})
  CERES_REPORT_NOT_FOUND(
    "Failed to find Ceres - Ceres install root: ${CURRENT_ROOT_INSTALL_DIR}, "
    "determined from relative path from CeresConfg.cmake install location: "
    "${CURRENT_CONFIG_INSTALL_DIR}, does not exist. Either the install "
    "directory was deleted, or the install tree was only partially relocated "
    "outside of CMake after Ceres was built.")
ENDIF (NOT EXISTS ${CURRENT_ROOT_INSTALL_DIR})

# Set the version.
SET(CERES_VERSION @CERES_VERSION@ )

# Set the include directories for Ceres (itself).
SET(CERES_INCLUDE_DIR "${CURRENT_ROOT_INSTALL_DIR}/@INCLUDE_INSTALL_DIR@")
IF (NOT EXISTS ${CERES_INCLUDE_DIR}/ceres/ceres.h)
  CERES_REPORT_NOT_FOUND(
    "Failed to find Ceres - Ceres install root: ${CURRENT_ROOT_INSTALL_DIR}, "
    "determined from relative path from CeresConfg.cmake install location: "
    "${CURRENT_CONFIG_INSTALL_DIR}, does not contain Ceres headers. "
    "Either the install directory was deleted, or the install tree was only "
    "partially relocated outside of CMake after Ceres was built.")
ENDIF (NOT EXISTS ${CERES_INCLUDE_DIR}/ceres/ceres.h)

# Append the include directories for all (potentially optional) dependencies
# with which Ceres was compiled, the libraries themselves come in via
# CeresTargets-<release/debug>.cmake as link libraries for Ceres target.
#
# TODO(alex): For improved safety we should verify that the versions of all
#             dependencies Ceres was compiled against are found (rather than
#             just any version).
SET(CERES_INCLUDE_DIRS ${CERES_INCLUDE_DIR})

# Eigen.
# Replace when/if Eigen ships with a FindEigen.cmake / EigenConfig.cmake.
#
# TODO: Add windows search locations for Eigen.
FIND_PATH(EIGEN_INCLUDE_DIR
  NAMES Eigen/Core
  PATHS /usr/include/eigen3 # Ubuntu system install.
  /usr/local/include/eigen3 
  /usr/local/homebrew/include/eigen3 # Mac OS X.
  /opt/local/var/macports/software/eigen3 # Mac OS X.
  /opt/local/include/eigen3) # Mac OS X.
IF (NOT EIGEN_INCLUDE_DIR)
  CERES_REPORT_NOT_FOUND("Failed to find Ceres - Missing required Ceres "
    "dependency: Eigen, please set EIGEN_INCLUDE_DIR.")
ELSE (NOT EIGEN_INCLUDE_DIR)
  MESSAGE(STATUS "Found required Ceres dependency: "
    "Eigen in ${EIGEN_INCLUDE_DIR}")
ENDIF (NOT EIGEN_INCLUDE_DIR)
# Mark as advanced _after_ CERES_REPORT_NOT_FOUND() s/t variable will be
# visible in CMake GUI for user to manually set if not found.
MARK_AS_ADVANCED(EIGEN_INCLUDE_DIR)
LIST(APPEND CERES_INCLUDE_DIRS EIGEN_INCLUDE_DIR)

# Glog.
# Flag set during configuration and build of Ceres.
SET(CERES_USES_MINIGLOG @MINIGLOG@)
IF (CERES_USES_MINIGLOG)
  SET(MINIGLOG_INCLUDE_DIR ${CERES_INCLUDE_DIR}/ceres/internal/miniglog)
  IF (NOT EXISTS ${MINIGLOG_INCLUDE_DIR})
    CERES_REPORT_NOT_FOUND(
      "Failed to find Ceres - Ceres install include directory: "
      "${CERES_INCLUDE_DIR} does not include miniglog, but Ceres was "
      "compiled with MINIGLOG enabled (in place of Glog).")
  ENDIF (NOT EXISTS ${MINIGLOG_INCLUDE_DIR})
  LIST(APPEND CERES_INCLUDE_DIRS MINIGLOG_INCLUDE_DIR)
  # Output message at standard log level (not the lower STATUS) so that
  # the message is output in GUI during configuration to warn user.
  MESSAGE("-- Found Ceres installation compiled with miniglog substitute "
    "for glog, beware this will likely cause problems if glog is later linked.")
ELSE (CERES_USES_MINIGLOG)
  # Replace when/if Glog ships with a FindGlog.cmake / GlogConfig.cmake
  FIND_PATH(GLOG_INCLUDE_DIR
    NAMES glog/logging.h
    PATHS /usr/include
    /usr/local/include
    /usr/local/homebrew/include # Mac OS X.
    /opt/local/include) # Mac OS X.
  IF (NOT GLOG_INCLUDE_DIR)
    CERES_REPORT_NOT_FOUND("Failed to find Ceres - Missing required Ceres "
      "dependency: Glog, please set GLOG_INCLUDE_DIR.")
  ELSE (NOT GLOG_INCLUDE_DIR)
    MESSAGE(STATUS "Found required Ceres dependency: "
      "Glog in ${GLOG_INCLUDE_DIR}")
  ENDIF (NOT GLOG_INCLUDE_DIR)
  # Mark as advanced _after_ CERES_REPORT_NOT_FOUND() s/t variable will be
  # visible in CMake GUI for user to manually set if not found.
  MARK_AS_ADVANCED(GLOG_INCLUDE_DIR)
  LIST(APPEND CERES_INCLUDE_DIRS GLOG_INCLUDE_DIR)
ENDIF (CERES_USES_MINIGLOG)

# Import exported Ceres targets.
IF (NOT TARGET ceres AND NOT Ceres_BINARY_DIR)
  INCLUDE(${CURRENT_CONFIG_INSTALL_DIR}/CeresTargets.cmake)
ENDIF (NOT TARGET ceres AND NOT Ceres_BINARY_DIR)
# Set the expected XX_LIBRARIES variable for FindPackage().
SET(CERES_LIBRARIES ceres)

# Set legacy include directories variable for backwards compatibility.
SET(CERES_INCLUDES ${CERES_INCLUDE_DIRS})

# As we use CERES_REPORT_NOT_FOUND() to abort, if we reach this point we have
# found Ceres and all required dependencies.
MESSAGE(STATUS "Found Ceres version: ${CERES_VERSION} "
  "installed in: ${CURRENT_ROOT_INSTALL_DIR}")
