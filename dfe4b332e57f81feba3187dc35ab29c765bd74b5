{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ff20cf3e_56454ebb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-10-26T18:10:37Z",
      "side": 1,
      "message": "I mean why not do a full constexpr pass in that case?",
      "revId": "dfe4b332e57f81feba3187dc35ab29c765bd74b5",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ecb7831_87e56962",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-10-26T19:18:08Z",
      "side": 1,
      "message": "Definitely. The problem is that at this point adding `constexpr` is only a cosmetical change because the underlying Eigen storage does not actually support `constexpr` expressions. At the same time, there\u0027s no performance penalty in the above template code when using `const` instead of `constexpr`. Therefore, I would suggest to hold off from providing any `constexpr` support until Eigen provides it.",
      "parentUuid": "ff20cf3e_56454ebb",
      "revId": "dfe4b332e57f81feba3187dc35ab29c765bd74b5",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95f831d2_0cd16ee4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-10-26T19:21:45Z",
      "side": 1,
      "message": "Sergiu,\nDoes that mean you do not think we should add a constexpr constructor either?",
      "parentUuid": "1ecb7831_87e56962",
      "revId": "dfe4b332e57f81feba3187dc35ab29c765bd74b5",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c0a51ad_078e4edb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-10-26T19:40:47Z",
      "side": 1,
      "message": "Correct. Adding `constexpr` to constructors only will only cause confusion because `constexpr` Jets will not be usable in `constexpr` context except during initialization.",
      "parentUuid": "95f831d2_0cd16ee4",
      "revId": "dfe4b332e57f81feba3187dc35ab29c765bd74b5",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8fe3a74_cfd61c44",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-10-26T19:59:34Z",
      "side": 1,
      "message": "hova@google.com do you have a case where this will explicitly help in some way? otherwise I am inclined to not approve this.",
      "parentUuid": "1c0a51ad_078e4edb",
      "revId": "dfe4b332e57f81feba3187dc35ab29c765bd74b5",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8bf496b5_326b6c88",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 6717
      },
      "writtenOn": "2022-10-27T08:18:59Z",
      "side": 1,
      "message": "I didn\u0027t realize that Eigen didn\u0027t support constexpr yet!\nI\u0027ll describe my use case and let y\u0027all decide whether you want to approve.\n\nWe have templated error functors with constant literals. Jets are obviously one template type. Jets are the only type not supporting constexpr initialization.\n\nToday we have:\n\n```\nstatic const T kOne(1.0);\nt_template_fuction_param +\u003d kOne;\n```\n\nI\u0027d like to modernize this static variable to:\n\n```\nconstexpr T kOne(1.0);\nt_template_fuction_param +\u003d kOne;\n```\n\nI know the addition wouldn\u0027t be a constexpr operation (yet/ever), but constexpr feels more idiomatic for literals.",
      "parentUuid": "f8fe3a74_cfd61c44",
      "revId": "dfe4b332e57f81feba3187dc35ab29c765bd74b5",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6fbbc09_9b46a195",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-10-27T12:56:38Z",
      "side": 1,
      "message": "I think this is just syntactic sugar and in fact communicates the wrong thing about the underlying type T which may or may not be true. I suspect this sort of thing will lead to trouble down the road. I recommend not doing it for now.",
      "parentUuid": "8bf496b5_326b6c88",
      "revId": "dfe4b332e57f81feba3187dc35ab29c765bd74b5",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "952ea61a_b775ab38",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 6717
      },
      "writtenOn": "2022-11-01T07:03:38Z",
      "side": 1,
      "message": "SG! Will revert (and keep an eye on Eigen to see if it becomes constexpr in the future)",
      "parentUuid": "c6fbbc09_9b46a195",
      "revId": "dfe4b332e57f81feba3187dc35ab29c765bd74b5",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}