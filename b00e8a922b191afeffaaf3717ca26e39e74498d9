{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "738bcfef_91488538",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-09-21T17:19:19Z",
      "side": 1,
      "message": "By transposing the block structure we maybe able to get around the need for locks/extra memory.. this is not cache friendly though.",
      "revId": "b00e8a922b191afeffaaf3717ca26e39e74498d9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f7bc0b8_f909a375",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-09-30T17:14:49Z",
      "side": 1,
      "message": "Dmitriy, you are welcome to take over this if this is the direction you are going in, otherwise I will happy to abandon when your design/impl is checked in. Entirely your choice.",
      "revId": "b00e8a922b191afeffaaf3717ca26e39e74498d9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1edebffd_1ef7e8cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6141
      },
      "writtenOn": "2022-10-03T14:45:52Z",
      "side": 1,
      "message": "I\u0027ve played a bit with transposed structure, and it seem to allow hiding memory latency pretty good if you have enough threads.\n\n - `BM_BlockSparseLeftMultiplyAndAccumulateBA` is an old code for single-threaded case and atomic updates (using atomic CAS) for parallel case\n - `BM_BlockSparseLeftMultiplyAndAccumulateWithTransposeBA` is naive parallelization using transposed structure\n - `BM_CRSLeftMultiplyAndAccumulateBA` is an old code for single-threaded case and atomic updates (using atomic CAS) for parallel case\n\n\n```\n----------------------------------------------------------------------------------------------------\nBenchmark                                                          Time             CPU   Iterations\n----------------------------------------------------------------------------------------------------\nBM_BlockSparseRightMultiplyAndAccumulateBA/1                28123293 ns     28122549 ns           25\nBM_BlockSparseRightMultiplyAndAccumulateBA/2                15783876 ns     15779717 ns           41\nBM_BlockSparseRightMultiplyAndAccumulateBA/4                10253476 ns     10251791 ns           60\nBM_BlockSparseRightMultiplyAndAccumulateBA/8                 5668290 ns      5667065 ns          109\nBM_BlockSparseRightMultiplyAndAccumulateBA/16                3903558 ns      3902889 ns          175\nBM_BlockSparseRightMultiplyAndAccumulateBA/28                3730902 ns      3730503 ns          184\nBM_BlockSparseLeftMultiplyAndAccumulateBA/1                 30240430 ns     30234496 ns           23\nBM_BlockSparseLeftMultiplyAndAccumulateBA/2                 53442933 ns     53437839 ns           13\nBM_BlockSparseLeftMultiplyAndAccumulateBA/4                 30586557 ns     30584213 ns           22\nBM_BlockSparseLeftMultiplyAndAccumulateBA/8                 17656656 ns     17655385 ns           39\nBM_BlockSparseLeftMultiplyAndAccumulateBA/16                11262122 ns     11260341 ns           64\nBM_BlockSparseLeftMultiplyAndAccumulateBA/28                 7509376 ns      7508353 ns           90\nBM_BlockSparseLeftMultiplyAndAccumulateWithTransposeBA/1    81517842 ns     81516604 ns            9\nBM_BlockSparseLeftMultiplyAndAccumulateWithTransposeBA/2    42390659 ns     42376789 ns           16\nBM_BlockSparseLeftMultiplyAndAccumulateWithTransposeBA/4    22842017 ns     22837597 ns           31\nBM_BlockSparseLeftMultiplyAndAccumulateWithTransposeBA/8    13196451 ns     13196195 ns           45\nBM_BlockSparseLeftMultiplyAndAccumulateWithTransposeBA/16    6591520 ns      6591008 ns          105\nBM_BlockSparseLeftMultiplyAndAccumulateWithTransposeBA/28    4935381 ns      4935176 ns          117\nBM_CRSRightMultiplyAndAccumulateBA/1                        23852123 ns     23852149 ns           29\nBM_CRSRightMultiplyAndAccumulateBA/2                        15190121 ns     15184600 ns           43\nBM_CRSRightMultiplyAndAccumulateBA/4                         8928307 ns      8926658 ns           76\nBM_CRSRightMultiplyAndAccumulateBA/8                         5211379 ns      5210192 ns          123\nBM_CRSRightMultiplyAndAccumulateBA/16                        3931104 ns      3930814 ns          177\nBM_CRSRightMultiplyAndAccumulateBA/28                        4024011 ns      4023620 ns          177\nBM_CRSLeftMultiplyAndAccumulateBA/1                         23521341 ns     23513191 ns           30\nBM_CRSLeftMultiplyAndAccumulateBA/2                         86003155 ns     85976641 ns            8\nBM_CRSLeftMultiplyAndAccumulateBA/4                         51567377 ns     51562739 ns           13\nBM_CRSLeftMultiplyAndAccumulateBA/8                         29114705 ns     29112613 ns           22\nBM_CRSLeftMultiplyAndAccumulateBA/16                        22340416 ns     22337978 ns           31\nBM_CRSLeftMultiplyAndAccumulateBA/28                        16549294 ns     16544773 ns           38\n```\n\nFor a maximal number of threads the difference between left (w. transposed structure) and right multiplications becomes 4935381 / 3730902 \u003d 1.32x, which is not that bad given the amount of memory bandwidth that is effectively lost (due to blocks occupying ~3/4 of memory being transferred after accounting for cache line width).\n\nAtomic CAS does not scales nearly as well (especially for CRS where it is done on each multiply-accumulate operation).\n\nI think I will try to come up with some block-level locking implementation to make sure I\u0027m not missing something better than this approach.\n\n\nAn interesting fact: adding prefetching of i+4th block (from both block-column and vector) saved ~10..15% of run time for single-threaded operation with transposed structure [4 is pretty much random number in 3..8 range]",
      "parentUuid": "3f7bc0b8_f909a375",
      "revId": "b00e8a922b191afeffaaf3717ca26e39e74498d9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1dfd36f0_c463de81",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-10-03T16:10:28Z",
      "side": 1,
      "message": "Thanks Dmitriy. What do you think about checking in LeftMultiplyAndAccumulateWithTranspose, the numbers look fairly decent to me. And then we can continue researching better blocking/prefetching with that as the baseline?",
      "parentUuid": "1edebffd_1ef7e8cb",
      "revId": "b00e8a922b191afeffaaf3717ca26e39e74498d9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "676c0e4f_414f0f44",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-10-03T16:40:38Z",
      "side": 1,
      "message": "I think one problem with the AddTranspose approach is that it makes the semantics of AddRows etc complicated and we need to be careful about modifications to the matrix.",
      "revId": "b00e8a922b191afeffaaf3717ca26e39e74498d9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2e0aa12_b2fc5dd5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5010
      },
      "writtenOn": "2022-10-12T04:18:58Z",
      "side": 1,
      "message": "ping?",
      "revId": "b00e8a922b191afeffaaf3717ca26e39e74498d9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "705e5aff_08a086b0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6141
      },
      "writtenOn": "2022-10-12T09:35:45Z",
      "side": 1,
      "message": "Hi,\n\nI\u0027ve implemented AddRows/RemoveRows functionality and stopped at writing tests for it. I think I\u0027ll finalize a change-list on the weekend.\n\nAs far as I understand, we already have an invariant of column / row indices of cells in rows / columns coming in ascending order. Thus, since rows are being added / removed only from the end of the matrix, adjusting transposed structure seems to be quite  straightforward:\n - On addition of rows - prepend blocks to corresponding columns (rows in transposed structure), and this will not break the invariant\n - On deletion of rows - for each cell in row being deleted, pop blocks from the back of corresponding column while row index is lower than the last remaining row (when we hit the column first - we remove everything we will need to remove from that column, and when we hit the same column for the second time - no extra computation is being performed)\n\nThis seem to work fine (at least does not break existing tests and bundle adjuster works the same).\n\n\n\nI would like to discuss, which of the following options would look better from your perspective:\n\n - Store row-block structure of transposed matrix as `transposed_block_structure_`\n - Store col-block structure of original matrix as `col_block_structure_`\n\nIn the second case \"rows\" and \"columns\" have the same meaning in both structures, while in the first case they\u0027re switched.",
      "parentUuid": "a2e0aa12_b2fc5dd5",
      "revId": "b00e8a922b191afeffaaf3717ca26e39e74498d9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7350ff36_83716d09",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-10-12T16:15:41Z",
      "side": 1,
      "message": "I think the latter is perhaps nicer but it will require a larger set of changes to the whole class whereas the former makes it look like the special case change it is just meant for multiplications. If we were using the transpose structure more broadly, I would be more inclined for the larger set of changes. so I am a little bit inclined for the transposed_block_structure_ option.",
      "parentUuid": "705e5aff_08a086b0",
      "revId": "b00e8a922b191afeffaaf3717ca26e39e74498d9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "745fb60e_c498dbb3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-10-21T23:46:35Z",
      "side": 1,
      "message": "ping?",
      "tag": "mailMessageId\u003d\u003cCABqdRUDmd8i\u003dhP6VC5pJrcFkvVTghA1kD9AQ\u003dgywKaVR_738+w@mail.gmail.com\u003e",
      "revId": "b00e8a922b191afeffaaf3717ca26e39e74498d9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}