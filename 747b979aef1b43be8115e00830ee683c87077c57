{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6a91281a_ac615ed4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 6732
      },
      "writtenOn": "2023-01-16T17:31:02Z",
      "side": 1,
      "message": "@sameeragarwal@google.com may you please share your opinion about such `numeric_cast` (`safe_cast`)? I am asking because locally I fixed all places where `int64` implicitly casted to `int32` and I would like whether to continue work on this proposal in order to push to `master` or abandone it.",
      "revId": "747b979aef1b43be8115e00830ee683c87077c57",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "280df975_b7e2d081",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 6732
      },
      "writtenOn": "2023-01-16T17:31:36Z",
      "side": 1,
      "message": "\u003e @sameeragarwal@google.com may you please share your opinion about such `numeric_cast` (`safe_cast`)? I am asking because locally I fixed all places where `int64` implicitly casted to `int32` and I would like whether to continue work on this proposal in order to push to `master` or abandone it.",
      "parentUuid": "6a91281a_ac615ed4",
      "revId": "747b979aef1b43be8115e00830ee683c87077c57",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bc827a2_05f15070",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 6732
      },
      "writtenOn": "2023-01-16T17:32:56Z",
      "side": 1,
      "message": "Occasionally duplicated my message :(",
      "parentUuid": "280df975_b7e2d081",
      "revId": "747b979aef1b43be8115e00830ee683c87077c57",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9119c596_7d31c62e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-01-16T18:28:44Z",
      "side": 1,
      "message": "I do not understand the purpose of this numeric_cast proposal. What do you plan to do with it?",
      "revId": "747b979aef1b43be8115e00830ee683c87077c57",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ccc8c24_718461b8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-01-16T18:29:06Z",
      "side": 1,
      "message": "I will reply separately to your proposal for adding 64bit support to ceres\u0027 internals.",
      "revId": "747b979aef1b43be8115e00830ee683c87077c57",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9209762_3245129e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 6732
      },
      "writtenOn": "2023-01-16T18:40:27Z",
      "side": 1,
      "message": "First of all to use it explictely when casting from `int64` to `int32`. Actually right now there are mulitple places in the code where it happens silently but there absolutely no guarantees that this cast works properly\n```\nint64 a, b;\n... (doing something if a and b)\nint32 c \u003d a + b;\n```\nThis code is erroneous but no checks performed at all.\n\nSo the first step is to catch all such places and write\n```\nint32 c \u003d numeric_cast\u003cint64_t\u003e(a + b)\n```\nif `a + b` does not fit into range of `int32` this code will fail. \n\nMoreover there are also places like\n```\nint32 a, b;\n...\nint64 c \u003d a + b;\n```\nThis code is also has a possible error when `a + b` does not fit to `int32`. In this case compiler error `-Wshorten-64-to-32` occurs and it could be fixed in the following way:\n```\nint64 c \u003d numeric_cast\u003cint64\u003e(a) + numeric_cast\u003cint64\u003e(b);\n```\nHere `numeric_cast` inside simply a `static_cast` since `int32`s range fully contained inside `int64`s range\n\nSo, first of all the proposal itself makes sense even without aimint at 64bit indexation.",
      "parentUuid": "9119c596_7d31c62e",
      "revId": "747b979aef1b43be8115e00830ee683c87077c57",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c936c271_4a0d55cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-01-16T18:44:09Z",
      "side": 1,
      "message": "so in places where this down conversion is happening, we first need to make sure that it is actually safe, otherwise it is a bug, in which case it needs to be fixed. Why would casting be the solution here?\n\nI think the first step would be to enable -Wshorten-64-to-32 in the bazel and cmake builds and identify and fix all the places this problem occurs.\n\nSameer",
      "tag": "mailMessageId\u003d\u003cCABqdRUAMPtrbJNVPVrQvKcvmqy9oceqEg8SVaq3-yL-zWip2HQ@mail.gmail.com\u003e",
      "revId": "747b979aef1b43be8115e00830ee683c87077c57",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "42efb185_e86ce31c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-01-16T18:54:02Z",
      "side": 1,
      "message": "Thanks I understand now.\n\nIt is relatively straightforward to add -Wshorten-64-to-32 to the cmake build \n\nhttps://ceres-solver-review.git.corp.google.com/c/ceres-solver/+/23844\n\nand when I do that, I see what you mean by these errors being present all over the code. The bulk of them have to do with taking the size of some objects which are defined to be size_t which is effectively uint64_t.\n\nYes one solution would be to replace all of these warning producing code with the numeric cast, but I would like to look at the pattern of these failures a bit more carefully before we do that.",
      "revId": "747b979aef1b43be8115e00830ee683c87077c57",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}