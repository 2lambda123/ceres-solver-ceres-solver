{
  "comments": [
    {
      "key": {
        "uuid": "56219e7f_33eadbc8",
        "filename": "internal/ceres/preprocessor.cc",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 5002
      },
      "writtenOn": "2018-09-12T17:55:34Z",
      "side": 1,
      "message": "nice fix.",
      "revId": "df6e27e13badedabca4ff3ade8fdbd2ab6181666",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90494190_0a7ed636",
        "filename": "internal/ceres/thread_pool.cc",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 5002
      },
      "writtenOn": "2018-09-12T17:55:34Z",
      "side": 1,
      "message": "is this right? where if this is zero we go to max?",
      "range": {
        "startLine": 57,
        "startChar": 13,
        "endLine": 57,
        "endChar": 27
      },
      "revId": "df6e27e13badedabca4ff3ade8fdbd2ab6181666",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37602015_0cce6851",
        "filename": "internal/ceres/thread_pool.cc",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 5155
      },
      "writtenOn": "2018-09-12T18:20:04Z",
      "side": 1,
      "message": "It replicates the behaviour from before, in that we will always take whatever value the user specifies and try to use it (and report it).\n\nI don\u0027t really see what our other options would be here, 11? 42?  All of these are likely arbitrary and would inflame someone with £££ and a lot of cores.  Although in my experience std::thread::hardware_concurrency() has always returned sane values.",
      "parentUuid": "90494190_0a7ed636",
      "range": {
        "startLine": 57,
        "startChar": 13,
        "endLine": 57,
        "endChar": 27
      },
      "revId": "df6e27e13badedabca4ff3ade8fdbd2ab6181666",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "498ddc12_269aed4b",
        "filename": "internal/ceres/thread_pool.cc",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 5435
      },
      "writtenOn": "2018-09-12T18:30:27Z",
      "side": 1,
      "message": "In a previous review, William thought it was best to respect the users thread count request when std::thread::hardware_concurrency() returns 0.  This does that, but it took me a minute to understand return max here doesn\u0027t say to use max threads, but to not restrict the number of threads the user requested.",
      "parentUuid": "37602015_0cce6851",
      "range": {
        "startLine": 57,
        "startChar": 13,
        "endLine": 57,
        "endChar": 27
      },
      "revId": "df6e27e13badedabca4ff3ade8fdbd2ab6181666",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    }
  ]
}