{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e003fbb5_d7690594",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-08-04T01:05:57Z",
      "side": 1,
      "message": "Neat! The numbers look good. What LAPACK implementation are you using on the M1? ",
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40ad3627_847fe643",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-04T18:17:13Z",
      "side": 1,
      "message": "I would be curious what the numbers look like with intel mkl and how they compare with your cuda stuff on the same machine.",
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a79e082c_120d7625",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-08-04T20:42:26Z",
      "side": 1,
      "message": "On problem-744-543562-pre.txt with 20 iterations, on my Core i9-9920X running Ubuntu 20.04, with OpenBLAS:\n\neigen        164.533143\neigen+mixed  116.878866\nLAPACK        47.079672\nLAPACK+mixed  45.599979\nCUDA          45.470067\nCUDA+mixed    39.996551\n\nHowever, the Schur Elimination is actually taking up the bulk of the time in the LinearSolver::Solve times. Some quick instrumentation shows that in all of the above, about 37.538 is consistently the Schur eliminate times, which puts a lower bound on what you\u0027d expect to see for the total LinearSolver::Solve timings.",
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5e29849_fb3007d4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-08-04T21:38:39Z",
      "side": 1,
      "message": "And on the same computer, recompiled with IntelMKL:\nLAPACK        43.443452\nLAPACK+mixed  41.708270\n\nSchur Elimination contributions:\nLAPACK        37.103953\nLAPACK+mixed  37.256882",
      "parentUuid": "a79e082c_120d7625",
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eed37cd3_93300973",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-04T22:57:31Z",
      "side": 1,
      "message": "I am surprised that the reduction from lapack to lapack mixed is basically nothing with openblas. this is surprising. sure the schur eliminator takes the bulk of the time but on my mac I see a substantial improvement. BTW I used multiple threads for the solved.",
      "parentUuid": "e5e29849_fb3007d4",
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca992963_3f9f69e7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-08-04T23:04:27Z",
      "side": 1,
      "message": "Let me ",
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1febdc83_f353cbc7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-08-04T23:04:27Z",
      "side": 1,
      "message": "Let me rerun the openblas test just to be sure.\nAll tests that I ran were with 24 threads. \nIntel MKL does an excellent job of taxing all cores FWIW.",
      "parentUuid": "eed37cd3_93300973",
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bf811f5_6bc812c1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-08-04T23:39:07Z",
      "side": 1,
      "message": "Detailed breakdown of all numbers:\n\nIntel MKL LAPACK:\nEliminate: 37.163144 (20)\nReducedSolve: 4.581118 (20)\nBackSubstitute: 1.258721 (20)\n\nIntel MKL LAPACK+mixed:\nEliminate: 37.135626 (20)\nReducedSolve: 2.785081 (20)\nBackSubstitute: 1.303132 (20)\n\nCUDA:\nEliminate: 37.073238 (20)\nReducedSolve: 6.992411 (20)\nBackSubstitute: 0.931878 (20)\n\nCUDA+mixed:\nEliminate: 37.264682 (20)\nReducedSolve: 1.447737 (20)\nBackSubstitute: 0.907869 (20)\n\nOpenBLAS LAPACK:\nEliminate: 37.370801 (20)\nReducedSolve: 8.440761 (20)\nBackSubstitute: 0.866261 (20)\n\nOpenBLAS LAPACK+mixed:\nEliminate: 37.235857 (20)\nReducedSolve: 7.177484 (20)\nBackSubstitute: 0.867057 (20)\n\nYes, weirdly there isn\u0027t much speedup I\u0027m noticing with OpenBLAS mixed precision...",
      "parentUuid": "1febdc83_f353cbc7",
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d6f1504d_1e5e7d6d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-04T23:43:45Z",
      "side": 1,
      "message": "interesting, so what is happening here is that the intel mkl lapack is SO fast, that going to mixed precision does not give you much due to amdahl\u0027s law. \n\nwhere as on my machine full precision looks like this\n\nSchurComplementSolver::Solve\n                                   Delta   Cumulative\n                           Setup :    0.24217      0.24217\n                       Eliminate :    1.17963      1.42180\n                    ReducedSolve :    1.01181      2.43362\n                  BackSubstitute :    0.03542      2.46903\n                           Total :    0.00001      2.46904\n\nMixed precision looks like\n\nSchurComplementSolver::Solve\n                                   Delta   Cumulative\n                           Setup :    0.18481      0.18481\n                       Eliminate :    1.18836      1.37317\n                    ReducedSolve :    0.25705      1.63022\n                  BackSubstitute :    0.03643      1.66665\n                           Total :    0.00000      1.66665\n\nso previously eliminator and linear solver were comparable time.. so speeding up the linear solve makes a big difference.\n\nI am using\n\n./bin/bundle_adjuster --input ../../Downloads/problem-744-543562-pre.txt  -num_iterations 20 -num_threads 8 -linear_solver dense_schur --dense_linear_algebra_library lapack  -mixed_precision_solves\n\nas my command line. I am surprised how slow your eliminator is.\nyou are clocking 1.85 seconds per elimination whereas just 0.25 seconds per reduced solve.. the balance on my machine is more like 1:1.",
      "parentUuid": "3bf811f5_6bc812c1",
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71c23920_6fd66d8b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-04T23:44:59Z",
      "side": 1,
      "message": "Sergiu, will you be able to take a look at this patch?",
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12c8dcb2_8637195d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-08-04T23:49:34Z",
      "side": 1,
      "message": "Also breakdowns of the numbers on my M1 Max:\n\nLAPACK:\nEliminate: 25.711852 (20)\nReducedSolve: 24.684023 (20)\nBackSubstitute: 0.866296 (20)\n\nLAPACK+mixed:\nEliminate: 25.496206 (20)\nReducedSolve: 4.383934 (20)\nBackSubstitute: 0.863508 (20)",
      "parentUuid": "3bf811f5_6bc812c1",
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa104754_f7c9a65b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-08-04T23:52:45Z",
      "side": 1,
      "message": "My bundler command:\n./bin/bundle_adjuster --input ../data/problem-744-543562-pre.txt -num_iterations 20 --linear_solver dense_schur --dense_linear_algebra_library lapack --num_threads 24 --mixed_precision_solves\n\nWhat is your cmake command?\nI used (on both the linux and Mac):\n```\ncmake .. -DCMAKE_BUILD_TYPE\u003dRelease\n```",
      "parentUuid": "12c8dcb2_8637195d",
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b71942de_107d5121",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-04T23:55:22Z",
      "side": 1,
      "message": "cmake ../ -G Ninja (the ninja part does not matter, I just like using it instead of make).",
      "parentUuid": "fa104754_f7c9a65b",
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b528bee_0e78a5a1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-08-05T00:08:10Z",
      "side": 1,
      "message": "Testing different compilation options.\n\nEverything below is launched with:\n./bin/bundle_adjuster --input ../data/problem-744-543562-pre.txt -num_iterations 20 --linear_solver dense_schur --dense_linear_algebra_library lapack --num_threads 24 --mixed_precision_solves\n\ncmake .. -DCMAKE_BUILD_TYPE\u003dRelease -DCERES_THREADING_MODEL\u003dOPENMP\nEliminate: 47.146190 (20)\nReducedSolve: 7.098408 (20)\nBackSubstitute: 0.993643 (20)\n\ncmake .. -DCMAKE_BUILD_TYPE\u003dRelease -DCERES_THREADING_MODEL\u003dCXX_THREADS\nEliminate: 37.386482 (20)\nReducedSolve: 7.186327 (20)\nBackSubstitute: 0.892711 (20)\n\ncmake ..\nEliminate: 37.524154 (20)\nReducedSolve: 7.081703 (20)\nBackSubstitute: 0.858053 (20)\n\nSo specifying \"-DCMAKE_BUILD_TYPE\u003dRelease\" is unnecessary, it seems.\nAny other ideas of what could be causing slow schur elimination?\n\nHere\u0027s the full summary:\n```\nEliminate: 37.524154 (20)\nReducedSolve: 7.081703 (20)\nBackSubstitute: 0.858053 (20)\n\nSolver Summary (v 2.2.0-eigen-(3.3.7)-lapack-suitesparse-(5.7.1)-eigensparse-no_openmp-cuda-(11040))\n\n                                     Original                  Reduced\nParameter blocks                       544306                   544306\nParameters                            1637382                  1637382\nResidual blocks                       3058863                  3058863\nResiduals                             6117726                  6117726\n\nMinimizer                        TRUST_REGION\n\nDense linear algebra library           LAPACK (Mixed Precision)\nTrust region strategy     LEVENBERG_MARQUARDT\n                                        Given                     Used\nLinear solver                     DENSE_SCHUR              DENSE_SCHUR\nThreads                                    24                       24\nLinear solver ordering              AUTOMATIC               543562,744\nSchur structure                         2,3,9                    2,3,9\n\nCost:\nInitial                          1.434881e+08\nFinal                            1.546895e+06\nChange                           1.419412e+08\n\nMinimizer iterations                       21\nSuccessful steps                           20\nUnsuccessful steps                          1\n\nTime (in seconds):\nPreprocessor                         7.615061\n\n  Residual only evaluation           1.884765 (20)\n  Jacobian \u0026 residual evaluation    10.910000 (20)\n  Linear solver                     45.828469 (20)\nMinimizer                           66.522841\n\nPostprocessor                        0.186661\nTotal                               74.324564\n\nTermination:                   NO_CONVERGENCE (Maximum number of iterations reached. Number of iterations: 20.)\n```",
      "parentUuid": "b71942de_107d5121",
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38de3f26_1dabf138",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-05T00:12:14Z",
      "side": 1,
      "message": "I imagine its your compiler.\n\nmaybe you are using too many threads?",
      "tag": "mailMessageId\u003d\u003cCABqdRUCUJpo5txb1_0wu3-PoNB77au1+3tyoB8gzi1YiVTUiQg@mail.gmail.com\u003e",
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb624841_7969423f",
        "filename": "internal/ceres/dense_cholesky.cc",
        "patchSetId": 4
      },
      "lineNbr": 183,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-08-04T01:05:57Z",
      "side": 1,
      "message": "Does Eigen distinguish numerical errors from API / other failures?",
      "range": {
        "startLine": 183,
        "startChar": 40,
        "endLine": 183,
        "endChar": 47
      },
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16ce6454_fecddb58",
        "filename": "internal/ceres/dense_cholesky.cc",
        "patchSetId": 4
      },
      "lineNbr": 183,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-08-04T01:08:06Z",
      "side": 1,
      "message": "Looks like it does?\n\nhttps://eigen.tuxfamily.org/dox/group__enums.html#ga85fad7b87587764e5cf6b513a9e0ee5e",
      "parentUuid": "eb624841_7969423f",
      "range": {
        "startLine": 183,
        "startChar": 40,
        "endLine": 183,
        "endChar": 47
      },
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62c14571_2628e403",
        "filename": "internal/ceres/dense_cholesky.cc",
        "patchSetId": 4
      },
      "lineNbr": 183,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-04T04:41:03Z",
      "side": 1,
      "message": "Interesting I had not realized this, and in all our code we just check for success. Instead of changing in this CL, I will come back and take a pass at at.\n\nhttps://github.com/ceres-solver/ceres-solver/issues/849",
      "parentUuid": "16ce6454_fecddb58",
      "range": {
        "startLine": 183,
        "startChar": 40,
        "endLine": 183,
        "endChar": 47
      },
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8367fc6d_8d727d04",
        "filename": "internal/ceres/dense_cholesky.h",
        "patchSetId": 4
      },
      "lineNbr": 103,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-08-04T01:05:57Z",
      "side": 1,
      "message": "Since there is now a FloatEigenDenseCholesky, shouldn\u0027t this be DoubleEigenDenseCholesky for consistency?",
      "range": {
        "startLine": 103,
        "startChar": 22,
        "endLine": 103,
        "endChar": 40
      },
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "613a434e_ed5baf6f",
        "filename": "internal/ceres/dense_cholesky.h",
        "patchSetId": 4
      },
      "lineNbr": 103,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-04T04:41:03Z",
      "side": 1,
      "message": "I am following the convention in the SparseCholesky code where by default everything is double precision and Float is the exception.",
      "parentUuid": "8367fc6d_8d727d04",
      "range": {
        "startLine": 103,
        "startChar": 22,
        "endLine": 103,
        "endChar": 40
      },
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccb2eec8_7470b83c",
        "filename": "internal/ceres/dense_cholesky_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 180,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-08-05T20:47:56Z",
      "side": 1,
      "message": "Better use `std::make_unique` directly. Everywhere in the source file as well.",
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8be967e3_a0f7f5b9",
        "filename": "internal/ceres/iterative_refiner.cc",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-08-05T20:47:56Z",
      "side": 1,
      "message": "Better move the variable out of the loop.",
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b527af4c_7b044423",
        "filename": "internal/ceres/iterative_refiner.cc",
        "patchSetId": 4
      },
      "lineNbr": 95,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-08-05T20:47:56Z",
      "side": 1,
      "message": "If variable\u0027s value is ignored, maybe move it out of the loop to avoid possible reallocations.",
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08c9c256_f5664c05",
        "filename": "internal/ceres/iterative_refiner.cc",
        "patchSetId": 4
      },
      "lineNbr": 96,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-08-04T01:05:57Z",
      "side": 1,
      "message": "It is possible for the DenseCholesky Solve to fail. Shouldn\u0027t this check for success before updating the solution and trying to continue refinement?",
      "range": {
        "startLine": 96,
        "startChar": 4,
        "endLine": 96,
        "endChar": 76
      },
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ca8abdd_6ebde19b",
        "filename": "internal/ceres/iterative_refiner.cc",
        "patchSetId": 4
      },
      "lineNbr": 96,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-04T04:41:03Z",
      "side": 1,
      "message": "the only real failure case is when the factorization has failed but the precondition for calling the refiner is that it be correct. Refine itself does not return an error code for this reason. Checking error here is not going to do us any good.",
      "parentUuid": "08c9c256_f5664c05",
      "range": {
        "startLine": 96,
        "startChar": 4,
        "endLine": 96,
        "endChar": 76
      },
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65359155_ad9f8df1",
        "filename": "internal/ceres/iterative_refiner_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 131,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-08-05T20:47:56Z",
      "side": 1,
      "message": "Possibly check whether LL^T factorization was successful using `llt().info()`.",
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c87ad6a_bffd172b",
        "filename": "internal/ceres/iterative_refiner_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 138,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-08-05T20:47:56Z",
      "side": 1,
      "message": "Is there are reason why factorization is performed in the `Solve` method instead of running it here?",
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf7e5281_5e9e846f",
        "filename": "internal/ceres/iterative_refiner_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 202,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-08-05T20:47:56Z",
      "side": 1,
      "message": "Since `lhs_` is symmetric, maybe only reference the upper/lower part using `.triangularView\u003cUpper\u003e()`/`.triangularView\u003cLower\u003e()`?\n\nI would personally preferred using `.adjoint` instead of `.transpose` to be more general. However, I guess the use of complex matrices is unlikely.",
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "813ca991_ea955997",
        "filename": "internal/ceres/solver.cc",
        "patchSetId": 4
      },
      "lineNbr": 127,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-08-04T01:05:57Z",
      "side": 1,
      "message": "It\u0027s good to add a note here that all dense Cholesky solvers currently support mixed precision, so that if and when someone adds another dense solver, they\u0027d think to check this logic.",
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b399a6d_c9901788",
        "filename": "internal/ceres/solver.cc",
        "patchSetId": 4
      },
      "lineNbr": 127,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-04T04:41:03Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "813ca991_ea955997",
      "revId": "491b252908dd5c184956638583293098fc86b8db",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}