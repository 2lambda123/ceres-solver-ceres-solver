{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "95be4bbc_0ad730ba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-16T20:53:17Z",
      "side": 1,
      "message": "looking at this now.",
      "revId": "02115d34061442e9ae84ef4f7961b72f7d11f65e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cff51e63_1389c1a4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-16T21:23:08Z",
      "side": 1,
      "message": "Thank you for looking at this carefully.",
      "revId": "02115d34061442e9ae84ef4f7961b72f7d11f65e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2370228_9f0742e1",
        "filename": "internal/ceres/block_jacobian_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-14T13:32:51Z",
      "side": 1,
      "message": "why would this loop create a warning?",
      "range": {
        "startLine": 146,
        "startChar": 7,
        "endLine": 146,
        "endChar": 15
      },
      "revId": "02115d34061442e9ae84ef4f7961b72f7d11f65e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65ccfe03_0fded805",
        "filename": "internal/ceres/block_jacobian_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-08-14T17:23:29Z",
      "side": 1,
      "message": "It does not. My goal was to propagate the correctly constrained type without unnecessary sign conversions. A signed integer is not meaningful here anyway.",
      "parentUuid": "b2370228_9f0742e1",
      "range": {
        "startLine": 146,
        "startChar": 7,
        "endLine": 146,
        "endChar": 15
      },
      "revId": "02115d34061442e9ae84ef4f7961b72f7d11f65e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ccfe11a_83d3fd1d",
        "filename": "internal/ceres/block_jacobian_writer.h",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-14T13:32:51Z",
      "side": 1,
      "message": "isn\u0027t it better to fix the problem by just localizing the change to when make_unique is called? instead of changing function signatures?\n\nsince we used signed ints everywhere it makes the function signatures appear insconsistent.",
      "revId": "02115d34061442e9ae84ef4f7961b72f7d11f65e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b019950_5db9b20a",
        "filename": "internal/ceres/block_jacobian_writer.h",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-08-14T17:23:29Z",
      "side": 1,
      "message": "Signed integers actually cause the problems but their use is generally unjustified as their negative range is often unused/not meaningful which only confuses the optimizer.\n\nIn my experience, the better approach is to use the signedness that generate the least number of implicit/explicit conversions instead of sticking to a specific type.",
      "parentUuid": "9ccfe11a_83d3fd1d",
      "revId": "02115d34061442e9ae84ef4f7961b72f7d11f65e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96cc3339_4cd32f58",
        "filename": "internal/ceres/block_jacobian_writer.h",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-14T23:06:45Z",
      "side": 1,
      "message": "https://google.github.io/styleguide/cppguide.html#Integer_Types\n\nThe google style guide does not recommend using unsigned numbers for tasks like this.\nAlso this is not particularly performance sensitive code these allocations happen once in the life cycle of a problem, so I am not at all worried about compiler optimizations here.\n\nso my recommendation is to keep the function signatures the same and fix the issue in the implementation by static casting as needed.",
      "parentUuid": "0b019950_5db9b20a",
      "revId": "02115d34061442e9ae84ef4f7961b72f7d11f65e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44e4652b_42308938",
        "filename": "internal/ceres/block_jacobian_writer.h",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-08-16T20:24:34Z",
      "side": 1,
      "message": "I understand the motivation for the signed integer choice which I referred to previously as \u0027sticking to a specific type.\u0027 After resorting to `static_cast` on `std::make_unique` calls, however, the warnings are back again. Clearly, a cast is not sufficient as a constraint because this conversion is performed either way (albeit implicitly by the compiler instead of explicitly by the caller.)\n\nThe problem here is also not the performance, but the correctness of the generated code under LTO. The original code is not robust enough and therefore causes warnings.\n\nI\u0027ve pushed my changes to https://github.com/sergiud/ceres-solver/commit/d04d195ea99f72aaa1843b71c68dc4d610144777 since they do not solve the issue. Here\u0027s an excerpt from the corresponding compile log:\n```\nIn function ‘make_unique’,\n    inlined from ‘Create’ at /home/sergiu/Projects/ceres-solver/internal/ceres/scratch_evaluate_preparer.cc:43:101,\n    inlined from ‘CreateEvaluatePreparers’ at /home/sergiu/Projects/ceres-solver/internal/ceres/compressed_row_jacobian_writer.h:95:66,\n    inlined from ‘__ct ’ at /home/sergiu/Projects/ceres-solver/internal/ceres/program_evaluator.h:120:9,\n    inlined from ‘Evaluate.constprop.isra’ at /home/sergiu/Projects/ceres-solver/internal/ceres/problem_impl.cc:695:65:\n/usr/include/c++/12.1.1/bits/unique_ptr.h:1080:30: warning: argument 1 value ‘18446744073709551615’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than\u003d]\n 1080 |     { return unique_ptr\u003c_Tp\u003e(new remove_extent_t\u003c_Tp\u003e[__num]()); }\n      |                              ^\n/usr/include/c++/12.1.1/new: In member function ‘Evaluate.constprop.isra’:\n/usr/include/c++/12.1.1/new:128:26: note: in a call to allocation function ‘operator new []’ declared here\n  128 | _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)\n      |                          ^\n[331/555] Linking CXX executable bin/dynamic_compressed_row_sparse_matrix_test\n[332/555] Linking CXX executable bin/dynamic_autodiff_cost_function_test\n[333/555] Linking CXX executable bin/fixed_array_test\n[334/555] Linking CXX executable bin/evaluator_test\nIn function ‘make_unique’,\n    inlined from ‘CreateEvaluatePreparers’ at /home/sergiu/Projects/ceres-solver/internal/ceres/block_jacobian_writer.cc:145:99,\n    inlined from ‘__ct ’ at /home/sergiu/Projects/ceres-solver/internal/ceres/program_evaluator.h:120:9,\n    inlined from ‘make_unique’ at /usr/include/c++/12.1.1/bits/unique_ptr.h:1065:30:\n/usr/include/c++/12.1.1/bits/unique_ptr.h:1080:30: warning: argument 1 value ‘18446744073709551615’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than\u003d]\n 1080 |     { return unique_ptr\u003c_Tp\u003e(new remove_extent_t\u003c_Tp\u003e[__num]()); }\n      |                              ^\n/usr/include/c++/12.1.1/new: In function ‘make_unique’:\n/usr/include/c++/12.1.1/new:128:26: note: in a call to allocation function ‘operator new []’ declared here\n  128 | _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)\n      |                          ^\nIn function ‘make_unique’,\n    inlined from ‘CreateEvaluatorScratch’ at /home/sergiu/Projects/ceres-solver/internal/ceres/program_evaluator.h:357:10,\n    inlined from ‘__ct ’ at /home/sergiu/Projects/ceres-solver/internal/ceres/program_evaluator.h:132:23,\n    inlined from ‘make_unique’ at /usr/include/c++/12.1.1/bits/unique_ptr.h:1065:30:\n/usr/include/c++/12.1.1/bits/unique_ptr.h:1080:30: warning: argument 1 value ‘18446744073709551615’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than\u003d]\n 1080 |     { return unique_ptr\u003c_Tp\u003e(new remove_extent_t\u003c_Tp\u003e[__num]()); }\n      |                              ^\n/usr/include/c++/12.1.1/new: In function ‘make_unique’:\n/usr/include/c++/12.1.1/new:128:26: note: in a call to allocation function ‘operator new []’ declared here\n  128 | _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)\n      |                          ^\nIn function ‘make_unique’,\n    inlined from ‘CreateEvaluatorScratch’ at /home/sergiu/Projects/ceres-solver/internal/ceres/program_evaluator.h:357:10,\n    inlined from ‘__ct ’ at /home/sergiu/Projects/ceres-solver/internal/ceres/program_evaluator.h:132:23,\n    inlined from ‘make_unique’ at /usr/include/c++/12.1.1/bits/unique_ptr.h:1065:30,\n    inlined from ‘Create.constprop’ at /home/sergiu/Projects/ceres-solver/internal/ceres/evaluator.cc:62:74:\n/usr/include/c++/12.1.1/bits/unique_ptr.h:1080:30: warning: argument 1 value ‘18446744073709551615’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than\u003d]\n 1080 |     { return unique_ptr\u003c_Tp\u003e(new remove_extent_t\u003c_Tp\u003e[__num]()); }\n      |                              ^\n/usr/include/c++/12.1.1/new: In function ‘Create.constprop’:\n/usr/include/c++/12.1.1/new:128:26: note: in a call to allocation function ‘operator new []’ declared here\n  128 | _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)\n      |                          ^\nIn function ‘make_unique’,\n    inlined from ‘CreateEvaluatorScratch’ at /home/sergiu/Projects/ceres-solver/internal/ceres/program_evaluator.h:357:10,\n    inlined from ‘__ct ’ at /home/sergiu/Projects/ceres-solver/internal/ceres/program_evaluator.h:132:23,\n    inlined from ‘make_unique’ at /usr/include/c++/12.1.1/bits/unique_ptr.h:1065:30,\n    inlined from ‘Create.constprop’ at /home/sergiu/Projects/ceres-solver/internal/ceres/evaluator.cc:76:69:\n/usr/include/c++/12.1.1/bits/unique_ptr.h:1080:30: warning: argument 1 value ‘18446744073709551615’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than\u003d]\n 1080 |     { return unique_ptr\u003c_Tp\u003e(new remove_extent_t\u003c_Tp\u003e[__num]()); }\n      |                              ^\n/usr/include/c++/12.1.1/new: In function ‘Create.constprop’:\n/usr/include/c++/12.1.1/new:128:26: note: in a call to allocation function ‘operator new []’ declared here\n  128 | _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)\n      |                          ^\nIn function ‘make_unique’,\n    inlined from ‘Create’ at /home/sergiu/Projects/ceres-solver/internal/ceres/scratch_evaluate_preparer.cc:43:101:\n/usr/include/c++/12.1.1/bits/unique_ptr.h:1080:30: warning: argument 1 value ‘18446744073709551615’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than\u003d]\n 1080 |     { return unique_ptr\u003c_Tp\u003e(new remove_extent_t\u003c_Tp\u003e[__num]()); }\n      |                              ^\n/usr/include/c++/12.1.1/new: In function ‘Create’:\n/usr/include/c++/12.1.1/new:128:26: note: in a call to allocation function ‘operator new []’ declared here\n  128 | _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)\n      |                          ^\n[335/555] Linking CXX executable bin/gradient_problem_test\n[336/555] Linking CXX executable bin/gradient_checking_cost_function_test\n[337/555] Linking CXX executable bin/dogleg_strategy_test\n/usr/include/eigen3/Eigen/src/Core/ProductEvaluators.h:29:8: warning: type ‘struct evaluator’ violates the C++ One Definition Rule [-Wodr]\n   29 | struct evaluator\u003cProduct\u003cLhs, Rhs, Options\u003e \u003e\n      |        ^\n/usr/include/eigen3/Eigen/src/Core/ProductEvaluators.h:29: note: a type with different bases is defined in another translation unit\n   29 | struct evaluator\u003cProduct\u003cLhs, Rhs, Options\u003e \u003e\n      | \n[338/555] Linking CXX executable bin/householder_vector_test\n[339/555] Linking CXX executable bin/integer_sequence_algorithm_test\n[340/555] Linking CXX executable bin/graph_test\n[341/555] Linking CXX executable bin/inner_product_computer_test\n[342/555] Linking CXX executable bin/graph_algorithms_test\n[343/555] Linking CXX executable bin/is_close_test\n[344/555] Linking CXX executable bin/jet_traits_test\n[345/555] Linking CXX executable bin/jet_test\n[346/555] Linking CXX executable bin/iterative_refiner_test\n[347/555] Building CXX object internal/ceres/CMakeFiles/manifold_test.dir/manifold_test.cc.o\n[348/555] Linking CXX executable bin/normal_prior_test\n[349/555] Linking CXX executable bin/loss_function_test\n[350/555] Linking CXX executable bin/c_api_test\n/usr/include/eigen3/Eigen/src/Core/ProductEvaluators.h:29:8: warning: type ‘struct evaluator’ violates the C++ One Definition Rule [-Wodr]\n   29 | struct evaluator\u003cProduct\u003cLhs, Rhs, Options\u003e \u003e\n      |        ^\n/usr/include/eigen3/Eigen/src/Core/ProductEvaluators.h:29: note: a type with different bases is defined in another translation unit\n   29 | struct evaluator\u003cProduct\u003cLhs, Rhs, Options\u003e \u003e\n      | \nIn function ‘make_unique’,\n    inlined from ‘CreateEvaluatePreparers’ at /home/sergiu/Projects/ceres-solver/internal/ceres/block_jacobian_writer.cc:145:99,\n    inlined from ‘__ct ’ at /home/sergiu/Projects/ceres-solver/internal/ceres/program_evaluator.h:120:9,\n    inlined from ‘make_unique’ at /usr/include/c++/12.1.1/bits/unique_ptr.h:1065:30:\n/usr/include/c++/12.1.1/bits/unique_ptr.h:1080:30: warning: argument 1 value ‘18446744073709551615’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than\u003d]\n 1080 |     { return unique_ptr\u003c_Tp\u003e(new remove_extent_t\u003c_Tp\u003e[__num]()); }\n      |                              ^\n/usr/include/c++/12.1.1/new: In function ‘make_unique’:\n/usr/include/c++/12.1.1/new:128:26: note: in a call to allocation function ‘operator new []’ declared here\n  128 | _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)\n      |                          ^\nIn function ‘make_unique’,\n    inlined from ‘CreateEvaluatorScratch’ at /home/sergiu/Projects/ceres-solver/internal/ceres/program_evaluator.h:357:10,\n    inlined from ‘__ct ’ at /home/sergiu/Projects/ceres-solver/internal/ceres/program_evaluator.h:132:23,\n    inlined from ‘make_unique’ at /usr/include/c++/12.1.1/bits/unique_ptr.h:1065:30:\n/usr/include/c++/12.1.1/bits/unique_ptr.h:1080:30: warning: argument 1 value ‘18446744073709551615’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than\u003d]\n 1080 |     { return unique_ptr\u003c_Tp\u003e(new remove_extent_t\u003c_Tp\u003e[__num]()); }\n      |                              ^\n/usr/include/c++/12.1.1/new: In function ‘make_unique’:\n/usr/include/c++/12.1.1/new:128:26: note: in a call to allocation function ‘operator new []’ declared here\n  128 | _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)\n      |                          ^\nIn function ‘make_unique’,\n    inlined from ‘CreateEvaluatorScratch’ at /home/sergiu/Projects/ceres-solver/internal/ceres/program_evaluator.h:357:10,\n    inlined from ‘__ct ’ at /home/sergiu/Projects/ceres-solver/internal/ceres/program_evaluator.h:132:23,\n    inlined from ‘make_unique’ at /usr/include/c++/12.1.1/bits/unique_ptr.h:1065:30,\n    inlined from ‘Create’ at /home/sergiu/Projects/ceres-solver/internal/ceres/evaluator.cc:62:74:\n/usr/include/c++/12.1.1/bits/unique_ptr.h:1080:30: warning: argument 1 value ‘18446744073709551615’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than\u003d]\n 1080 |     { return unique_ptr\u003c_Tp\u003e(new remove_extent_t\u003c_Tp\u003e[__num]()); }\n      |                              ^\n/usr/include/c++/12.1.1/new: In function ‘Create’:\n/usr/include/c++/12.1.1/new:128:26: note: in a call to allocation function ‘operator new []’ declared here\n  128 | _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)\n      |                          ^\nIn function ‘make_unique’,\n    inlined from ‘CreateEvaluatorScratch’ at /home/sergiu/Projects/ceres-solver/internal/ceres/program_evaluator.h:357:10,\n    inlined from ‘__ct ’ at /home/sergiu/Projects/ceres-solver/internal/ceres/program_evaluator.h:132:23,\n    inlined from ‘make_unique’ at /usr/include/c++/12.1.1/bits/unique_ptr.h:1065:30,\n    inlined from ‘Create’ at /home/sergiu/Projects/ceres-solver/internal/ceres/evaluator.cc:76:69:\n/usr/include/c++/12.1.1/bits/unique_ptr.h:1080:30: warning: argument 1 value ‘18446744073709551615’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than\u003d]\n 1080 |     { return unique_ptr\u003c_Tp\u003e(new remove_extent_t\u003c_Tp\u003e[__num]()); }\n      |                              ^\n/usr/include/c++/12.1.1/new: In function ‘Create’:\n/usr/include/c++/12.1.1/new:128:26: note: in a call to allocation function ‘operator new []’ declared here\n  128 | _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)\n      |                          ^\nIn function ‘make_unique’,\n    inlined from ‘Create’ at /home/sergiu/Projects/ceres-solver/internal/ceres/scratch_evaluate_preparer.cc:43:101:\n/usr/include/c++/12.1.1/bits/unique_ptr.h:1080:30: warning: argument 1 value ‘18446744073709551615’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than\u003d]\n 1080 |     { return unique_ptr\u003c_Tp\u003e(new remove_extent_t\u003c_Tp\u003e[__num]()); }\n      |                              ^\n/usr/include/c++/12.1.1/new: In function ‘Create’:\n/usr/include/c++/12.1.1/new:128:26: note: in a call to allocation function ‘operator new []’ declared here\n  128 | _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)\n      |                          ^\n```",
      "parentUuid": "96cc3339_4cd32f58",
      "revId": "02115d34061442e9ae84ef4f7961b72f7d11f65e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "534e8316_13289ad8",
        "filename": "internal/ceres/program_evaluator.h",
        "patchSetId": 2
      },
      "lineNbr": 129,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-08-14T11:11:23Z",
      "side": 1,
      "message": "Don\u0027t we need an `#else` with a `num_threads \u003c 1` check here?",
      "revId": "02115d34061442e9ae84ef4f7961b72f7d11f65e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83e316f7_53c89d96",
        "filename": "internal/ceres/program_evaluator.h",
        "patchSetId": 2
      },
      "lineNbr": 129,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-14T13:32:51Z",
      "side": 1,
      "message": "num_threads is guaranteed to be \u003e\u003d1.",
      "parentUuid": "534e8316_13289ad8",
      "revId": "02115d34061442e9ae84ef4f7961b72f7d11f65e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3d837f19_eb486d96",
        "filename": "internal/ceres/program_evaluator.h",
        "patchSetId": 2
      },
      "lineNbr": 129,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-08-14T17:23:29Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "83e316f7_53c89d96",
      "revId": "02115d34061442e9ae84ef4f7961b72f7d11f65e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "925e59ac_c481e831",
        "filename": "internal/ceres/scratch_evaluate_preparer.cc",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-14T13:32:51Z",
      "side": 1,
      "message": "I am confused. you seem to be fixing two things here.\n\n1. num_threads\n2. max_derivatives_per_residual_block which should be size_t and not an int.\n\nisn\u0027t the warning just caused by the latter?",
      "revId": "02115d34061442e9ae84ef4f7961b72f7d11f65e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c488af5_2ff017c5",
        "filename": "internal/ceres/scratch_evaluate_preparer.cc",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-08-14T17:23:29Z",
      "side": 1,
      "message": "Correct. However, `num_threads` basically involves very similar code (i.e., passing a signed integer to `make_unique` to allocate an array) and it would make sense to avoid such combinations altogether.",
      "parentUuid": "925e59ac_c481e831",
      "revId": "02115d34061442e9ae84ef4f7961b72f7d11f65e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a835d1f8_e51db5ea",
        "filename": "internal/ceres/scratch_evaluate_preparer.cc",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-14T13:32:51Z",
      "side": 1,
      "message": "why not just static_cast here?",
      "revId": "02115d34061442e9ae84ef4f7961b72f7d11f65e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23d5e1a0_5cbb63ee",
        "filename": "internal/ceres/scratch_evaluate_preparer.cc",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-08-14T17:23:29Z",
      "side": 1,
      "message": "This is the subpar approach because it requires casting at all `make_unique` call sites instead somewhere centrally followed by propagation of the correctly constrained type.\n\nI\u0027m aware that I\u0027ve mixed both variants. However, I also wanted to avoid too many changes.",
      "parentUuid": "a835d1f8_e51db5ea",
      "revId": "02115d34061442e9ae84ef4f7961b72f7d11f65e",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}