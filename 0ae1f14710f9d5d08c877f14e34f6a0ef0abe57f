{
  "comments": [
    {
      "key": {
        "uuid": "5d05cf34_d7c4d0bb",
        "filename": "include/ceres/internal/code_generator.h",
        "patchSetId": 7
      },
      "lineNbr": 34,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-11-13T17:36:08Z",
      "side": 1,
      "message": "do not depend on transitive inclusion of all depdencies, include all headers explicitly.",
      "range": {
        "startLine": 34,
        "startChar": 28,
        "endLine": 34,
        "endChar": 29
      },
      "revId": "0ae1f14710f9d5d08c877f14e34f6a0ef0abe57f",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5b1975b_664cf5dd",
        "filename": "include/ceres/internal/code_generator.h",
        "patchSetId": 7
      },
      "lineNbr": 80,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-11-13T17:36:08Z",
      "side": 1,
      "message": "why is this an option? or rather why would the user want to control this? just curious.",
      "range": {
        "startLine": 80,
        "startChar": 26,
        "endLine": 80,
        "endChar": 31
      },
      "revId": "0ae1f14710f9d5d08c877f14e34f6a0ef0abe57f",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39e10d2d_77022a26",
        "filename": "include/ceres/internal/code_generator.h",
        "patchSetId": 7
      },
      "lineNbr": 80,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-11-13T17:56:24Z",
      "side": 1,
      "message": "Ok, so my idea with the CodeGenerator class is that it is highly customizable and can be used for much more than just deriving cost functors. \n\nWe also provide a AutodiffCodeGenerator, which does the template magic and uses the CodeGenerator accordingly.\n\nThe reason I added this optional root block here is for generated inline code. For example an experienced user could write stuff like this:\n\nvoid foo()\n{\n  // do some stuff\n  int generated_input \u003d x;\n  #include \"generated_eval.h\"\n  int a \u003d generated_output;\n}",
      "parentUuid": "e5b1975b_664cf5dd",
      "range": {
        "startLine": 80,
        "startChar": 26,
        "endLine": 80,
        "endChar": 31
      },
      "revId": "0ae1f14710f9d5d08c877f14e34f6a0ef0abe57f",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f1251d5_75ec5639",
        "filename": "include/ceres/internal/code_generator.h",
        "patchSetId": 7
      },
      "lineNbr": 80,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-11-13T18:21:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "39e10d2d_77022a26",
      "range": {
        "startLine": 80,
        "startChar": 26,
        "endLine": 80,
        "endChar": 31
      },
      "revId": "0ae1f14710f9d5d08c877f14e34f6a0ef0abe57f",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d7d03ad_4acc7f2c",
        "filename": "include/ceres/internal/code_generator.h",
        "patchSetId": 7
      },
      "lineNbr": 83,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-11-13T17:36:08Z",
      "side": 1,
      "message": "why is this a user controllable thing? shouldn\u0027t this just be a function of the fact that we are using doubles.",
      "range": {
        "startLine": 83,
        "startChar": 42,
        "endLine": 83,
        "endChar": 44
      },
      "revId": "0ae1f14710f9d5d08c877f14e34f6a0ef0abe57f",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef6d1556_9c3953da",
        "filename": "include/ceres/internal/code_generator.h",
        "patchSetId": 7
      },
      "lineNbr": 83,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-11-13T17:56:24Z",
      "side": 1,
      "message": "Also true.",
      "parentUuid": "3d7d03ad_4acc7f2c",
      "range": {
        "startLine": 83,
        "startChar": 42,
        "endLine": 83,
        "endChar": 44
      },
      "revId": "0ae1f14710f9d5d08c877f14e34f6a0ef0abe57f",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64654436_688cdffd",
        "filename": "include/ceres/internal/code_generator.h",
        "patchSetId": 7
      },
      "lineNbr": 83,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-11-13T18:21:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ef6d1556_9c3953da",
      "range": {
        "startLine": 83,
        "startChar": 42,
        "endLine": 83,
        "endChar": 44
      },
      "revId": "0ae1f14710f9d5d08c877f14e34f6a0ef0abe57f",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1427cd36_c41d546e",
        "filename": "include/ceres/internal/code_generator.h",
        "patchSetId": 7
      },
      "lineNbr": 86,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-11-13T17:36:08Z",
      "side": 1,
      "message": "i\u0027d much rather we ask the user for number of spaces rather than the string. Setting this as a string requires counting, or visually judging as well as the possibility of not entering a white space string at all.",
      "range": {
        "startLine": 86,
        "startChar": 37,
        "endLine": 86,
        "endChar": 38
      },
      "revId": "0ae1f14710f9d5d08c877f14e34f6a0ef0abe57f",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c527c7d_c1d0a08f",
        "filename": "include/ceres/internal/code_generator.h",
        "patchSetId": 7
      },
      "lineNbr": 86,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-11-13T17:56:24Z",
      "side": 1,
      "message": "Yup makes sense",
      "parentUuid": "1427cd36_c41d546e",
      "range": {
        "startLine": 86,
        "startChar": 37,
        "endLine": 86,
        "endChar": 38
      },
      "revId": "0ae1f14710f9d5d08c877f14e34f6a0ef0abe57f",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81929ee6_185dc038",
        "filename": "include/ceres/internal/code_generator.h",
        "patchSetId": 7
      },
      "lineNbr": 86,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-11-13T18:21:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2c527c7d_c1d0a08f",
      "range": {
        "startLine": 86,
        "startChar": 37,
        "endLine": 86,
        "endChar": 38
      },
      "revId": "0ae1f14710f9d5d08c877f14e34f6a0ef0abe57f",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9260447d_f4db2b2b",
        "filename": "include/ceres/internal/code_generator.h",
        "patchSetId": 7
      },
      "lineNbr": 92,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-11-13T17:36:08Z",
      "side": 1,
      "message": "is this actually a choice? isn\u0027t the fact that everything is doubles already backed in?",
      "range": {
        "startLine": 92,
        "startChar": 46,
        "endLine": 92,
        "endChar": 52
      },
      "revId": "0ae1f14710f9d5d08c877f14e34f6a0ef0abe57f",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3517986b_1591203a",
        "filename": "include/ceres/internal/code_generator.h",
        "patchSetId": 7
      },
      "lineNbr": 92,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-11-13T17:56:24Z",
      "side": 1,
      "message": "Yes it is actually. Only compile time constants are printed as doubles. So it would be no problem to generate code like this:\n\nfloat v_0 \u003d 0.0;\nfloat v_1 \u003d 1.0;\nfloat v_2 \u003d v_0 + v_1;\n\nIn fact we could also generate templated functors again by setting this to \"T\" and adding the template stuff to the header. This could be potentially be used for higher order derivatives, if required.",
      "parentUuid": "9260447d_f4db2b2b",
      "range": {
        "startLine": 92,
        "startChar": 46,
        "endLine": 92,
        "endChar": 52
      },
      "revId": "0ae1f14710f9d5d08c877f14e34f6a0ef0abe57f",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6297e0de_afd020b7",
        "filename": "include/ceres/internal/code_generator.h",
        "patchSetId": 7
      },
      "lineNbr": 92,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-11-13T18:02:33Z",
      "side": 1,
      "message": "sure but maybe introduce this later, and for now keep the testing surface clean? because this seriously increases the chance of incorrect code, and I\u0027d like to test things carefully and thoroughly.",
      "parentUuid": "3517986b_1591203a",
      "range": {
        "startLine": 92,
        "startChar": 46,
        "endLine": 92,
        "endChar": 52
      },
      "revId": "0ae1f14710f9d5d08c877f14e34f6a0ef0abe57f",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "547d7894_0af445f7",
        "filename": "include/ceres/internal/code_generator.h",
        "patchSetId": 7
      },
      "lineNbr": 92,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-11-13T18:21:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6297e0de_afd020b7",
      "range": {
        "startLine": 92,
        "startChar": 46,
        "endLine": 92,
        "endChar": 52
      },
      "revId": "0ae1f14710f9d5d08c877f14e34f6a0ef0abe57f",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07fe2e21_4ce6c882",
        "filename": "include/ceres/internal/code_generator.h",
        "patchSetId": 7
      },
      "lineNbr": 93,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-11-13T17:36:08Z",
      "side": 1,
      "message": "why is this a choice?",
      "range": {
        "startLine": 93,
        "startChar": 39,
        "endLine": 93,
        "endChar": 43
      },
      "revId": "0ae1f14710f9d5d08c877f14e34f6a0ef0abe57f",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf1cd1f8_e021b946",
        "filename": "include/ceres/internal/code_generator.h",
        "patchSetId": 7
      },
      "lineNbr": 93,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-11-13T18:21:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "07fe2e21_4ce6c882",
      "range": {
        "startLine": 93,
        "startChar": 39,
        "endLine": 93,
        "endChar": 43
      },
      "revId": "0ae1f14710f9d5d08c877f14e34f6a0ef0abe57f",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d5be333_4d8b2031",
        "filename": "include/ceres/internal/code_generator.h",
        "patchSetId": 7
      },
      "lineNbr": 96,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-11-13T17:36:08Z",
      "side": 1,
      "message": "why is this a choice? this is basically an optimized pass. The code generator should just print whatever we have, the optimizer is responsible for deciding what survives each pass.",
      "range": {
        "startLine": 96,
        "startChar": 9,
        "endLine": 96,
        "endChar": 18
      },
      "revId": "0ae1f14710f9d5d08c877f14e34f6a0ef0abe57f",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f505660b_eeee8c14",
        "filename": "include/ceres/internal/code_generator.h",
        "patchSetId": 7
      },
      "lineNbr": 96,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-11-13T17:56:24Z",
      "side": 1,
      "message": "Ok true this doesn\u0027t make sense here.",
      "parentUuid": "1d5be333_4d8b2031",
      "range": {
        "startLine": 96,
        "startChar": 9,
        "endLine": 96,
        "endChar": 18
      },
      "revId": "0ae1f14710f9d5d08c877f14e34f6a0ef0abe57f",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "059d44fe_8cc83cd1",
        "filename": "include/ceres/internal/code_generator.h",
        "patchSetId": 7
      },
      "lineNbr": 96,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-11-13T18:21:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f505660b_eeee8c14",
      "range": {
        "startLine": 96,
        "startChar": 9,
        "endLine": 96,
        "endChar": 18
      },
      "revId": "0ae1f14710f9d5d08c877f14e34f6a0ef0abe57f",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62c69153_42097e2f",
        "filename": "include/ceres/internal/code_generator.h",
        "patchSetId": 7
      },
      "lineNbr": 100,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-11-13T17:36:08Z",
      "side": 1,
      "message": "Print -\u003e Generate\n\nI also think that ostream is the wrong way to get output out of this class because testing will be a nightmare.\n\nyou are better off with generating a vector of strings, and verifying that vector of strings is correct. it will allow you to skip over headers and such much more easily.\n\nthen a simple function can dump out the whole function as needed.",
      "range": {
        "startLine": 100,
        "startChar": 7,
        "endLine": 100,
        "endChar": 12
      },
      "revId": "0ae1f14710f9d5d08c877f14e34f6a0ef0abe57f",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f25ad7e_28df5a84",
        "filename": "include/ceres/internal/expression_ref.h",
        "patchSetId": 7
      },
      "lineNbr": 53,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-11-13T17:26:41Z",
      "side": 1,
      "message": "I would rather have a specialization for Jets rather than not marking this explicit.",
      "range": {
        "startLine": 53,
        "startChar": 2,
        "endLine": 53,
        "endChar": 15
      },
      "revId": "0ae1f14710f9d5d08c877f14e34f6a0ef0abe57f",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27d32ba1_654e6fdb",
        "filename": "include/ceres/internal/expression_ref.h",
        "patchSetId": 7
      },
      "lineNbr": 74,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-11-13T17:26:41Z",
      "side": 1,
      "message": "this needs to be marked explict no?",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 74,
        "endChar": 2
      },
      "revId": "0ae1f14710f9d5d08c877f14e34f6a0ef0abe57f",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    }
  ]
}