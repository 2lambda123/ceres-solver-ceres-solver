{
  "comments": [
    {
      "key": {
        "uuid": "1b1caa8e_f877b8fb",
        "filename": "cmake/CeresCodeGeneration.cmake",
        "patchSetId": 16
      },
      "lineNbr": 74,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-12-23T16:34:10Z",
      "side": 1,
      "message": "this leads to upper/mixed case file names.",
      "range": {
        "startLine": 74,
        "startChar": 62,
        "endLine": 74,
        "endChar": 79
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04ad8f2c_a05482f7",
        "filename": "cmake/CeresCodeGeneration.cmake",
        "patchSetId": 16
      },
      "lineNbr": 74,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-12-23T18:47:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1b1caa8e_f877b8fb",
      "range": {
        "startLine": 74,
        "startChar": 62,
        "endLine": 74,
        "endChar": 79
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d36d26bf_01dca591",
        "filename": "cmake/CeresCodeGeneration.cmake",
        "patchSetId": 16
      },
      "lineNbr": 78,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-12-23T16:34:10Z",
      "side": 1,
      "message": "I am wondering if this can\u0027t just be a generic filename that you generate and call, instead of making it cost_functor_name.cc ?",
      "range": {
        "startLine": 78,
        "startChar": 79,
        "endLine": 78,
        "endChar": 81
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3d790d7_c108a7e4",
        "filename": "cmake/CeresCodeGeneration.cmake",
        "patchSetId": 16
      },
      "lineNbr": 78,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-12-23T17:31:24Z",
      "side": 1,
      "message": "I don\u0027t get why a generic name is better than the actual cost functor name. Like this, the user can understand this file better and the \"make\" console output is clearer.",
      "parentUuid": "d36d26bf_01dca591",
      "range": {
        "startLine": 78,
        "startChar": 79,
        "endLine": 78,
        "endChar": 81
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f0f2da0_a408a03c",
        "filename": "cmake/CeresCodeGeneration.cmake",
        "patchSetId": 16
      },
      "lineNbr": 78,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-12-23T18:07:48Z",
      "side": 1,
      "message": "My objective here is to reduce the amount of surprise as much as possible and it is not evident that this is a generated file. Unless the user is aware of what the filenaming scheme in this cmake file, they will actually have to guess what this file is doing. In fact they would be surprised by a cc file with the same name as the header which they did not create.",
      "parentUuid": "e3d790d7_c108a7e4",
      "range": {
        "startLine": 78,
        "startChar": 79,
        "endLine": 78,
        "endChar": 81
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b22982c_046075ca",
        "filename": "cmake/CeresCodeGeneration.cmake",
        "patchSetId": 16
      },
      "lineNbr": 78,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-12-23T18:47:59Z",
      "side": 1,
      "message": "I think I misunderstood you there. What about something like \u003cfunctor_name\u003e_code_generator.cc?",
      "parentUuid": "7f0f2da0_a408a03c",
      "range": {
        "startLine": 78,
        "startChar": 79,
        "endLine": 78,
        "endChar": 81
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe4333a8_00af269a",
        "filename": "cmake/CeresCodeGeneration.cmake",
        "patchSetId": 16
      },
      "lineNbr": 79,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-12-23T16:34:10Z",
      "side": 1,
      "message": "this leads to SquareFunctor_evaluate_impl.h, how about deriving it from the original header file?",
      "range": {
        "startLine": 79,
        "startChar": 66,
        "endLine": 79,
        "endChar": 83
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "696328f6_4e862a3c",
        "filename": "cmake/CeresCodeGeneration.cmake",
        "patchSetId": 16
      },
      "lineNbr": 79,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-12-23T17:31:24Z",
      "side": 1,
      "message": "I disagree here. We should keep the option of having one header file with multiple functors.",
      "parentUuid": "fe4333a8_00af269a",
      "range": {
        "startLine": 79,
        "startChar": 66,
        "endLine": 79,
        "endChar": 83
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a02f41fe_c5e1583d",
        "filename": "cmake/CeresCodeGeneration.cmake",
        "patchSetId": 16
      },
      "lineNbr": 79,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-12-23T18:07:48Z",
      "side": 1,
      "message": "I do not understand. Are you doing this because you want a single file to have multiple functors and then generating multiple evaluate_impl.h file per functor?",
      "parentUuid": "696328f6_4e862a3c",
      "range": {
        "startLine": 79,
        "startChar": 66,
        "endLine": 79,
        "endChar": 83
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2f1e676_631ab364",
        "filename": "cmake/CeresCodeGeneration.cmake",
        "patchSetId": 16
      },
      "lineNbr": 79,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-12-23T18:47:59Z",
      "side": 1,
      "message": "Yes, I want to allow a single file with multiple functors. In the current implementation it\u0027s straight forward because a impl.h file is generated for each functor.",
      "parentUuid": "a02f41fe_c5e1583d",
      "range": {
        "startLine": 79,
        "startChar": 66,
        "endLine": 79,
        "endChar": 83
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ded7e68b_97f33a86",
        "filename": "examples/helloworld_codegen.cc",
        "patchSetId": 16
      },
      "lineNbr": 54,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-12-23T16:34:10Z",
      "side": 1,
      "message": "I think you will agree that this reads confusingly as : CostFunction* \u003d new functor.\n\nI am wondering if the code/include structure gets simpler if the user instead of including square_functor.h is asked to include \n\nsquare_functor_generated.h and thats the file ceres_cost_functor generates?\n\nthis way it gets more freedom to do things to the source?",
      "range": {
        "startLine": 54,
        "startChar": 36,
        "endLine": 54,
        "endChar": 49
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1bb1ac78_f4888d31",
        "filename": "examples/helloworld_codegen.cc",
        "patchSetId": 16
      },
      "lineNbr": 54,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-12-23T17:31:24Z",
      "side": 1,
      "message": "If we don\u0027t include the input file, we also have to generate the \"class stuff\" around the evaluate function. I don\u0027t think this is a good idea, because local variables, constructors and member functions can not be used anymore.",
      "parentUuid": "ded7e68b_97f33a86",
      "range": {
        "startLine": 54,
        "startChar": 36,
        "endLine": 54,
        "endChar": 49
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fadde86_fcc7e0f0",
        "filename": "examples/helloworld_codegen.cc",
        "patchSetId": 16
      },
      "lineNbr": 54,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-12-23T18:07:48Z",
      "side": 1,
      "message": "fair point.",
      "parentUuid": "1bb1ac78_f4888d31",
      "range": {
        "startLine": 54,
        "startChar": 36,
        "endLine": 54,
        "endChar": 49
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85446009_20736391",
        "filename": "examples/helloworld_codegen.cc",
        "patchSetId": 16
      },
      "lineNbr": 54,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-12-23T18:47:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3fadde86_fcc7e0f0",
      "range": {
        "startLine": 54,
        "startChar": 36,
        "endLine": 54,
        "endChar": 49
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5be1d7b4_86affda8",
        "filename": "examples/square_functor.h",
        "patchSetId": 16
      },
      "lineNbr": 33,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-12-23T16:34:10Z",
      "side": 1,
      "message": "CodegenCostFunction should likely be renamed to CodeGeneratingCostFunction\n\nand objects inheriting from it should not be called a functor.\n\nAlso we need to ensure people are not accidentally invoking Evaluate on subclasses of CodeGeneratingCostFunction.",
      "range": {
        "startLine": 33,
        "startChar": 7,
        "endLine": 33,
        "endChar": 20
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c24910be_d13d5d7f",
        "filename": "examples/square_functor.h",
        "patchSetId": 16
      },
      "lineNbr": 33,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-12-23T17:31:24Z",
      "side": 1,
      "message": "The rename is fine.\n\nI don\u0027t get your second point. CodeGeneratingCostFunction doesn\u0027t have Evaluate so the subclasses either have a correct Evaluate (if included) or none.",
      "parentUuid": "5be1d7b4_86affda8",
      "range": {
        "startLine": 33,
        "startChar": 7,
        "endLine": 33,
        "endChar": 20
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37c216e9_1f70b78d",
        "filename": "examples/square_functor.h",
        "patchSetId": 16
      },
      "lineNbr": 33,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-12-23T18:07:48Z",
      "side": 1,
      "message": "you mean Evaluate is abstract for CodeGeneratingCostFunction? thats fine.",
      "parentUuid": "c24910be_d13d5d7f",
      "range": {
        "startLine": 33,
        "startChar": 7,
        "endLine": 33,
        "endChar": 20
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f098acc_db1b33ef",
        "filename": "examples/square_functor.h",
        "patchSetId": 16
      },
      "lineNbr": 33,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-12-23T18:47:59Z",
      "side": 1,
      "message": "Yes.",
      "parentUuid": "37c216e9_1f70b78d",
      "range": {
        "startLine": 33,
        "startChar": 7,
        "endLine": 33,
        "endChar": 20
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5be8934_14321b0d",
        "filename": "examples/square_functor.h",
        "patchSetId": 16
      },
      "lineNbr": 45,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-12-23T16:34:10Z",
      "side": 1,
      "message": "The generated file should not have upper case naming, it should also not be called the same name, thats a recipe for confusion.",
      "range": {
        "startLine": 45,
        "startChar": 18,
        "endLine": 45,
        "endChar": 31
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1728d644_d3b3002b",
        "filename": "examples/square_functor.h",
        "patchSetId": 16
      },
      "lineNbr": 45,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-12-23T17:31:24Z",
      "side": 1,
      "message": "I think it\u0027s the cleanest naming like this (lower case is fine too). I\u0027m not a big fan of unnecessary pre-/post fixes (_impl _eval _generated). Like this you can type \"#include \"codegen/\"\" in your IDE and directly see all your generated files.",
      "parentUuid": "d5be8934_14321b0d",
      "range": {
        "startLine": 45,
        "startChar": 18,
        "endLine": 45,
        "endChar": 31
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05c6a81b_1c0e027a",
        "filename": "examples/square_functor.h",
        "patchSetId": 16
      },
      "lineNbr": 45,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-12-23T18:07:48Z",
      "side": 1,
      "message": "I do not want to optimize for IDE usage, but I think this raises an interesting point, which we should reason about first.\n\nIs the expected usage here that \n\n1. Generate the code and check it into your source control,\n\nor\n\n(2) Integrate the code generation into your build system? and \n\nI would think about the API and integration differently in these two cases.\n\nmy preference is for (2), but we cannot just assume that cmake is the only build system that will be used, at google we use bazel (an internal variant of it) and there it will definitely be (2), which uses a build rule which is the equivalent to ceres_cost_functor, where this file only \nonly exists as a temporary which is generated everytime build is run (and cached by the underlying build system) and never really visible to the user, and therefore it is really important that we be very clear about what exists and what is generated.",
      "parentUuid": "1728d644_d3b3002b",
      "range": {
        "startLine": 45,
        "startChar": 18,
        "endLine": 45,
        "endChar": 31
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7bc8d91b_dc77151f",
        "filename": "examples/square_functor.h",
        "patchSetId": 16
      },
      "lineNbr": 45,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-12-23T18:47:59Z",
      "side": 1,
      "message": "100% (2) here.",
      "parentUuid": "05c6a81b_1c0e027a",
      "range": {
        "startLine": 45,
        "startChar": 18,
        "endLine": 45,
        "endChar": 31
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eaacb3b4_1593c37f",
        "filename": "include/ceres/codegen/autodiff.h",
        "patchSetId": 16
      },
      "lineNbr": 39,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-12-23T16:34:10Z",
      "side": 1,
      "message": "This file should not be called autodiff.h, it should be called generate_code_for_functor.h.\n\nAutoDiffCodeGenOptions should be renamed to\n\nCodeGeneratorOptions",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 0
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f21fbbfc_b6d50387",
        "filename": "include/ceres/codegen/autodiff.h",
        "patchSetId": 16
      },
      "lineNbr": 39,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-12-23T18:47:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eaacb3b4_1593c37f",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 0
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84c6385c_24c5d5d8",
        "filename": "include/ceres/codegen/autodiff.h",
        "patchSetId": 16
      },
      "lineNbr": 255,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-12-23T16:34:10Z",
      "side": 1,
      "message": "I looked at the generated code, and it reads better if you check for jacobians array being null and call EvaluateResidual and early return rather than saving it for the end.",
      "range": {
        "startLine": 255,
        "startChar": 26,
        "endLine": 255,
        "endChar": 42
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85b7ec91_eda9c819",
        "filename": "include/ceres/codegen/autodiff.h",
        "patchSetId": 16
      },
      "lineNbr": 255,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-12-23T18:47:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "84c6385c_24c5d5d8",
      "range": {
        "startLine": 255,
        "startChar": 26,
        "endLine": 255,
        "endChar": 42
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d28e266b_fe382ae4",
        "filename": "include/ceres/codegen/cost_function.h",
        "patchSetId": 16
      },
      "lineNbr": 41,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-12-23T16:34:10Z",
      "side": 1,
      "message": "why is this conditional? what do we gain from it?",
      "range": {
        "startLine": 41,
        "startChar": 7,
        "endLine": 41,
        "endChar": 20
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "603740a0_61dd4847",
        "filename": "include/ceres/codegen/cost_function.h",
        "patchSetId": 16
      },
      "lineNbr": 41,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-12-23T17:31:24Z",
      "side": 1,
      "message": "- During code generation this type is abstract, because evaluate doesn\u0027t exist yet\n- VariadicEvaluate fails because it thinks this is a cost function",
      "parentUuid": "d28e266b_fe382ae4",
      "range": {
        "startLine": 41,
        "startChar": 7,
        "endLine": 41,
        "endChar": 20
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ef2502e_59b6fa65",
        "filename": "include/ceres/codegen/cost_function.h",
        "patchSetId": 16
      },
      "lineNbr": 41,
      "author": {
        "id": 5002
      },
      "writtenOn": "2019-12-23T18:07:48Z",
      "side": 1,
      "message": "ah,  then this is worth documenting the issue here in detail.",
      "parentUuid": "603740a0_61dd4847",
      "range": {
        "startLine": 41,
        "startChar": 7,
        "endLine": 41,
        "endChar": 20
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae40bdd1_850aa52c",
        "filename": "include/ceres/codegen/cost_function.h",
        "patchSetId": 16
      },
      "lineNbr": 41,
      "author": {
        "id": 6265
      },
      "writtenOn": "2019-12-23T18:47:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0ef2502e_59b6fa65",
      "range": {
        "startLine": 41,
        "startChar": 7,
        "endLine": 41,
        "endChar": 20
      },
      "revId": "321885d79e9175756fafe0c6b663be0b4a52c10a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    }
  ]
}