{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b620fe4f_dba9a9b3",
        "filename": "internal/ceres/block_sparse_matrix.cc",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-05T21:44:29Z",
      "side": 1,
      "message": "you could reserve num_nonzeros() and save on allocations in the loop below.",
      "range": {
        "startLine": 176,
        "startChar": 7,
        "endLine": 176,
        "endChar": 12
      },
      "revId": "5879106ad580a96eee7845492ce53e01d68e2f6a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d15dc00b_acf07edc",
        "filename": "internal/ceres/block_sparse_matrix.cc",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-08-06T00:39:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b620fe4f_dba9a9b3",
      "range": {
        "startLine": 176,
        "startChar": 7,
        "endLine": 176,
        "endChar": 12
      },
      "revId": "5879106ad580a96eee7845492ce53e01d68e2f6a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90228bba_31d679a3",
        "filename": "internal/ceres/block_sparse_matrix.cc",
        "patchSetId": 1
      },
      "lineNbr": 180,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-05T21:44:29Z",
      "side": 1,
      "message": "so there is a subtlety here, which may not be evident.\nthe column blocks may or may not be sorted. so you maybe creating an invalid crs matrix (I think the entries are required to be in increasing order).",
      "range": {
        "startLine": 180,
        "startChar": 27,
        "endLine": 180,
        "endChar": 43
      },
      "revId": "5879106ad580a96eee7845492ce53e01d68e2f6a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1d7f80a_55befb7e",
        "filename": "internal/ceres/block_sparse_matrix.cc",
        "patchSetId": 1
      },
      "lineNbr": 180,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-08-06T00:39:43Z",
      "side": 1,
      "message": "Could you point me to an example of such usage of the column blocks? I can update the documentation and the implementation accordingly.",
      "parentUuid": "90228bba_31d679a3",
      "range": {
        "startLine": 180,
        "startChar": 27,
        "endLine": 180,
        "endChar": 43
      },
      "revId": "5879106ad580a96eee7845492ce53e01d68e2f6a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ff81d88_c0c86004",
        "filename": "internal/ceres/block_sparse_matrix.cc",
        "patchSetId": 1
      },
      "lineNbr": 180,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-06T04:15:01Z",
      "side": 1,
      "message": "actually I am wrong. I mixed up two different things.\n\nThe columns blocks are sorted by their block_ids, this happens inside block_jacobian_writer in CreateJacobian. there is an explicit call to sort there after we populate the cells for each residual block.\n\nhowever there is no guarantee that the position in the values array where the actual values are stored is in that order. this is computed in BuildJacobianLayout and there we try and maximize cache coherency. so landmark jacobians are placed together in memory and then all the non-landmark jacobians.",
      "parentUuid": "f1d7f80a_55befb7e",
      "range": {
        "startLine": 180,
        "startChar": 27,
        "endLine": 180,
        "endChar": 43
      },
      "revId": "5879106ad580a96eee7845492ce53e01d68e2f6a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "701c10ae_5079d75d",
        "filename": "internal/ceres/block_sparse_matrix.cc",
        "patchSetId": 1
      },
      "lineNbr": 180,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-08-06T18:21:42Z",
      "side": 1,
      "message": "Okay, got it. Since this loop makes no assumption about ordering in the values array (it explicitly picks it up from the cell info), this should be correct, I think. Let me know if there are any other edge cases.",
      "parentUuid": "8ff81d88_c0c86004",
      "range": {
        "startLine": 180,
        "startChar": 27,
        "endLine": 180,
        "endChar": 43
      },
      "revId": "5879106ad580a96eee7845492ce53e01d68e2f6a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d58d28b_ba714703",
        "filename": "internal/ceres/triplet_sparse_matrix.cc",
        "patchSetId": 1
      },
      "lineNbr": 198,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-08-05T21:44:29Z",
      "side": 1,
      "message": "why replicate the construction of a CRS matrix here.\njust create a CompressedRowSparseMatrix from the TripletSparseMatrix and use it ToCRSMatrix() method. this is what we do in the ProblemImpl::Evaluate also.",
      "revId": "5879106ad580a96eee7845492ce53e01d68e2f6a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7abc9301_9fe1dd8e",
        "filename": "internal/ceres/triplet_sparse_matrix.cc",
        "patchSetId": 1
      },
      "lineNbr": 198,
      "author": {
        "id": 5135
      },
      "writtenOn": "2022-08-06T00:39:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6d58d28b_ba714703",
      "revId": "5879106ad580a96eee7845492ce53e01d68e2f6a",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}