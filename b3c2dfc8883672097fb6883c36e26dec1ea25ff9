{
  "comments": [
    {
      "key": {
        "uuid": "b99c18d9_b6394e07",
        "filename": "docs/source/nnls_modeling.rst",
        "patchSetId": 5
      },
      "lineNbr": 368,
      "author": {
        "id": 5002
      },
      "writtenOn": "2015-06-15T14:15:11Z",
      "side": 1,
      "message": "Thanks for updating the docs, please also add documentation for NumericDiffOptions.",
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b99c18d9_99ec3e06",
        "filename": "include/ceres/dynamic_numeric_diff_cost_function.h",
        "patchSetId": 5
      },
      "lineNbr": 82,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-06-17T01:16:58Z",
      "side": 1,
      "message": "This change is unfortunate - it will break existing uses. This will lead to people forking Ceres by never updating. Please add an overloaded constructor - even though it is banned by our style guide - to maintain backwards compatibility. The old constructor can simply put the old default step size into the options struct.",
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73f801fb_9b428bf2",
        "filename": "include/ceres/internal/numeric_diff.h",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 5010
      },
      "writtenOn": "2015-07-07T07:06:39Z",
      "side": 1,
      "message": "const reference",
      "range": {
        "startLine": 94,
        "startChar": 12,
        "endLine": 94,
        "endChar": 30
      },
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b99c18d9_1692e25f",
        "filename": "include/ceres/internal/numeric_diff.h",
        "patchSetId": 5
      },
      "lineNbr": 137,
      "author": {
        "id": 5002
      },
      "writtenOn": "2015-06-15T14:15:11Z",
      "side": 1,
      "message": "I am not sure if this code - computation of delta is worth having here, instead of folding them into the corresponding Evaluate methods.\n\nThe computation is not expensive, so I do not see any performance penalty either.\n\nI think the code out of the loop should just be non-method related stuff and everything else method specific should go in the particular evaluation related method call.",
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73f801fb_fb20ef5f",
        "filename": "include/ceres/internal/numeric_diff.h",
        "patchSetId": 5
      },
      "lineNbr": 144,
      "author": {
        "id": 5010
      },
      "writtenOn": "2015-07-07T07:06:39Z",
      "side": 1,
      "message": "the documentation refers to relative_step_size but you are using adaptive_initial_step_size.\n\nalso adaptive seems to be a remanent of the time when the method was called adaptive instead of ridders.",
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73f801fb_db25336e",
        "filename": "include/ceres/internal/numeric_diff.h",
        "patchSetId": 5
      },
      "lineNbr": 146,
      "author": {
        "id": 5010
      },
      "writtenOn": "2015-07-07T07:06:39Z",
      "side": 1,
      "message": "also this depends on the invariant that adaptive_initial_step_size is always greater than sqrt(epsilon). I think you need a max of the two here to be sure.",
      "range": {
        "startLine": 146,
        "startChar": 16,
        "endLine": 146,
        "endChar": 42
      },
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73f801fb_3b0b77df",
        "filename": "include/ceres/internal/numeric_diff.h",
        "patchSetId": 5
      },
      "lineNbr": 151,
      "author": {
        "id": 5010
      },
      "writtenOn": "2015-07-07T07:06:39Z",
      "side": 1,
      "message": "why allocate temp_residuals and residuals here? it seems odd to have it here uninitialized vectors which are passed to these functions and below the thing that gets added to the jacobian matrix is a residual vector.\n\nalso maybe worth using a FixedArray here to save on some memory allocations.",
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b99c18d9_769fe667",
        "filename": "include/ceres/internal/numeric_diff.h",
        "patchSetId": 5
      },
      "lineNbr": 169,
      "author": {
        "id": 5002
      },
      "writtenOn": "2015-06-15T14:15:11Z",
      "side": 1,
      "message": "stack parameters the same way between the two calls.",
      "range": {
        "startLine": 169,
        "startChar": 51,
        "endLine": 169,
        "endChar": 52
      },
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73f801fb_7b15fff2",
        "filename": "include/ceres/internal/numeric_diff.h",
        "patchSetId": 5
      },
      "lineNbr": 184,
      "author": {
        "id": 5010
      },
      "writtenOn": "2015-07-07T07:06:39Z",
      "side": 1,
      "message": "Need a better name for this and the function below, as what they are really doing is just evaluating one column of the jacobian matrix.",
      "range": {
        "startLine": 184,
        "startChar": 14,
        "endLine": 184,
        "endChar": 33
      },
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73f801fb_1b083bdf",
        "filename": "include/ceres/internal/numeric_diff.h",
        "patchSetId": 5
      },
      "lineNbr": 185,
      "author": {
        "id": 5010
      },
      "writtenOn": "2015-07-07T07:06:39Z",
      "side": 1,
      "message": "stack all arguments vertically.",
      "range": {
        "startLine": 185,
        "startChar": 54,
        "endLine": 185,
        "endChar": 55
      },
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73f801fb_5b12c30c",
        "filename": "include/ceres/internal/numeric_diff.h",
        "patchSetId": 5
      },
      "lineNbr": 186,
      "author": {
        "id": 5010
      },
      "writtenOn": "2015-07-07T07:06:39Z",
      "side": 1,
      "message": "The ordering of these parameters is odd. it should be.\n\ncost functor\ninteger parameters\nconstant pointers\nmutable pointers",
      "range": {
        "startLine": 186,
        "startChar": 38,
        "endLine": 186,
        "endChar": 51
      },
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73f801fb_bb3dc780",
        "filename": "include/ceres/internal/numeric_diff.h",
        "patchSetId": 5
      },
      "lineNbr": 189,
      "author": {
        "id": 5010
      },
      "writtenOn": "2015-07-07T07:06:39Z",
      "side": 1,
      "message": "we use const double* instead of double const * in ceres.",
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b99c18d9_190fae6a",
        "filename": "include/ceres/internal/numeric_diff.h",
        "patchSetId": 5
      },
      "lineNbr": 260,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-06-17T01:16:58Z",
      "side": 1,
      "message": "Please stack each parameter instead of putting them on the same line.",
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b99c18d9_59f936c0",
        "filename": "include/ceres/internal/numeric_diff.h",
        "patchSetId": 5
      },
      "lineNbr": 283,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-06-17T01:16:58Z",
      "side": 1,
      "message": "Please reflow this comment block.",
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3219987_88c41709",
        "filename": "include/ceres/internal/numeric_diff.h",
        "patchSetId": 5
      },
      "lineNbr": 340,
      "author": {
        "id": 5010
      },
      "writtenOn": "2015-07-07T07:06:39Z",
      "side": 1,
      "message": "maybe factor is not such a great name for it, since so many things are factors here.",
      "range": {
        "startLine": 340,
        "startChar": 6,
        "endLine": 340,
        "endChar": 12
      },
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3219987_c8ce0f27",
        "filename": "include/ceres/internal/numeric_diff.h",
        "patchSetId": 5
      },
      "lineNbr": 359,
      "author": {
        "id": 5010
      },
      "writtenOn": "2015-07-07T07:06:39Z",
      "side": 1,
      "message": "pull these tests into these convergence tests into their own inlined functions for better readabilty and reuse here and below.",
      "range": {
        "startLine": 359,
        "startChar": 26,
        "endLine": 359,
        "endChar": 27
      },
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3219987_48405f06",
        "filename": "include/ceres/internal/numeric_diff.h",
        "patchSetId": 5
      },
      "lineNbr": 393,
      "author": {
        "id": 5010
      },
      "writtenOn": "2015-07-07T07:06:39Z",
      "side": 1,
      "message": "explicitly compare to zero.",
      "range": {
        "startLine": 393,
        "startChar": 20,
        "endLine": 393,
        "endChar": 43
      },
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "594a3c43_325ab001",
        "filename": "include/ceres/internal/numeric_diff.h",
        "patchSetId": 5
      },
      "lineNbr": 423,
      "author": {
        "id": 5002
      },
      "writtenOn": "2015-06-15T14:15:11Z",
      "side": 1,
      "message": "NumericDiffOptions\u0026",
      "range": {
        "startLine": 423,
        "startChar": 30,
        "endLine": 423,
        "endChar": 31
      },
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b99c18d9_39642a14",
        "filename": "include/ceres/numeric_diff_cost_function.h",
        "patchSetId": 5
      },
      "lineNbr": 196,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-06-17T01:16:58Z",
      "side": 1,
      "message": "Please add a compatibility constructor so that existing code doesn\u0027t break. Include a comment that new users should avoid using the old constructor.",
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b99c18d9_39f6eacf",
        "filename": "include/ceres/numeric_diff_options.h",
        "patchSetId": 5
      },
      "lineNbr": 31,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-06-17T01:16:58Z",
      "side": 1,
      "message": "This comment can get dropped since it\u0027s pretty clear this is the case.",
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b99c18d9_963ed2ea",
        "filename": "include/ceres/numeric_diff_options.h",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 5002
      },
      "writtenOn": "2015-06-15T14:15:11Z",
      "side": 1,
      "message": "Drop\n\"This data structures contains various\"",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 2
      },
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b99c18d9_f633d620",
        "filename": "include/ceres/numeric_diff_options.h",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 5002
      },
      "writtenOn": "2015-06-15T14:15:11Z",
      "side": 1,
      "message": "Just \"Default constructor\" will do.",
      "range": {
        "startLine": 42,
        "startChar": 31,
        "endLine": 42,
        "endChar": 38
      },
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b99c18d9_79007233",
        "filename": "include/ceres/numeric_diff_options.h",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-06-17T01:16:58Z",
      "side": 1,
      "message": "I\u0027d argue this comment can get dropped entirely; it doesn\u0027t add value.",
      "parentUuid": "b99c18d9_f633d620",
      "range": {
        "startLine": 42,
        "startChar": 31,
        "endLine": 42,
        "endChar": 38
      },
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b99c18d9_d6385a00",
        "filename": "include/ceres/numeric_diff_options.h",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 5002
      },
      "writtenOn": "2015-06-15T14:15:11Z",
      "side": 1,
      "message": "max_num_adaptive_extrapolations.",
      "range": {
        "startLine": 46,
        "startChar": 4,
        "endLine": 46,
        "endChar": 31
      },
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b99c18d9_364efe8b",
        "filename": "include/ceres/numeric_diff_options.h",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 5002
      },
      "writtenOn": "2015-06-15T14:15:11Z",
      "side": 1,
      "message": "these options are named adaptive, but the algorithm is ridders. is this still the best naming?\n\nalso does adding adaptive as the prefix really help?",
      "range": {
        "startLine": 47,
        "startChar": 4,
        "endLine": 47,
        "endChar": 20
      },
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "594a3c43_f2f2e894",
        "filename": "include/ceres/numeric_diff_options.h",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 5002
      },
      "writtenOn": "2015-06-15T14:15:11Z",
      "side": 1,
      "message": "how does this relate to relative_step_size above?\nalso from the explanation it sounds that the magnitude of this number is actually relative.  Should be named appropriately.",
      "range": {
        "startLine": 65,
        "startChar": 5,
        "endLine": 65,
        "endChar": 7
      },
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b99c18d9_592016d2",
        "filename": "include/ceres/numeric_diff_options.h",
        "patchSetId": 5
      },
      "lineNbr": 66,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-06-17T01:16:58Z",
      "side": 1,
      "message": "adaptive_relative_initial_step_size",
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "594a3c43_52e2d4c1",
        "filename": "include/ceres/numeric_diff_options.h",
        "patchSetId": 5
      },
      "lineNbr": 74,
      "author": {
        "id": 5002
      },
      "writtenOn": "2015-06-15T14:15:11Z",
      "side": 1,
      "message": "Is it worth providing the actual expression for checking convergence here? it gives people something to reason with.",
      "range": {
        "startLine": 74,
        "startChar": 9,
        "endLine": 74,
        "endChar": 25
      },
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b99c18d9_d92b66ba",
        "filename": "include/ceres/numeric_diff_options.h",
        "patchSetId": 5
      },
      "lineNbr": 74,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-06-17T01:16:58Z",
      "side": 1,
      "message": "I agree; what is the criterion?",
      "parentUuid": "594a3c43_52e2d4c1",
      "range": {
        "startLine": 74,
        "startChar": 9,
        "endLine": 74,
        "endChar": 25
      },
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "594a3c43_f2a90869",
        "filename": "include/ceres/numeric_diff_options.h",
        "patchSetId": 5
      },
      "lineNbr": 82,
      "author": {
        "id": 5002
      },
      "writtenOn": "2015-06-15T14:15:11Z",
      "side": 1,
      "message": "worth explaining some more here.\nwhat is the error being minimized?",
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b99c18d9_b9301a28",
        "filename": "include/ceres/numeric_diff_options.h",
        "patchSetId": 5
      },
      "lineNbr": 82,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-06-17T01:16:58Z",
      "side": 1,
      "message": "The comment is confusing. Consider naming with \u0027use\u0027?\n\nuse_adaptive_relative_error?\n\nAlso consider an enum - personally I view most booleans as antipatterns since the use is typically a 2-value enum. Function calls with enum args instead of booleans are easier to read also:\n\n  foo(a, b, METHOD_A) is better than\n  foo(a, b, false)",
      "parentUuid": "594a3c43_f2a90869",
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b99c18d9_7917d275",
        "filename": "include/ceres/types.h",
        "patchSetId": 5
      },
      "lineNbr": 409,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-06-17T01:16:58Z",
      "side": 1,
      "message": "Somewhere there needs to be some guidance on how to select these methods, aimed toward an applications audience.",
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "594a3c43_92819cd8",
        "filename": "internal/ceres/gradient_checking_cost_function.cc",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 5002
      },
      "writtenOn": "2015-06-15T14:15:11Z",
      "side": 1,
      "message": "This is fine for now as there are users of this API. But going forward it maybe worth exposing the full power of numeric diff going forward.\n\nAtleast worth adding a TODO here.",
      "range": {
        "startLine": 96,
        "startChar": 12,
        "endLine": 96,
        "endChar": 30
      },
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b99c18d9_b93e5aea",
        "filename": "internal/ceres/gradient_checking_cost_function.cc",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-06-17T01:16:58Z",
      "side": 1,
      "message": "Or just add a constructor to expose the new functionality.",
      "parentUuid": "594a3c43_92819cd8",
      "range": {
        "startLine": 96,
        "startChar": 12,
        "endLine": 96,
        "endChar": 30
      },
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b99c18d9_1934ce08",
        "filename": "internal/ceres/numeric_diff_cost_function_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 50,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-06-17T01:16:58Z",
      "side": 1,
      "message": "Please revert the change to make everything fixturized. It\u0027s an unneeded dependency for the majority of these tests.",
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b99c18d9_394b8a7c",
        "filename": "internal/ceres/numeric_diff_cost_function_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 54,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-06-17T01:16:58Z",
      "side": 1,
      "message": "Please make the RandomizedCostFunctor do this instead - do we want truly random cost functions? I think we always want the same seed in practice.",
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b99c18d9_9948be7e",
        "filename": "internal/ceres/numeric_diff_cost_function_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 239,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-06-17T01:16:58Z",
      "side": 1,
      "message": "I don\u0027t think this needs the fixture either.",
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b99c18d9_79451262",
        "filename": "internal/ceres/numeric_diff_cost_function_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 251,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-06-17T01:16:58Z",
      "side": 1,
      "message": "Remove fixture (and remove postfixed \"Test\" name).",
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b99c18d9_d9a086b0",
        "filename": "internal/ceres/numeric_diff_cost_function_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 266,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-06-17T01:16:58Z",
      "side": 1,
      "message": "Perhaps explain why 1000 is chosen.",
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "594a3c43_9268bca0",
        "filename": "internal/ceres/numeric_diff_test_utils.cc",
        "patchSetId": 5
      },
      "lineNbr": 176,
      "author": {
        "id": 5002
      },
      "writtenOn": "2015-06-15T14:15:11Z",
      "side": 1,
      "message": "any reason for this particular magic number?",
      "range": {
        "startLine": 176,
        "startChar": 30,
        "endLine": 176,
        "endChar": 31
      },
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b99c18d9_b9a5babe",
        "filename": "internal/ceres/numeric_diff_test_utils.h",
        "patchSetId": 5
      },
      "lineNbr": 116,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-06-17T01:16:58Z",
      "side": 1,
      "message": "Fix the seed",
      "revId": "b3c2dfc8883672097fb6883c36e26dec1ea25ff9",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    }
  ]
}