{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d26a2f9b_2e1c6812",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2024-05-07T00:23:44Z",
      "side": 1,
      "message": "Mark I will take a detailed look either later tonight or tomorrow morning.",
      "tag": "mailMessageId\u003d\u003cCABqdRUCikwPi5yU3vtFSEogFgR994tC\u003ddhH5s-p-bB6o9n-J7A@mail.gmail.com\u003e",
      "revId": "799da46f39e4f64e1906bcf075ad86d78f22fddd",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d635856_70ae07f8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 3416472
      },
      "writtenOn": "2024-05-07T17:44:57Z",
      "side": 1,
      "message": "Nice patch, Mark!\nWe have a internal patch that integrates cudss into ceres, I compared my impl with yours and found following discrepancy",
      "revId": "799da46f39e4f64e1906bcf075ad86d78f22fddd",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d217a9f6_54e701a7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2024-05-07T18:25:52Z",
      "side": 1,
      "message": "thank you for looking Di.",
      "parentUuid": "8d635856_70ae07f8",
      "revId": "799da46f39e4f64e1906bcf075ad86d78f22fddd",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c0a785d_192c4c4d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 6667
      },
      "writtenOn": "2024-05-07T20:14:58Z",
      "side": 1,
      "message": "Thanks for review, Di!",
      "parentUuid": "d217a9f6_54e701a7",
      "revId": "799da46f39e4f64e1906bcf075ad86d78f22fddd",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8311bd1e_4787073c",
        "filename": "internal/ceres/cuda_sparse_cholesky.cc",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 3416472
      },
      "writtenOn": "2024-05-07T17:44:57Z",
      "side": 1,
      "message": "maybe add a few macros here to simplify error handling? e.g.\n\n```\n#define CUDSS_STATUS_CHECK(IN)                               \\\n  {                                                          \\\n    cudssStatus_t cudss_error \u003d IN;                          \\\n    CHECK(cudss_error \u003d\u003d CUDSS_STATUS_SUCCESS)               \\\n        \u003c\u003c \"Got error: \" \u003c\u003c cuDssErrorToString(cudss_error); \\\n  }\n\n#define CUDSS_STATUS_OK_OR_RETURN(IN, additional_message)          \\\n  {                                                                \\\n    cudssStatus_t cudss_error \u003d IN;                                \\\n    if (cudss_error !\u003d CUDSS_STATUS_SUCCESS) {                     \\\n      *message \u003d std::string(additional_message) +                 \\\n                 \" Got error: \" + cuDssErrorToString(cudss_error); \\\n      return LinearSolverTerminationType::FAILURE;                 \\\n    }                                                              \\\n  }\n\n#define CUDA_STATUS_OK_OR_RETURN(IN, message_out)      \\\n  {                                                    \\\n    if (IN !\u003d cudaSuccess) {                           \\\n      *message \u003d message_out;                          \\\n      return LinearSolverTerminationType::FATAL_ERROR; \\\n    }                                                  \\\n  }\n```\n\nnot sure though if that matches with ceres\u0027s coding standard.",
      "revId": "799da46f39e4f64e1906bcf075ad86d78f22fddd",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f826171_4c00c32e",
        "filename": "internal/ceres/cuda_sparse_cholesky.cc",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 5002
      },
      "writtenOn": "2024-05-07T18:25:52Z",
      "side": 1,
      "message": "I am open to using macros if they are restricted to the file and the intent is clear.",
      "parentUuid": "8311bd1e_4787073c",
      "revId": "799da46f39e4f64e1906bcf075ad86d78f22fddd",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2e3f112_03639fc8",
        "filename": "internal/ceres/cuda_sparse_cholesky.cc",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 6667
      },
      "writtenOn": "2024-05-07T20:14:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4f826171_4c00c32e",
      "revId": "799da46f39e4f64e1906bcf075ad86d78f22fddd",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5477173c_15fd8899",
        "filename": "internal/ceres/cuda_sparse_cholesky.cc",
        "patchSetId": 2
      },
      "lineNbr": 209,
      "author": {
        "id": 3416472
      },
      "writtenOn": "2024-05-07T17:44:57Z",
      "side": 1,
      "message": "just curious why do you need this copy here? why not directly copy the input lhs to cuda?",
      "range": {
        "startLine": 209,
        "startChar": 0,
        "endLine": 209,
        "endChar": 69
      },
      "revId": "799da46f39e4f64e1906bcf075ad86d78f22fddd",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b236402_9a0dd332",
        "filename": "internal/ceres/cuda_sparse_cholesky.cc",
        "patchSetId": 2
      },
      "lineNbr": 209,
      "author": {
        "id": 6667
      },
      "writtenOn": "2024-05-07T20:14:58Z",
      "side": 1,
      "message": "My understanding of memory transfers between host and device is following: in order to perform such transfer, virtual memory page, which residence in physical RAM is controlled by OS\u0027s \"virtual memory manager\", should by blocked from \"automatic\" eviction to lower tier storage (disk). Such operation (pinning) enables usage of DMA to perform transfers over PCI bus.\n\nI believe that cudaMemcpy() is implemented in such a way, that if invoked with a source that is not pinned, additional copy to staging host pinned buffer is performed, which is then used for actual transfer to device.\n\nSo, if we do not expect here that user-provided lhs-\u003erows() is pointing to a pinned memory region (btw, it is reasonable to consider such change to the provider of lhs-\u003erows()), we are bound to perform such copy-to-pinned-buffer, either implicitly (under the hood of cudaMemcpy()) or explicitly. I opted in to explicit option.\n\nAnother option would be to call cudaHostRegister() on lhs-\u003erows(), but i believe that such option would be slower in case if lhs-\u003erows() is not the same between calls to Solve().\n\nPlease, correct me if i understand cudaMemcpy() behavior and its performance implications erroneously, i am all for making this part as simple as possible for understanding/maintaining.",
      "parentUuid": "5477173c_15fd8899",
      "range": {
        "startLine": 209,
        "startChar": 0,
        "endLine": 209,
        "endChar": 69
      },
      "revId": "799da46f39e4f64e1906bcf075ad86d78f22fddd",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "073165a1_14655db9",
        "filename": "internal/ceres/cuda_sparse_cholesky.cc",
        "patchSetId": 2
      },
      "lineNbr": 209,
      "author": {
        "id": 3415050
      },
      "writtenOn": "2024-05-08T05:44:05Z",
      "side": 1,
      "message": "Let me double check with an expert on this. But if we leave the explicit copy I\u0027d suggest making an extensive comment for future references as to why this copy is there.\nMy immediate take would be to leave it to cudaMemcpy.",
      "parentUuid": "5b236402_9a0dd332",
      "range": {
        "startLine": 209,
        "startChar": 0,
        "endLine": 209,
        "endChar": 69
      },
      "revId": "799da46f39e4f64e1906bcf075ad86d78f22fddd",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8754417b_903d062d",
        "filename": "internal/ceres/cuda_sparse_cholesky.cc",
        "patchSetId": 2
      },
      "lineNbr": 209,
      "author": {
        "id": 3415050
      },
      "writtenOn": "2024-05-08T20:19:12Z",
      "side": 1,
      "message": "I\u0027ve talked to one of the experts. While your understanding is correct, it is usually recommended to rely on cudaMemcpy to handle the necessary transfers under the hood.\nI am still learning my way around ceres so I hope that it is possible to remove these pinned buffers without affecting the amount of transfers (so that just these explicit copies are replaced with the implicit ones)?\nOne other thing: I haven\u0027t checked but I suspect cudss can operate on the device accessible pointers for the input matrix, so maybe even the memcpy is not needed as the required transfers will be done with cuda calls inside cudss.",
      "parentUuid": "073165a1_14655db9",
      "range": {
        "startLine": 209,
        "startChar": 0,
        "endLine": 209,
        "endChar": 69
      },
      "revId": "799da46f39e4f64e1906bcf075ad86d78f22fddd",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "432b9f15_5007a4e6",
        "filename": "internal/ceres/cuda_sparse_cholesky.cc",
        "patchSetId": 2
      },
      "lineNbr": 209,
      "author": {
        "id": 6667
      },
      "writtenOn": "2024-05-09T23:27:11Z",
      "side": 1,
      "message": "\u003e While your understanding is correct, it is usually recommended to rely on cudaMemcpy to handle the necessary transfers under the hood.\n\nI measured both variants and it seems that calling cudaMemcpy directly is more performant. My guess is that this is because cudaMemcpy for unpinned input implemented as a two-stage pipeline which overlaps input-\u003epinned and pinned-\u003edevice transfers for chunks of input (i guess such behavior should be observable via PCI TX/RX metrics, but nsys not letting me to collect such metrics on my laptop gpu, so it would be nice to get a confirmation for that). In case of single precision, we still need to perform a conversion of lhs, rhs and solution values, such conversion\u0026transfer could be optimized in similar fashion.\n\nOne more caveat regarding cudaMemcpy from unpinned buffer is that it is synchronous wrt other streams, but in current context i don\u0027t see any significant optimizations which would require to overlap data transfers with kernel compute (one could save a bit by transferring initial lhs values during call to analyze, but it seems to be marginal).\n\n\u003e One other thing: I haven\u0027t checked but I suspect cudss can operate on the device accessible pointers for the input matrix\n\nI am not sure that i understood you correctly. Documentation on cudssMatrixCreate{Dn, Csr} requires \"values\" to be a device pointer, hence the need to manually manage the underlying buffer. But even if it could accept a host pointer and manage device buffers internally, i think that would be less performant due to the need to create/destroy cudssMatrix_t objects for each Factorize/Solve invocation.",
      "parentUuid": "8754417b_903d062d",
      "range": {
        "startLine": 209,
        "startChar": 0,
        "endLine": 209,
        "endChar": 69
      },
      "revId": "799da46f39e4f64e1906bcf075ad86d78f22fddd",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "832a19ea_67ee6586",
        "filename": "internal/ceres/cuda_sparse_cholesky.cc",
        "patchSetId": 2
      },
      "lineNbr": 209,
      "author": {
        "id": 6667
      },
      "writtenOn": "2024-05-09T23:32:28Z",
      "side": 1,
      "message": "\u003e need to create/destroy cudssMatrix_t objects for each Factorize/Solve invocation.\n\nActually, it seems like cudssMatrixSetValues could\u0027ve been used in such scenario.",
      "parentUuid": "432b9f15_5007a4e6",
      "range": {
        "startLine": 209,
        "startChar": 0,
        "endLine": 209,
        "endChar": 69
      },
      "revId": "799da46f39e4f64e1906bcf075ad86d78f22fddd",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf1a5702_a3bb0bab",
        "filename": "internal/ceres/cuda_sparse_cholesky.cc",
        "patchSetId": 2
      },
      "lineNbr": 209,
      "author": {
        "id": 3415050
      },
      "writtenOn": "2024-05-10T06:18:23Z",
      "side": 1,
      "message": "You are right about the docs, we decided originally to be cautious about what we request from the user data but in fact I think device accessibility is enough. Anyway, my remark about this is a bit off the topic.\nI like how the latest patch looks with less explicit copies.\nIf only the matrix values are changing, yes, using cudssMatrixSetValues should be preferred to cudssMatrixCreate/Destroy.\nOverall, the cudssMatrix_t is quite a shallow object, so the overhead of deletion/creation mostly comes to the interaction with OS to allocate a small piece of host memory for the internal structure.",
      "parentUuid": "832a19ea_67ee6586",
      "range": {
        "startLine": 209,
        "startChar": 0,
        "endLine": 209,
        "endChar": 69
      },
      "revId": "799da46f39e4f64e1906bcf075ad86d78f22fddd",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "954b31ee_69661666",
        "filename": "internal/ceres/cuda_sparse_cholesky.cc",
        "patchSetId": 2
      },
      "lineNbr": 209,
      "author": {
        "id": 6667
      },
      "writtenOn": "2024-05-10T18:14:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cf1a5702_a3bb0bab",
      "range": {
        "startLine": 209,
        "startChar": 0,
        "endLine": 209,
        "endChar": 69
      },
      "revId": "799da46f39e4f64e1906bcf075ad86d78f22fddd",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fce8cb0a_82b9dc94",
        "filename": "internal/ceres/cuda_sparse_cholesky.cc",
        "patchSetId": 2
      },
      "lineNbr": 260,
      "author": {
        "id": 3416472
      },
      "writtenOn": "2024-05-07T17:44:57Z",
      "side": 1,
      "message": "the input lhs has can have different storage type, I would suggest doing following to be on the safe side\n\n\n                           lhs-\u003estorage_type() \u003d\u003d\n                                   ceres::internal::CompressedRowSparseMatrix::\n                                       StorageType::UPPER_TRIANGULAR\n                               ? CUDSS_MVIEW_UPPER\n                               : CUDSS_MVIEW_LOWER,",
      "range": {
        "startLine": 260,
        "startChar": 39,
        "endLine": 260,
        "endChar": 56
      },
      "revId": "799da46f39e4f64e1906bcf075ad86d78f22fddd",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ebe8bce_5a3b946e",
        "filename": "internal/ceres/cuda_sparse_cholesky.cc",
        "patchSetId": 2
      },
      "lineNbr": 260,
      "author": {
        "id": 6667
      },
      "writtenOn": "2024-05-07T20:14:58Z",
      "side": 1,
      "message": "I believe that by design of SparseCholesky its users are expected to respect the storage type returned by a call to StorageType(). So in this particular place, having lhs-\u003estorage_type() !\u003d CudaSparseCholeskyImpl\u003c\u003e::StorageType() (which evaluates to CompressedRowSparseMatrix::StorageType::LOWER_TRIANGULAR) is an error condition. We probably should add an explicit check for such invariant. Sameer wdyt?",
      "parentUuid": "fce8cb0a_82b9dc94",
      "range": {
        "startLine": 260,
        "startChar": 39,
        "endLine": 260,
        "endChar": 56
      },
      "revId": "799da46f39e4f64e1906bcf075ad86d78f22fddd",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cb589cc_047e7e58",
        "filename": "internal/ceres/cuda_sparse_cholesky.cc",
        "patchSetId": 2
      },
      "lineNbr": 260,
      "author": {
        "id": 5002
      },
      "writtenOn": "2024-05-14T17:43:57Z",
      "side": 1,
      "message": "You are right, SparseCholesky tells the user what kind of storage it expects from the user. The user is expected to respect that.",
      "parentUuid": "2ebe8bce_5a3b946e",
      "range": {
        "startLine": 260,
        "startChar": 39,
        "endLine": 260,
        "endChar": 56
      },
      "revId": "799da46f39e4f64e1906bcf075ad86d78f22fddd",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b37e6af2_346ffcc2",
        "filename": "internal/ceres/cuda_sparse_cholesky.cc",
        "patchSetId": 2
      },
      "lineNbr": 308,
      "author": {
        "id": 3416472
      },
      "writtenOn": "2024-05-07T17:44:57Z",
      "side": 1,
      "message": "cudss_config_",
      "range": {
        "startLine": 308,
        "startChar": 16,
        "endLine": 308,
        "endChar": 29
      },
      "revId": "799da46f39e4f64e1906bcf075ad86d78f22fddd",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4965c798_bc9504f9",
        "filename": "internal/ceres/cuda_sparse_cholesky.cc",
        "patchSetId": 2
      },
      "lineNbr": 308,
      "author": {
        "id": 6667
      },
      "writtenOn": "2024-05-07T20:14:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b37e6af2_346ffcc2",
      "range": {
        "startLine": 308,
        "startChar": 16,
        "endLine": 308,
        "endChar": 29
      },
      "revId": "799da46f39e4f64e1906bcf075ad86d78f22fddd",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a36eb14_acd546cf",
        "filename": "internal/ceres/cuda_sparse_cholesky.cc",
        "patchSetId": 2
      },
      "lineNbr": 309,
      "author": {
        "id": 3416472
      },
      "writtenOn": "2024-05-07T17:44:57Z",
      "side": 1,
      "message": "cudss_data_",
      "range": {
        "startLine": 309,
        "startChar": 14,
        "endLine": 309,
        "endChar": 25
      },
      "revId": "799da46f39e4f64e1906bcf075ad86d78f22fddd",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ee72e3b1_847ea3dd",
        "filename": "internal/ceres/cuda_sparse_cholesky.cc",
        "patchSetId": 2
      },
      "lineNbr": 309,
      "author": {
        "id": 6667
      },
      "writtenOn": "2024-05-07T20:14:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8a36eb14_acd546cf",
      "range": {
        "startLine": 309,
        "startChar": 14,
        "endLine": 309,
        "endChar": 25
      },
      "revId": "799da46f39e4f64e1906bcf075ad86d78f22fddd",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7334e264_ed67d4aa",
        "filename": "internal/ceres/cuda_sparse_cholesky.cc",
        "patchSetId": 2
      },
      "lineNbr": 318,
      "author": {
        "id": 3416472
      },
      "writtenOn": "2024-05-07T17:44:57Z",
      "side": 1,
      "message": "I don\u0027t see how those pinned host buffer is useful if the data is eventually copied to CudaBuffer",
      "range": {
        "startLine": 314,
        "startChar": 0,
        "endLine": 318,
        "endChar": 36
      },
      "revId": "799da46f39e4f64e1906bcf075ad86d78f22fddd",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11a1dfaf_3efc7f13",
        "filename": "internal/ceres/cuda_sparse_cholesky.cc",
        "patchSetId": 2
      },
      "lineNbr": 318,
      "author": {
        "id": 6667
      },
      "writtenOn": "2024-05-07T20:18:36Z",
      "side": 1,
      "message": "https://ceres-solver-review.googlesource.com/c/ceres-solver/+/25800/comment/5477173c_15fd8899/\n\nAlso, in case if single precision is requested (via template parameter \"Scalar\") we need to perform conversions from/to double, which requires us to have some buffer.",
      "parentUuid": "7334e264_ed67d4aa",
      "range": {
        "startLine": 314,
        "startChar": 0,
        "endLine": 318,
        "endChar": 36
      },
      "revId": "799da46f39e4f64e1906bcf075ad86d78f22fddd",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f87dd6e_35863da5",
        "filename": "internal/ceres/cuda_sparse_cholesky.cc",
        "patchSetId": 2
      },
      "lineNbr": 318,
      "author": {
        "id": 6667
      },
      "writtenOn": "2024-05-10T18:14:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "11a1dfaf_3efc7f13",
      "range": {
        "startLine": 314,
        "startChar": 0,
        "endLine": 318,
        "endChar": 36
      },
      "revId": "799da46f39e4f64e1906bcf075ad86d78f22fddd",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}