{
  "comments": [
    {
      "key": {
        "uuid": "AAAIlH///u0\u003d",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 5005
      },
      "writtenOn": "2012-08-17T18:10:19Z",
      "side": 1,
      "message": "This needs some explanation.",
      "revId": "15ce80677062301a4cfca289529dbd34b02d78f3",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAInH///1g\u003d",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 1
      },
      "lineNbr": 192,
      "author": {
        "id": 5015
      },
      "writtenOn": "2012-08-17T18:00:03Z",
      "side": 1,
      "message": "1. Is the \u0026 in T \u0026cos_theta style-conformant?\n2. I don\u0027t get it. I see that it is correct, but why is it numerically better than the previous version? In particular, when sin_squared_theta ~ 1, the cancellation in the x term looks bad to me. When exactly did the previous method fail? There was the possibility of a near-underflow of sin_squared_theta, in which case the computed values would have been wrong. In this case sin_theta would have been underestimated and therefore theta2 / sin_theta could have become larger than pi / ||(q1,q2,q3)||.\n\nI think the proper fix for this is to use the else branch a lot earlier. sin x is numerically equal to x roughly when x^2 \u003c machine epsilon, which means |x| ~ 1e-9. Make that |x| \u003c 1e-15 if you want and it\u0027s still way above critical regions where underflow happens.\n\nUntested suggested fix:\nl.186: if (std::abs(sin_squared_theta) \u003c 1e-30) {",
      "revId": "15ce80677062301a4cfca289529dbd34b02d78f3",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAInH///1U\u003d",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 1
      },
      "lineNbr": 192,
      "author": {
        "id": 5015
      },
      "writtenOn": "2012-08-17T18:19:32Z",
      "side": 1,
      "message": "Ok, sorry, my previous reply was too quick. I now understand why the above works.\nAs sin_theta is always positive, atan2 will return a value between 0 and pi. So by design theta will be between 0 and 2*pi. Isn\u0027t it more straight-forward to use the slightly wasteful atan2(sin(theta2), cos(theta2)) construct in this case? (Or any other method to normalize the angle)",
      "parentUuid": "AAAInH///1g\u003d",
      "revId": "15ce80677062301a4cfca289529dbd34b02d78f3",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAInH///1M\u003d",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 1
      },
      "lineNbr": 192,
      "author": {
        "id": 5015
      },
      "writtenOn": "2012-08-17T18:51:48Z",
      "side": 1,
      "message": "Whew, finally. Ok, I agree that two atan2\u0027s are not nice either.\nHow about the following:\n\nLet s \u003d sin_theta, c \u003d cos_theta.\n\nWe want to compute the normalized angle -pi \u003c nrm(2*theta) \u003c\u003d pi.\n\nAs 0 \u003c\u003d theta \u003c\u003d pi, nrm(2*theta) !\u003d 2*theta iff c \u003c 0.\n\nIn that case nrm(2*theta) \u003d 2*theta - 2*pi \u003d 2*(theta - pi).\n\nBut (theta - pi) \u003d atan2(-s, -c)\n\nSo in total:\n\nif (cos_theta \u003c 0) {\n\ntheta2 \u003d 2 * atan2(-sin_theta, -cos_theta);\n\n} else {\n\ntheta2 \u003d 2 * atan2(sin_theta, cos_theta);\n\n}\n\nshould work.\n\nAgain, sorry for not reading carefully enough.",
      "parentUuid": "AAAInH///1U\u003d",
      "revId": "15ce80677062301a4cfca289529dbd34b02d78f3",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAIk3///p0\u003d",
        "filename": "include/ceres/rotation.h",
        "patchSetId": 1
      },
      "lineNbr": 192,
      "author": {
        "id": 5002
      },
      "writtenOn": "2012-08-17T20:32:45Z",
      "side": 1,
      "message": "This is a simpler solution, fewer arithmetic operations.\nI like it.  I will go ahead and update the CL with this.",
      "parentUuid": "AAAInH///1M\u003d",
      "revId": "15ce80677062301a4cfca289529dbd34b02d78f3",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    }
  ]
}