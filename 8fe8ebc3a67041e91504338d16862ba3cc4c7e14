{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f906dee5_0ef90d4d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-18T23:53:20Z",
      "side": 1,
      "message": "This requires some care. I think it is relatively straightforward to say that instances of loss functions and manifolds should not be inherited from. \nWhat I am less sure about is whether AutoDiffCostFunction should also prevent inheritence. I think it should but I am curious what you guys think.",
      "revId": "8fe8ebc3a67041e91504338d16862ba3cc4c7e14",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59f672c9_90b69362",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-22T12:09:04Z",
      "side": 1,
      "message": "As a minor remark, I would note in the documentation that in order to extend existing manifold implementations one should derive from Manifold directly and delegate calls to implemented interface methods to manifold implementations instantiated as class members (delegation pattern). This also allows straightforward composition of manifolds if desired.",
      "revId": "8fe8ebc3a67041e91504338d16862ba3cc4c7e14",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56612ae0_0676025d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-22T13:38:48Z",
      "side": 1,
      "message": "that seems like general advice that would apply more broadly not just to manifolds. I am not sure what the best place to put it is.",
      "parentUuid": "59f672c9_90b69362",
      "revId": "8fe8ebc3a67041e91504338d16862ba3cc4c7e14",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d582b3fb_fb8f68da",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-22T19:07:00Z",
      "side": 1,
      "message": "That\u0027s true. Tips \u0026 tricks is probably a good candidate.",
      "parentUuid": "56612ae0_0676025d",
      "revId": "8fe8ebc3a67041e91504338d16862ba3cc4c7e14",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "09977e0c_40d6ba5c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-02-25T16:39:27Z",
      "side": 1,
      "message": "LGTM.  I think we should make AutoDiffCostFunction and its ilk final, as we\u0027re certainly not expecting users to derive from them, and if they *really* need to then can inherit and aggregate.  However, for almost all users who won\u0027t, the performance improvements from possible devirtualization would be beneficial.",
      "revId": "8fe8ebc3a67041e91504338d16862ba3cc4c7e14",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}