{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6137a6b1_5d9c27f7",
        "filename": "internal/ceres/cuda_kernels.cu.cc",
        "patchSetId": 3
      },
      "lineNbr": 194,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-05-13T19:49:57Z",
      "side": 1,
      "message": "shouldn\u0027t this be row_nnz_e and row_nnz_f respectively?",
      "range": {
        "startLine": 194,
        "startChar": 5,
        "endLine": 194,
        "endChar": 11
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f09c42d_16e9fd38",
        "filename": "internal/ceres/cuda_kernels.cu.cc",
        "patchSetId": 3
      },
      "lineNbr": 194,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-05-14T01:21:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6137a6b1_5d9c27f7",
      "range": {
        "startLine": 194,
        "startChar": 5,
        "endLine": 194,
        "endChar": 11
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74979ff2_f69678a5",
        "filename": "internal/ceres/cuda_kernels.cu.cc",
        "patchSetId": 3
      },
      "lineNbr": 311,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-05-13T19:49:57Z",
      "side": 1,
      "message": "row_nnz_e and row_nnz_f",
      "range": {
        "startLine": 311,
        "startChar": 5,
        "endLine": 311,
        "endChar": 11
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d1c9b0c2_23030085",
        "filename": "internal/ceres/cuda_kernels.cu.cc",
        "patchSetId": 3
      },
      "lineNbr": 311,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-05-14T01:21:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "74979ff2_f69678a5",
      "range": {
        "startLine": 311,
        "startChar": 5,
        "endLine": 311,
        "endChar": 11
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfef34d6_525ea44c",
        "filename": "internal/ceres/cuda_kernels.cu.cc",
        "patchSetId": 3
      },
      "lineNbr": 536,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-05-13T19:49:57Z",
      "side": 1,
      "message": "same question about offsets here and below, why do we need an offset? why not have the caller send you a permutation array which has been offsetted.",
      "range": {
        "startLine": 536,
        "startChar": 12,
        "endLine": 536,
        "endChar": 20
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb8384e3_5402d2d0",
        "filename": "internal/ceres/cuda_kernels.cu.cc",
        "patchSetId": 3
      },
      "lineNbr": 536,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-05-14T01:21:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dfef34d6_525ea44c",
      "range": {
        "startLine": 536,
        "startChar": 12,
        "endLine": 536,
        "endChar": 20
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9387fb6e_00ddc59a",
        "filename": "internal/ceres/cuda_kernels.cu.cc",
        "patchSetId": 3
      },
      "lineNbr": 567,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-05-13T19:49:57Z",
      "side": 1,
      "message": "why pass an offset at all? why not have the caller send an offsetted permutation? isn\u0027t that simpler?",
      "range": {
        "startLine": 567,
        "startChar": 21,
        "endLine": 567,
        "endChar": 32
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed8182d3_2c38c97d",
        "filename": "internal/ceres/cuda_kernels.cu.cc",
        "patchSetId": 3
      },
      "lineNbr": 567,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-05-14T01:21:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9387fb6e_00ddc59a",
      "range": {
        "startLine": 567,
        "startChar": 21,
        "endLine": 567,
        "endChar": 32
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c668e924_d20b8192",
        "filename": "internal/ceres/cuda_kernels.cu.cc",
        "patchSetId": 3
      },
      "lineNbr": 569,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-05-13T19:49:57Z",
      "side": 1,
      "message": "random idea, why not have the permutation just have indices into the the crs_values_e and crs_values_f arrays ? \n\nthat way this just becomes\n\n\n*permutation[value_id] \u003d value_sparse_values[value_id] \n\nno need for a conditional inside the kernel, just a pointer lookup.",
      "range": {
        "startLine": 569,
        "startChar": 4,
        "endLine": 569,
        "endChar": 16
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca3ce776_d018d44c",
        "filename": "internal/ceres/cuda_kernels.cu.cc",
        "patchSetId": 3
      },
      "lineNbr": 569,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-05-14T01:21:21Z",
      "side": 1,
      "message": "With 32-bit indices we have 8 + 4 + 4 \u003d 16 bytes per non-zero (value + column index + permutation index); that is 33% more than plain crs matrix.\n\nWith 64-bit pointers for permutation we will spend 66% more memory than plain crs matrix.\n\nWith the largest memory available on [consumer] gpu (24GB) there still will be problems that are too large to fit into gpu memory, but can be solved by cpu solver (with 32-bit signed indices). This makes me want to put efforts into minimization of memory consumption.\n\n\nThis routine is \"too fast\" actually (order of magnitude faster than the transfer from host [even excluding copy to pinned memory]: 16us vs 530us).",
      "parentUuid": "c668e924_d20b8192",
      "range": {
        "startLine": 569,
        "startChar": 4,
        "endLine": 569,
        "endChar": 16
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f2a4d54_2c28bfad",
        "filename": "internal/ceres/cuda_kernels.cu.cc",
        "patchSetId": 3
      },
      "lineNbr": 569,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-07-14T01:03:38Z",
      "side": 1,
      "message": "Explicit permutation is not stored now",
      "parentUuid": "ca3ce776_d018d44c",
      "range": {
        "startLine": 569,
        "startChar": 4,
        "endLine": 569,
        "endChar": 16
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2f2c270_3cbdb174",
        "filename": "internal/ceres/cuda_kernels.cu.cc",
        "patchSetId": 3
      },
      "lineNbr": 592,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-05-13T19:49:57Z",
      "side": 1,
      "message": "this file is starting to get quite large and complicated. I think we should think about splitting it into at least two. one thats simple cuda kernels for doing basic vector ops etc, and the other which is devoted to bsm to crs conversion.\n\nI am also wondering once all these functions land, given some of the similarities between them if there is any refactoring/simplification possible. See my comment about enforcing the constraint about linear memory layout in bsm when using cuda.\n\nthat was a pure optimization done for CPU oriented ITERATIVE_SHUR , but if that makes the cuda streaming code so much more complicated, perhaps it is worth enforcing that invariant when cuda is being used.",
      "range": {
        "startLine": 592,
        "startChar": 1,
        "endLine": 592,
        "endChar": 3
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a51b396_e05dd789",
        "filename": "internal/ceres/cuda_kernels.cu.cc",
        "patchSetId": 3
      },
      "lineNbr": 592,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-05-14T01:21:21Z",
      "side": 1,
      "message": "Block-sparse routines are now cuda_kernels_bsm_to_crs.cu.cc\n\nGpu kernels are templated by partitioned flag. If partitioned \u003d false \u003d\u003e caller should use arguments corresponding to matrix F.\n\nLinear layout will allow to get rid of permutation.\nThere is an option to get rid of it sometimes with current layout too.",
      "parentUuid": "f2f2c270_3cbdb174",
      "range": {
        "startLine": 592,
        "startChar": 1,
        "endLine": 592,
        "endChar": 3
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17494bd6_eebe33e9",
        "filename": "internal/ceres/cuda_kernels.cu.cc",
        "patchSetId": 3
      },
      "lineNbr": 592,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-07-14T01:03:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0a51b396_e05dd789",
      "range": {
        "startLine": 592,
        "startChar": 1,
        "endLine": 592,
        "endChar": 3
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1648ae65_7584f8af",
        "filename": "internal/ceres/cuda_kernels.h",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-05-13T19:49:57Z",
      "side": 1,
      "message": "I was wondering if the same idea as we talked about in the last CL about page locked memory should also be used in compressed_row_sparse_matrix when we are using cuda for CGNR also.\n\nand I suppose also for block_random_access_dense matrix etc which are being used for computing things on cpu and then being transferred to the gpu. \n\nI think it would be worth doing this systematically. If you think this is worth it, can you file a bug on github please?",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 90,
        "endChar": 22
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06b044c0_21c6afa7",
        "filename": "internal/ceres/cuda_kernels.h",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-05-14T01:21:21Z",
      "side": 1,
      "message": "Yes, that makes sense.",
      "parentUuid": "1648ae65_7584f8af",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 90,
        "endChar": 22
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3001b7b_112c7f49",
        "filename": "internal/ceres/cuda_kernels.h",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-07-14T01:03:38Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "06b044c0_21c6afa7",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 90,
        "endChar": 22
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59bb5cfd_6fe5d1c5",
        "filename": "internal/ceres/cuda_kernels.h",
        "patchSetId": 3
      },
      "lineNbr": 96,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-05-13T19:49:57Z",
      "side": 1,
      "message": "what should be the size of this array?",
      "range": {
        "startLine": 96,
        "startChar": 24,
        "endLine": 96,
        "endChar": 33
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3128f72_a098c646",
        "filename": "internal/ceres/cuda_kernels.h",
        "patchSetId": 3
      },
      "lineNbr": 96,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-05-14T01:21:21Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "59bb5cfd_6fe5d1c5",
      "range": {
        "startLine": 96,
        "startChar": 24,
        "endLine": 96,
        "endChar": 33
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e2384fb_b0a31d53",
        "filename": "internal/ceres/cuda_kernels.h",
        "patchSetId": 3
      },
      "lineNbr": 127,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-05-13T19:49:57Z",
      "side": 1,
      "message": "if this is a temporary, does this mean it is not useful to the caller in which case why are we trying to save an allocation here? or is this because allocation by cuda is a problem? same question for the temporary array below.",
      "range": {
        "startLine": 127,
        "startChar": 38,
        "endLine": 127,
        "endChar": 51
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f67d90b0_d0296bdf",
        "filename": "internal/ceres/cuda_kernels.h",
        "patchSetId": 3
      },
      "lineNbr": 127,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-05-14T01:21:21Z",
      "side": 1,
      "message": "cudaMalloc / cudaFree synchronize the whole device and are expensive. For partitioned matrix temporary buffer passed to ComputeNonZerosInColumnBlockSubMatrix was later reused in FillCRSStructurePartitioned.\n\nI replaced supplying passing pre-allocated array with stream-ordered allocations.\n\ncudaMallocAsync / cudaFreeAsync are not available in toolkit shipped with ubuntu 20.04; so we will need cuda toolkit from nvidia on 20.04 too (stream-ordered allocation became a thing in cuda 11.4, ubuntu 20.04 ships 10.1).\n\nIf requiring cuda 11.4+ is fine - then it might make sense to make all cuda allocations asynchronous and run them in default stream in the future. Making memory allocations asynchronous should not break anything due to our convention for using streams.",
      "parentUuid": "1e2384fb_b0a31d53",
      "range": {
        "startLine": 127,
        "startChar": 38,
        "endLine": 127,
        "endChar": 51
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f73d15a9_928c4653",
        "filename": "internal/ceres/cuda_kernels.h",
        "patchSetId": 3
      },
      "lineNbr": 127,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-05-14T12:52:11Z",
      "side": 1,
      "message": "I think joydeep biswas who initially contributed cuda support to ceres cares about running older versions of cuda on some devices. This is a good question for him. I am happy to use newer versions.",
      "parentUuid": "f67d90b0_d0296bdf",
      "range": {
        "startLine": 127,
        "startChar": 38,
        "endLine": 127,
        "endChar": 51
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc15c330_6d356642",
        "filename": "internal/ceres/cuda_kernels.h",
        "patchSetId": 3
      },
      "lineNbr": 127,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-05-14T17:16:20Z",
      "side": 1,
      "message": "Ok, I think we need to decide:\n - The lowest CUDA version we need to support\n - Are we using the latest \u0026 greatest cuda toolkit from nvidia for CI builds, or we should stick to whatever is shipped by ubuntu maintainers.\n\nIf we decide to use cuda toolkit shipped with ubuntu, that will:\n - Require us to support CUDA 10.1 on ubuntu 20.04; this forbids using stream-ordered allocations (thus, all (de-)allocations require device-level synchrnonization)\n - Require us to support CUDA 11.5 + gcc11 combination on ubuntu 22.04, which has problems with compiling code utilizing thrust ( https://bugs.debian.org/cgi-bin/bugreport.cgi?bug\u003d1006962 )",
      "parentUuid": "f73d15a9_928c4653",
      "range": {
        "startLine": 127,
        "startChar": 38,
        "endLine": 127,
        "endChar": 51
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "352ab4b6_70d906d1",
        "filename": "internal/ceres/cuda_kernels.h",
        "patchSetId": 3
      },
      "lineNbr": 127,
      "author": {
        "id": 5135
      },
      "writtenOn": "2023-05-15T14:16:56Z",
      "side": 1,
      "message": "Thanks for checking, much appreciated.\n\nI think it is fine to require CUDA 11.4+ . We can set this restriction independently of the CUDA version shipped with Ubuntu - this is quite common, e.g., with ML libraries.\n\nMoving to async GPU alloc / free sounds good to me as long as we have all the GPU operations synced to the same stream. The original reason to move to an explicit ceres stream instead of the default stream was to ensure that we did not have to be synchronous with CUDA operations from the host program.",
      "parentUuid": "bc15c330_6d356642",
      "range": {
        "startLine": 127,
        "startChar": 38,
        "endLine": 127,
        "endChar": 51
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "acb8b6aa_547fd5a7",
        "filename": "internal/ceres/cuda_kernels.h",
        "patchSetId": 3
      },
      "lineNbr": 127,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-07-14T01:03:38Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "352ab4b6_70d906d1",
      "range": {
        "startLine": 127,
        "startChar": 38,
        "endLine": 127,
        "endChar": 51
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b68129e2_9e789a23",
        "filename": "internal/ceres/cuda_kernels.h",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-05-13T19:49:57Z",
      "side": 1,
      "message": "this makes me wonder if we should just use blocksparsematrix when using cuda for CGNR also?",
      "range": {
        "startLine": 137,
        "startChar": 5,
        "endLine": 137,
        "endChar": 18
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4c4f13d_6e534581",
        "filename": "internal/ceres/cuda_kernels.h",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-05-14T01:21:21Z",
      "side": 1,
      "message": "You expect that we might save some time by utilizing block-sparse jacobian writer, right?",
      "parentUuid": "b68129e2_9e789a23",
      "range": {
        "startLine": 137,
        "startChar": 5,
        "endLine": 137,
        "endChar": 18
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a589f3c_69f76cb7",
        "filename": "internal/ceres/cuda_kernels.h",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-05-14T12:52:11Z",
      "side": 1,
      "message": "yes, but I am not sure how that trades off against the need to permute the values.\nit also simplifies/eliminates one variant of the block jacobi preconditioner which is done using crs matrices as input.",
      "parentUuid": "a4c4f13d_6e534581",
      "range": {
        "startLine": 137,
        "startChar": 5,
        "endLine": 137,
        "endChar": 18
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cffeba7_9bec13df",
        "filename": "internal/ceres/cuda_kernels.h",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-05-14T17:16:20Z",
      "side": 1,
      "message": "Seem to save us 10% of total run time https://ceres-solver-review.googlesource.com/c/ceres-solver/+/24221",
      "parentUuid": "5a589f3c_69f76cb7",
      "range": {
        "startLine": 137,
        "startChar": 5,
        "endLine": 137,
        "endChar": 18
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "279b2889_8fc212b9",
        "filename": "internal/ceres/cuda_kernels.h",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-07-14T01:03:38Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "7cffeba7_9bec13df",
      "range": {
        "startLine": 137,
        "startChar": 5,
        "endLine": 137,
        "endChar": 18
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f63674f_defb71a6",
        "filename": "internal/ceres/cuda_kernels.h",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-05-13T19:49:57Z",
      "side": 1,
      "message": "First sentence does not make sense.",
      "range": {
        "startLine": 144,
        "startChar": 11,
        "endLine": 144,
        "endChar": 16
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa322325_643e0b98",
        "filename": "internal/ceres/cuda_kernels.h",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-05-14T01:21:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2f63674f_defb71a6",
      "range": {
        "startLine": 144,
        "startChar": 11,
        "endLine": 144,
        "endChar": 16
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47f15754_db17edcd",
        "filename": "internal/ceres/cuda_kernels.h",
        "patchSetId": 3
      },
      "lineNbr": 151,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-05-13T19:49:57Z",
      "side": 1,
      "message": "I do not understand num_values, why do we need an offset here?\n\ndoes the permutation also need an offset? why not offset block_sparse_values to begin with?",
      "range": {
        "startLine": 151,
        "startChar": 40,
        "endLine": 151,
        "endChar": 50
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f89faffa_7e1b2daa",
        "filename": "internal/ceres/cuda_kernels.h",
        "patchSetId": 3
      },
      "lineNbr": 151,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-05-14T01:21:21Z",
      "side": 1,
      "message": "Done.\n\nPermutation needs offset, block_sparse_values do not; block_sparse values is a small buffer from CudaStreamedBuffer.",
      "parentUuid": "47f15754_db17edcd",
      "range": {
        "startLine": 151,
        "startChar": 40,
        "endLine": 151,
        "endChar": 50
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e75ef2c1_5d262448",
        "filename": "internal/ceres/cuda_kernels.h",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-05-13T19:49:57Z",
      "side": 1,
      "message": "bsm_values or",
      "range": {
        "startLine": 153,
        "startChar": 44,
        "endLine": 153,
        "endChar": 63
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47561430_bb6b5fea",
        "filename": "internal/ceres/cuda_kernels.h",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-05-14T01:21:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e75ef2c1_5d262448",
      "range": {
        "startLine": 153,
        "startChar": 44,
        "endLine": 153,
        "endChar": 63
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "abca2795_6e32094d",
        "filename": "internal/ceres/cuda_partitioned_block_sparse_crs_view.h",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-05-13T19:49:57Z",
      "side": 1,
      "message": "I am wondering if we should actually enforce this constraint when using cuda, in which case some of our invariants will become simpler?",
      "range": {
        "startLine": 61,
        "startChar": 15,
        "endLine": 61,
        "endChar": 16
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9ec1238_e12d0426",
        "filename": "internal/ceres/cuda_partitioned_block_sparse_crs_view.h",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-05-14T01:21:21Z",
      "side": 1,
      "message": "If we enforce that cells\u0027 positions are sorted by (row_block, col_block), then we can compute index in crs corresponding to given index in bsm on-the-fly, avoiding storing permutation alltogether.\n\nComputing index in this case is 2 binary searches (first for row-block, second - for cell inside the row-block).\nAnd it is still faster than host-to-device copy (though significantly slower than approach with permutation).\n\n\nNote that in the case of \"the simplest\" bundle adjustment (one E cell and one F cell per row-block) in certain cases we can do a plain memcopy (or strided memcopy) instead of allocating permutations and using CudaStreamedBuffer. It is possible to check if it is the case by a reasonably simple code \nthat utilizes just block-sparse structure (thus, before we allocate CRS matrices and permutation array).",
      "parentUuid": "abca2795_6e32094d",
      "range": {
        "startLine": 61,
        "startChar": 15,
        "endLine": 61,
        "endChar": 16
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc9d81ae_ab659a0f",
        "filename": "internal/ceres/cuda_partitioned_block_sparse_crs_view.h",
        "patchSetId": 3
      },
      "lineNbr": 97,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-05-13T19:49:57Z",
      "side": 1,
      "message": "since this is a partitioned view, I think you can drop the crs_suffix here and in the member variables, and just call thing matrix_e and matrix_f if you like. it will make things shorter without losing any readability.",
      "range": {
        "startLine": 97,
        "startChar": 8,
        "endLine": 97,
        "endChar": 24
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "edd4465d_fb3cce74",
        "filename": "internal/ceres/cuda_partitioned_block_sparse_crs_view.h",
        "patchSetId": 3
      },
      "lineNbr": 97,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-05-14T01:21:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fc9d81ae_ab659a0f",
      "range": {
        "startLine": 97,
        "startChar": 8,
        "endLine": 97,
        "endChar": 24
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ae9a228_dcc46355",
        "filename": "internal/ceres/cuda_partitioned_block_sparse_crs_view.h",
        "patchSetId": 3
      },
      "lineNbr": 105,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-05-13T19:49:57Z",
      "side": 1,
      "message": "move this up before the accessors.",
      "range": {
        "startLine": 105,
        "startChar": 26,
        "endLine": 105,
        "endChar": 43
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51a77d1c_2a8350fa",
        "filename": "internal/ceres/cuda_partitioned_block_sparse_crs_view.h",
        "patchSetId": 3
      },
      "lineNbr": 105,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-05-14T01:21:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0ae9a228_dcc46355",
      "range": {
        "startLine": 105,
        "startChar": 26,
        "endLine": 105,
        "endChar": 43
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c05cea84_bf10f8a2",
        "filename": "internal/ceres/cuda_partitioned_block_sparse_crs_view.h",
        "patchSetId": 3
      },
      "lineNbr": 111,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-05-13T19:49:57Z",
      "side": 1,
      "message": "its weird to hard code this number like this. 8mb sounds small to me, but what do I know.",
      "range": {
        "startLine": 111,
        "startChar": 23,
        "endLine": 111,
        "endChar": 45
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93fa17ba_72502105",
        "filename": "internal/ceres/cuda_partitioned_block_sparse_crs_view.h",
        "patchSetId": 3
      },
      "lineNbr": 111,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-05-14T01:21:21Z",
      "side": 1,
      "message": "Permuting values happens element-wise, so half-million values per run should be able to occupy the whole gpu.\n\nI\u0027ve checked with nvidia tools - on my setup this kernels achieves 100% occupancy and runs for 16.7us per invocation; I would say it is on a shorter side, but reasonable.\n\nIf we would increase size of this buffer to more than, let say, 64Mb - I think it might make sens to move CudaStreamedBuffer to ContextImpl.",
      "parentUuid": "c05cea84_bf10f8a2",
      "range": {
        "startLine": 111,
        "startChar": 23,
        "endLine": 111,
        "endChar": 45
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8734386_8bc9d335",
        "filename": "internal/ceres/cuda_partitioned_block_sparse_crs_view.h",
        "patchSetId": 3
      },
      "lineNbr": 114,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-05-13T19:49:57Z",
      "side": 1,
      "message": "see my comment about this permutation in cuda_kernels.cc.cu",
      "range": {
        "startLine": 114,
        "startChar": 22,
        "endLine": 114,
        "endChar": 27
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3188a975_36fe090f",
        "filename": "internal/ceres/cuda_partitioned_block_sparse_crs_view.h",
        "patchSetId": 3
      },
      "lineNbr": 114,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-05-15T14:33:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f8734386_8bc9d335",
      "range": {
        "startLine": 114,
        "startChar": 22,
        "endLine": 114,
        "endChar": 27
      },
      "revId": "8fc85a8b027e22c7a999e92731c99462b980a9f4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}