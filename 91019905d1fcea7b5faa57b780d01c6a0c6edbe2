{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7226eb48_e5c893f3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 5155
      },
      "writtenOn": "2020-10-13T22:06:17Z",
      "side": 1,
      "message": "Hi Taylor, I tried this again and found whilst testing all permutations (static as well as shared) that we need to update our definition of the export macro and conditionally set the visibility in the Ceres library, this is inline with the GCC docs here: https://gcc.gnu.org/wiki/Visibility, with the following patch I was able to build on both macOS and Linux as both static \u0026 shared:\n\ndiff --git a/include/ceres/internal/port.h b/include/ceres/internal/port.h\nindex b9f4216..040a1ef 100644\n--- a/include/ceres/internal/port.h\n+++ b/include/ceres/internal/port.h\n@@ -70,22 +70,32 @@\n \n // A macro to signal which functions and classes are exported when\n // building a shared library.\n-//\n-// Note that the ordering here is important, CERES_BUILDING_SHARED_LIBRARY\n-// is only defined locally when Ceres is compiled, it is never exported to\n-// users.  However, in order that we do not have to configure config.h\n-// separately for building vs installing, if we are building\n-// a shared library, then both CERES_BUILDING_SHARED_LIBRARY and\n-// CERES_USING_SHARED_LIBRARY will be defined when Ceres is compiled.\n-// Hence it is important that the check for CERES_BUILDING_SHARED_LIBRARY\n-// happens first.\n-#if defined(_MSC_VER) \u0026\u0026 defined(CERES_BUILDING_SHARED_LIBRARY)\n-#define CERES_EXPORT __declspec(dllexport)\n-#elif defined(_MSC_VER) \u0026\u0026 defined(CERES_USING_SHARED_LIBRARY)\n-#define CERES_EXPORT __declspec(dllimport)\n+#if defined(_MSC_VER)\n+#define CERES_API_SHARED_IMPORT __declspec(dllimport)\n+#define CERES_API_SHARED_EXPORT __declspec(dllexport)\n #elif defined(__GNUC__)\n-#define CERES_EXPORT __attribute__((visibility(\"default\")))\n+#define CERES_API_SHARED_IMPORT __attribute__((visibility(\"default\")))\n+#define CERES_API_SHARED_EXPORT __attribute__((visibility(\"default\")))\n+#else\n+#define CERES_API_SHARED_IMPORT\n+#define CERES_API_SHARED_EXPORT\n+#endif\n+\n+// CERES_BUILDING_SHARED_LIBRARY is only defined locally when Ceres itself is\n+// compiled as a shared library, it is never exported to users.  In order that\n+// we do not have to configure config.h separately when building Ceres as either\n+// a static or dynamic library, we define both CERES_USING_SHARED_LIBRARY and\n+// CERES_BUILDING_SHARED_LIBRARY when building as a shared library.\n+#if defined(CERES_USING_SHARED_LIBRARY)\n+#if defined(CERES_BUILDING_SHARED_LIBRARY)\n+// Compiling Ceres itself as a shared library.\n+#define CERES_EXPORT CERES_API_SHARED_EXPORT\n+#else\n+// Using Ceres as a shared library.\n+#define CERES_EXPORT CERES_API_SHARED_IMPORT\n+#endif\n #else\n+// Ceres was compiled as a static library, export everything.\n #define CERES_EXPORT\n #endif\n \ndiff --git a/internal/ceres/CMakeLists.txt b/internal/ceres/CMakeLists.txt\nindex 4542719..6dc7262 100644\n--- a/internal/ceres/CMakeLists.txt\n+++ b/internal/ceres/CMakeLists.txt\n@@ -232,13 +232,14 @@ endif()\n add_library(ceres ${CERES_LIBRARY_SOURCE})\n set_target_properties(ceres PROPERTIES\n   VERSION ${CERES_VERSION}\n-  SOVERSION ${CERES_VERSION_MAJOR}\n-\n-  # Set the default symbol visibility to hidden to unify the behavior among the\n-  # various compilers and to get smaller binaries\n-  C_VISIBILITY_PRESET hidden\n-  CXX_VISIBILITY_PRESET hidden\n-  )\n+  SOVERSION ${CERES_VERSION_MAJOR})\n+if (BUILD_SHARED_LIBS)\n+  set_target_properties(ceres PROPERTIES\n+    # Set the default symbol visibility to hidden to unify the behavior among\n+    # the various compilers and to get smaller binaries\n+    C_VISIBILITY_PRESET hidden\n+    CXX_VISIBILITY_PRESET hidden)\n+endif()\n \n # When building as a shared libarary with testing enabled, we need to export\n # internal symbols needed by the unit tests\n",
      "revId": "91019905d1fcea7b5faa57b780d01c6a0c6edbe2",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6dcbd8c_750531ff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 5155
      },
      "writtenOn": "2020-10-13T22:07:45Z",
      "side": 1,
      "message": "Note that I meant to add that I don\u0027t have a Windows machine, so please can you test that patch there but I think the behaviour should be unchanged as the original export macro should have resolved to nothing on Windows when building statically, it just didn\u0027t on other OSs after this CL.",
      "revId": "91019905d1fcea7b5faa57b780d01c6a0c6edbe2",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3594c785_c0aee8c6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 5150
      },
      "writtenOn": "2020-10-14T16:17:26Z",
      "side": 1,
      "message": "Looks reasonable and works in my Linux dev environment (gcc 7.5). I\u0027ll test with MSVC 2017 this afternoon.",
      "parentUuid": "7226eb48_e5c893f3",
      "revId": "91019905d1fcea7b5faa57b780d01c6a0c6edbe2",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d507c65_29fd292f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 5150
      },
      "writtenOn": "2020-10-14T20:07:38Z",
      "side": 1,
      "message": "I had to make a couple changes that I had neglected to test in Windows while doing my initial development in Linux:\n\n- Address some C4275 warnings:\n\nwarning C4275: non dll-interface class \u0027xxx\u0027 used as base for dll-interface class \u0027xxx\u0027\n\n- Fix a linker error when linking bundle_adjuster.exe:\n\nbundle_adjuster.cc.obj : error LNK2019: unresolved external symbol \"__declspec(dllimport) const ceres::ProductParameterization::`vftable\u0027\" (__imp_??_7ProductParameterization@ceres@@6B@) referenced in function \"public: __cdecl ceres::ProductParameterization::ProductParameterization\u003cclass ceres::QuaternionParameterization,class ceres::IdentityParameterization\u003e(class ceres::QuaternionParameterization *,class ceres::IdentityParameterization *)\" (??$?0VQuaternionParameterization@ceres@@VIdentityParameterization@1@@ProductParameterization@ceres@@QEAA@PEAVQuaternionParameterization@1@PEAVIdentityParameterization@1@@Z)\n\n\nHere is my testing configuration:\n\n-- The C compiler identification is MSVC 19.16.27030.1\n-- The CXX compiler identification is MSVC 19.16.27030.1\n-- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.16.27023/bin/HostX64/x64/cl.exe\n-- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.16.27023/bin/HostX64/x64/cl.exe - works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Detecting C compile features\n-- Detecting C compile features - done\n-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.16.27023/bin/HostX64/x64/cl.exe\n-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.16.27023/bin/HostX64/x64/cl.exe - works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Detected Ceres version: 2.0.0 from C:/Users/tbraunjones/git/ceres-solver/include/ceres/version.h\n-- Detected available Ceres threading models: [CXX_THREADS, OPENMP, NO_THREADS]\n-- Building with C++14\n-- Found Eigen version 3.3.4: C:/Users/tbraunjones/git/genshi-rd-with-testing/EP/include/eigen3\n-- Enabling use of Eigen as a sparse linear algebra library.\n-- Looking for sgemm_\n-- Looking for sgemm_ - not found\n-- Looking for pthread.h\n-- Looking for pthread.h - not found\n-- Found Threads: TRUE  \n-- Could NOT find BLAS (missing: BLAS_LIBRARIES) \n-- LAPACK requires BLAS\n-- Did not find LAPACK library, disabling LAPACK support.\n-- Failed to find SuiteSparse - Did not find BLAS library (required for SuiteSparse).\n-- Could NOT find BLAS (missing: BLAS_LIBRARIES) \n-- LAPACK requires BLAS\n-- Failed to find SuiteSparse - Did not find LAPACK library (required for SuiteSparse).\n-- Failed to find SuiteSparse - Did not find AMD header (required SuiteSparse component).\n-- Failed to find SuiteSparse - Did not find AMD library (required SuiteSparse component).\n-- Failed to find SuiteSparse - Did not find CAMD header (required SuiteSparse component).\n-- Failed to find SuiteSparse - Did not find CAMD library (required SuiteSparse component).\n-- Failed to find SuiteSparse - Did not find COLAMD header (required SuiteSparse component).\n-- Failed to find SuiteSparse - Did not find COLAMD library (required SuiteSparse component).\n-- Failed to find SuiteSparse - Did not find CCOLAMD header (required SuiteSparse component).\n-- Failed to find SuiteSparse - Did not find CCOLAMD library (required SuiteSparse component).\n-- Failed to find SuiteSparse - Did not find CHOLMOD header (required SuiteSparse component).\n-- Failed to find SuiteSparse - Did not find CHOLMOD library (required SuiteSparse component).\n-- Failed to find SuiteSparse - Did not find SUITESPARSEQR header (required SuiteSparse component).\n-- Failed to find SuiteSparse - Did not find SUITESPARSEQR library (required SuiteSparse component).\n-- Did not find SUITESPARSE_CONFIG header (optional SuiteSparse component).\n-- Did not find SUITESPARSE_CONFIG library (optional SuiteSparse dependency)\n-- Did not find UFCONFIG header (optional SuiteSparse component).\n-- Failed to find SuiteSparse - Failed to find either: SuiteSparse_config header \u0026 library (should be present in all SuiteSparse \u003e\u003d v4 installs), or UFconfig header (should be present in all SuiteSparse \u003c v4 installs).\n-- Did not find METIS library (optional SuiteSparse dependency)\n-- Failed to find some/all required components of SuiteSparse. (missing: BLAS_FOUND LAPACK_FOUND AMD_FOUND CAMD_FOUND COLAMD_FOUND CCOLAMD_FOUND CHOLMOD_FOUND SUITESPARSEQR_FOUND SUITESPARSE_VERSION) \n-- Did not find all SuiteSparse dependencies, disabling SuiteSparse support.\n-- Failed to find CXSparse - Could not find CXSparse include directory, set CXSPARSE_INCLUDE_DIR to directory containing cs.h\n-- Did not find CXSparse, Building without CXSparse.\n-- Building without Apple\u0027s Accelerate sparse support.\n-- Found Google Flags (gflags) version 2.2.1: C:/Users/tbraunjones/git/genshi-rd-with-testing/EP/lib/cmake/gflags\n-- No preference for use of exported glog CMake configuration set, and no hints for include/library directories provided. Defaulting to preferring an installed/exported glog CMake configuration if available.\n-- Found installed version of glog: C:/Users/tbraunjones/git/genshi-rd-with-testing/EP/lib/cmake/glog\n-- Detected glog version: 0.3.5\n-- Found Glog: glog::glog  \n-- Found Google Log (glog). Assuming glog was built with gflags support as gflags was found. This will make gflags a public dependency of Ceres.\n-- Using Ceres threading model: CXX_THREADS\n-- Failed to find Google benchmark library, disabling build of benchmarks.\n-- Building Ceres as a shared library.\n-- Performing Test HAVE_UNDERSCORE_PREFIXED_BESSEL_FUNCTIONS\n-- Performing Test HAVE_UNDERSCORE_PREFIXED_BESSEL_FUNCTIONS - Success\n-- Enabling CERES_USE_EIGEN_SPARSE in Ceres config.h\n-- Enabling CERES_NO_LAPACK in Ceres config.h\n-- Enabling CERES_NO_SUITESPARSE in Ceres config.h\n-- Enabling CERES_NO_CXSPARSE in Ceres config.h\n-- Enabling CERES_NO_ACCELERATE_SPARSE in Ceres config.h\n-- Enabling CERES_USE_CXX_THREADS in Ceres config.h\n-- Enabling CERES_USING_SHARED_LIBRARY in Ceres config.h\n-- Enabling CERES_MSVC_USE_UNDERSCORE_PREFIXED_BESSEL_FUNCTIONS in Ceres config.h\n-- Performing Test CHECK_CXX_FLAG_Wno_missing_declarations\n-- Performing Test CHECK_CXX_FLAG_Wno_missing_declarations - Failed\n-- Build the examples.\n-- Configuring done\n-- Generating done\n-- Build files have been written to: C:/Users/tbraunjones/git/ceres-solver-rd\n\nWith that I was able to successfully run `ninja \u0026\u0026 ninja test` for:\n\n-DBUILD_TESTING\u003dON -DBUILD_SHARED_LIBS\u003dON\n-DBUILD_TESTING\u003dON -DBUILD_SHARED_LIBS\u003dOFF\n\nAnd run `ninja` for:\n\n-DBUILD_TESTING\u003dOFF -DBUILD_SHARED_LIBS\u003dON\n-DBUILD_TESTING\u003dOFF -DBUILD_SHARED_LIBS\u003dOFF",
      "parentUuid": "f6dcbd8c_750531ff",
      "revId": "91019905d1fcea7b5faa57b780d01c6a0c6edbe2",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}