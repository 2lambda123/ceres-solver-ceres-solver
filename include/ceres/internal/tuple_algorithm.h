// Ceres Solver - A fast non-linear least squares minimizer
// Copyright 2022 Google Inc. All rights reserved.
// http://ceres-solver.org/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice,
//   this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
// * Neither the name of Google Inc. nor the names of its contributors may be
//   used to endorse or promote products derived from this software without
//   specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// Author: sergiu.deitsch@gmail.com (Sergiu Deitsch)
//
// Algorithms to be used together with tuple, like computing the sum
// or the exclusive scan (sometimes called exclusive prefix sum).

#ifndef CERES_PUBLIC_INTERNAL_TUPLE_ALGORITHM_H_
#define CERES_PUBLIC_INTERNAL_TUPLE_ALGORITHM_H_

#include <cstddef>
#include <tuple>
#include <type_traits>
#include <utility>

namespace ceres {
namespace internal {

// Generate a homogeneous tuple of type T using the specified integer sequence.
//
// The template is not intended to be used directly. See TupleOf and TupleOf_t
// below instead.
template <typename T, typename Sequence>
struct MakeTuple;

// Generate a homogeneous tuple of type T using the specified index sequence.
//
// The homogeneous tuple is generated by replicating the type T according to the
// Indices of the integer sequence. The type T is replicated by using the
// Indices pack in a comma operator expression allowing to retain only the
// (sole) type T from pack expansion.
template <typename T, std::size_t... Indices>
struct MakeTuple<T, std::index_sequence<Indices...>> {
  using type = decltype(std::make_tuple((Indices, std::declval<T>())...));
};

// Constructs a homogeneous tuple of type T with T replicated N times.
template <class T, std::size_t N>
using TupleOf = MakeTuple<T, std::make_index_sequence<N>>;

// Convenience alias template for TupleOf.
template <class T, std::size_t N>
using TupleOf_t = typename TupleOf<T, N>::type;

// End of the recursion for computing the sum of tuple values.
template <typename... Types>
constexpr std::common_type_t<int, Types...> ComputeSum(
    const std::tuple<Types...>& /*values*/, std::index_sequence<>) noexcept {
  return 0;
}

// Recursion for computing the sum of tuple values.
template <typename... Types, std::size_t Index0, std::size_t... Indices>
constexpr std::common_type_t<Types...> ComputeSum(
    const std::tuple<Types...>& values,
    std::index_sequence<Index0, Indices...>) noexcept {
  return std::get<Index0>(values) +
         ComputeSum(values, std::index_sequence<Indices...>{});
}

// Computes the sum of tuple values.
template <typename... Types>
constexpr decltype(auto) ComputeSum(
    const std::tuple<Types...>& values) noexcept {
  return ComputeSum(values, std::index_sequence_for<Types...>{});
}

// Compute exclusive prefix sum and return the result as a tuple of homogeneous
// types. This overload expands the pack and fills the resulting tuple, and is
// not intended to be called directly.
template <typename... Types, std::size_t... Indices>
constexpr TupleOf_t<std::common_type_t<int, Types...>, sizeof...(Types)>
ComputeExclusiveScan(const std::tuple<Types...>& values,
                     std::index_sequence<Indices...>) noexcept {
  return std::make_tuple(
      ComputeSum(values, std::make_index_sequence<Indices>{})...);
}

// Compute exclusive prefix sum and return the result as a tuple of homogeneous
// types.
template <typename... Types>
constexpr decltype(auto) ComputeExclusiveScan(
    const std::tuple<Types...>& values) noexcept {
  return ComputeExclusiveScan(values, std::index_sequence_for<Types...>{});
}

}  // namespace internal
}  // namespace ceres

#endif  // CERES_PUBLIC_INTERNAL_TUPLE_ALGORITHM_H_
