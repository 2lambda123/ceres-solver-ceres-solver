{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8de51319_3c5ddc72",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2024-07-18T06:47:38Z",
      "side": 1,
      "message": "Sameer, it looks like you haven\u0027t pushed your changes.",
      "revId": "9e1cc4fc0d3a70cf80b5710aa8a13c8d97bfbbdf",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73e6fda0_adb7caab",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2024-07-18T06:50:34Z",
      "side": 1,
      "message": "oops done. was missing some authentication.",
      "revId": "9e1cc4fc0d3a70cf80b5710aa8a13c8d97bfbbdf",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "162cd549_47a162f3",
        "filename": "CMakeLists.txt",
        "patchSetId": 14
      },
      "lineNbr": 34,
      "author": {
        "id": 6612
      },
      "writtenOn": "2024-07-17T16:52:14Z",
      "side": 1,
      "message": "Why do we need these two lines?",
      "revId": "9e1cc4fc0d3a70cf80b5710aa8a13c8d97bfbbdf",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eca19e28_ee119562",
        "filename": "CMakeLists.txt",
        "patchSetId": 14
      },
      "lineNbr": 34,
      "author": {
        "id": 5002
      },
      "writtenOn": "2024-07-17T17:16:29Z",
      "side": 1,
      "message": "isn\u0027t it a good idea to enforce the c++ standard we are using for the project?",
      "parentUuid": "162cd549_47a162f3",
      "revId": "9e1cc4fc0d3a70cf80b5710aa8a13c8d97bfbbdf",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "820bb9c1_13970f33",
        "filename": "CMakeLists.txt",
        "patchSetId": 14
      },
      "lineNbr": 34,
      "author": {
        "id": 6612
      },
      "writtenOn": "2024-07-17T17:36:43Z",
      "side": 1,
      "message": "No, not at all. This essentially prohibits from compiling Ceres using a newer standard either set by the user or determined by the compiler. I believe MSVC is even using the latest standard by default.\n\nA good practice is to communicate the minimum supported C++ standard (which we already do) and let either the toolchain or the user decide whether they want restrict or elevate the language feature set.",
      "parentUuid": "eca19e28_ee119562",
      "revId": "9e1cc4fc0d3a70cf80b5710aa8a13c8d97bfbbdf",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd3ae08b_2e8a9e1d",
        "filename": "CMakeLists.txt",
        "patchSetId": 14
      },
      "lineNbr": 34,
      "author": {
        "id": 5002
      },
      "writtenOn": "2024-07-17T18:07:39Z",
      "side": 1,
      "message": "Got it.\nI now realize the other reason why I added it, but forgot. It is likely an indicator of a different problem, but if I get rid of this line, I start getting linking errors.\n\n[1/299] Linking CXX executable bin/autodiff_manifold_test\nFAILED: bin/autodiff_manifold_test\n: \u0026\u0026 /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -Wmissing-declarations -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-missing-field-initializers -Qunused-arguments -mllvm -inline-threshold\u003d600 -Wno-return-type-c-linkage -O3 -DNDEBUG -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.5.sdk -Wl,-search_paths_first -Wl,-headerpad_max_install_names  internal/ceres/CMakeFiles/autodiff_manifold_test.dir/autodiff_manifold_test.cc.o -o bin/autodiff_manifold_test  lib/libtest_util.a  lib/libceres.a  lib/libgmock_main.a  /opt/homebrew/lib/libspqr.dylib  /opt/homebrew/lib/libcholmod.dylib  /opt/homebrew/lib/libamd.dylib  /opt/homebrew/lib/libcamd.dylib  /opt/homebrew/lib/libccolamd.dylib  /opt/homebrew/lib/libcolamd.dylib  /opt/homebrew/lib/libsuitesparseconfig.dylib  /opt/homebrew/lib/libmetis.dylib  -framework Accelerate  -lm  -ldl  lib/libabsl_log_internal_check_op.a  lib/libabsl_log_internal_conditions.a  lib/libabsl_log_internal_message.a  lib/libabsl_log_internal_nullguard.a  lib/libabsl_examine_stack.a  lib/libabsl_log_internal_format.a  lib/libabsl_str_format_internal.a  lib/libabsl_log_internal_proto.a  lib/libabsl_log_internal_log_sink_set.a  lib/libabsl_log_internal_globals.a  lib/libabsl_log_globals.a  lib/libabsl_vlog_config_internal.a  lib/libabsl_log_internal_fnmatch.a  lib/libabsl_hash.a  lib/libabsl_bad_optional_access.a  lib/libabsl_city.a  lib/libabsl_bad_variant_access.a  lib/libabsl_low_level_hash.a  lib/libabsl_synchronization.a  lib/libabsl_stacktrace.a  lib/libabsl_symbolize.a  lib/libabsl_debugging_internal.a  lib/libabsl_demangle_internal.a  lib/libabsl_graphcycles_internal.a  lib/libabsl_malloc_internal.a  lib/libabsl_kernel_timeout_internal.a  lib/libabsl_log_sink.a  lib/libabsl_log_entry.a  lib/libabsl_strerror.a  lib/libabsl_time.a  lib/libabsl_civil_time.a  lib/libabsl_time_zone.a  -Wl,-framework,CoreFoundation  lib/libabsl_strings.a  lib/libabsl_strings_internal.a  lib/libabsl_string_view.a  lib/libabsl_base.a  lib/libabsl_spinlock_wait.a  lib/libabsl_int128.a  lib/libabsl_throw_delegate.a  lib/libabsl_raw_logging_internal.a  lib/libabsl_log_severity.a  lib/libgmock.a  lib/libgtest.a \u0026\u0026 :\nUndefined symbols for architecture arm64:\n  \"void absl::lts_20240116::log_internal::LogMessage::CopyToEncodedBuffer\u003c(absl::lts_20240116::log_internal::LogMessage::StringType)0\u003e(std::__1::basic_string_view\u003cchar, std::__1::char_traits\u003cchar\u003e\u003e)\", referenced from:\n      ceres::DynamicNumericDiffCostFunction\u003cceres::PlusFunctor, (ceres::NumericDiffMethodType)2\u003e::Evaluate(double const* const*, double*, double**) const in autodiff_manifold_test.cc.o\n      ceres::DynamicNumericDiffCostFunction\u003cceres::PlusFunctor, (ceres::NumericDiffMethodType)2\u003e::Evaluate(double const* const*, double*, double**) const in autodiff_manifold_test.cc.o\n      ceres::DynamicNumericDiffCostFunction\u003cceres::PlusFunctor, (ceres::NumericDiffMethodType)2\u003e::Evaluate(double const* const*, double*, double**) const in autodiff_manifold_test.cc.o\n      absl::lts_20240116::log_internal::LogMessage\u0026 absl::lts_20240116::log_internal::LogMessage::operator\u003c\u003c\u003c51\u003e(char const (\u0026) [51]) in autodiff_manifold_test.cc.o\n      ceres::DynamicNumericDiffCostFunction\u003cceres::MinusFunctor, (ceres::NumericDiffMethodType)2\u003e::Evaluate(double const* const*, double*, double**) const in autodiff_manifold_test.cc.o\n      ceres::DynamicNumericDiffCostFunction\u003cceres::MinusFunctor, (ceres::NumericDiffMethodType)2\u003e::Evaluate(double const* const*, double*, double**) const in autodiff_manifold_test.cc.o\n      ceres::DynamicNumericDiffCostFunction\u003cceres::MinusFunctor, (ceres::NumericDiffMethodType)2\u003e::Evaluate(double const* const*, double*, double**) const in autodiff_manifold_test.cc.o\n      ...\n  \"absl::lts_20240116::log_internal::LogMessageFatal::LogMessageFatal(char const*, int, std::__1::basic_string_view\u003cchar, std::__1::char_traits\u003cchar\u003e\u003e)\", referenced from:\n      ceres::DynamicNumericDiffCostFunction\u003cceres::PlusFunctor, (ceres::NumericDiffMethodType)2\u003e::Evaluate(double const* const*, double*, double**) const in autodiff_manifold_test.cc.o\n      ceres::DynamicNumericDiffCostFunction\u003cceres::PlusFunctor, (ceres::NumericDiffMethodType)2\u003e::Evaluate(double const* const*, double*, double**) const in autodiff_manifold_test.cc.o\n      ceres::DynamicNumericDiffCostFunction\u003cceres::MinusFunctor, (ceres::NumericDiffMethodType)2\u003e::Evaluate(double const* const*, double*, double**) const in autodiff_manifold_test.cc.o\n      ceres::DynamicNumericDiffCostFunction\u003cceres::MinusFunctor, (ceres::NumericDiffMethodType)2\u003e::Evaluate(double const* const*, double*, double**) const in autodiff_manifold_test.cc.o\n      ceres::SubsetManifold::SubsetManifold(int, std::__1::vector\u003cint, std::__1::allocator\u003cint\u003e\u003e const\u0026) in libceres.a[154](manifold.cc.o)\n      ceres::SubsetManifold::SubsetManifold(int, std::__1::vector\u003cint, std::__1::allocator\u003cint\u003e\u003e const\u0026) in libceres.a[154](manifold.cc.o)\n      ceres::SubsetManifold::SubsetManifold(int, std::__1::vector\u003cint, std::__1::allocator\u003cint\u003e\u003e const\u0026) in libceres.a[154](manifold.cc.o)\n      ...\nld: symbol(s) not found for architecture arm64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nninja: build stopped: subcommand failed.\n\n\nI have abseil installed on my system, I suspect it is causing some conflict with that?",
      "parentUuid": "820bb9c1_13970f33",
      "revId": "9e1cc4fc0d3a70cf80b5710aa8a13c8d97bfbbdf",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97756602_b9ebbabd",
        "filename": "CMakeLists.txt",
        "patchSetId": 14
      },
      "lineNbr": 34,
      "author": {
        "id": 5002
      },
      "writtenOn": "2024-07-17T18:08:01Z",
      "side": 1,
      "message": "actually it does not matter whether abseil is installed or not.\n\nI get \n\nFAILED: bin/autodiff_manifold_test\n: \u0026\u0026 /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -Wmissing-declarations -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-missing-field-initializers -Qunused-arguments -mllvm -inline-threshold\u003d600 -Wno-return-type-c-linkage -O3 -DNDEBUG -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.5.sdk -Wl,-search_paths_first -Wl,-headerpad_max_install_names  internal/ceres/CMakeFiles/autodiff_manifold_test.dir/autodiff_manifold_test.cc.o -o bin/autodiff_manifold_test  lib/libtest_util.a  lib/libceres.a  lib/libgmock_main.a  /opt/homebrew/lib/libspqr.dylib  /opt/homebrew/lib/libcholmod.dylib  /opt/homebrew/lib/libamd.dylib  /opt/homebrew/lib/libcamd.dylib  /opt/homebrew/lib/libccolamd.dylib  /opt/homebrew/lib/libcolamd.dylib  /opt/homebrew/lib/libsuitesparseconfig.dylib  /opt/homebrew/lib/libmetis.dylib  -framework Accelerate  -lm  -ldl  lib/libabsl_log_internal_check_op.a  lib/libabsl_log_internal_conditions.a  lib/libabsl_log_internal_message.a  lib/libabsl_log_internal_nullguard.a  lib/libabsl_examine_stack.a  lib/libabsl_log_internal_format.a  lib/libabsl_str_format_internal.a  lib/libabsl_log_internal_proto.a  lib/libabsl_log_internal_log_sink_set.a  lib/libabsl_log_internal_globals.a  lib/libabsl_log_globals.a  lib/libabsl_vlog_config_internal.a  lib/libabsl_log_internal_fnmatch.a  lib/libabsl_hash.a  lib/libabsl_bad_optional_access.a  lib/libabsl_city.a  lib/libabsl_bad_variant_access.a  lib/libabsl_low_level_hash.a  lib/libabsl_synchronization.a  lib/libabsl_stacktrace.a  lib/libabsl_symbolize.a  lib/libabsl_debugging_internal.a  lib/libabsl_demangle_internal.a  lib/libabsl_graphcycles_internal.a  lib/libabsl_malloc_internal.a  lib/libabsl_kernel_timeout_internal.a  lib/libabsl_log_sink.a  lib/libabsl_log_entry.a  lib/libabsl_strerror.a  lib/libabsl_time.a  lib/libabsl_civil_time.a  lib/libabsl_time_zone.a  -Wl,-framework,CoreFoundation  lib/libabsl_strings.a  lib/libabsl_strings_internal.a  lib/libabsl_string_view.a  lib/libabsl_base.a  lib/libabsl_spinlock_wait.a  lib/libabsl_int128.a  lib/libabsl_throw_delegate.a  lib/libabsl_raw_logging_internal.a  lib/libabsl_log_severity.a  lib/libgmock.a  lib/libgtest.a \u0026\u0026 :\nUndefined symbols for architecture arm64:\n  \"void absl::lts_20240116::log_internal::LogMessage::CopyToEncodedBuffer\u003c(absl::lts_20240116::log_internal::LogMessage::StringType)0\u003e(std::__1::basic_string_view\u003cchar, std::__1::char_traits\u003cchar\u003e\u003e)\", referenced from:\n      ceres::DynamicNumericDiffCostFunction\u003cceres::PlusFunctor, (ceres::NumericDiffMethodType)2\u003e::Evaluate(double const* const*, double*, double**) const in autodiff_manifold_test.cc.o\n      ceres::DynamicNumericDiffCostFunction\u003cceres::PlusFunctor, (ceres::NumericDiffMethodType)2\u003e::Evaluate(double const* const*, double*, double**) const in autodiff_manifold_test.cc.o\n      ceres::DynamicNumericDiffCostFunction\u003cceres::PlusFunctor, (ceres::NumericDiffMethodType)2\u003e::Evaluate(double const* const*, double*, double**) const in autodiff_manifold_test.cc.o\n      absl::lts_20240116::log_internal::LogMessage\u0026 absl::lts_20240116::log_internal::LogMessage::operator\u003c\u003c\u003c51\u003e(char const (\u0026) [51]) in autodiff_manifold_test.cc.o\n      ceres::DynamicNumericDiffCostFunction\u003cceres::MinusFunctor, (ceres::NumericDiffMethodType)2\u003e::Evaluate(double const* const*, double*, double**) const in autodiff_manifold_test.cc.o\n      ceres::DynamicNumericDiffCostFunction\u003cceres::MinusFunctor, (ceres::NumericDiffMethodType)2\u003e::Evaluate(double const* const*, double*, double**) const in autodiff_manifold_test.cc.o\n      ceres::DynamicNumericDiffCostFunction\u003cceres::MinusFunctor, (ceres::NumericDiffMethodType)2\u003e::Evaluate(double const* const*, double*, double**) const in autodiff_manifold_test.cc.o\n      ...\n  \"absl::lts_20240116::log_internal::LogMessageFatal::LogMessageFatal(char const*, int, std::__1::basic_string_view\u003cchar, std::__1::char_traits\u003cchar\u003e\u003e)\", referenced from:\n      ceres::DynamicNumericDiffCostFunction\u003cceres::PlusFunctor, (ceres::NumericDiffMethodType)2\u003e::Evaluate(double const* const*, double*, double**) const in autodiff_manifold_test.cc.o\n      ceres::DynamicNumericDiffCostFunction\u003cceres::PlusFunctor, (ceres::NumericDiffMethodType)2\u003e::Evaluate(double const* const*, double*, double**) const in autodiff_manifold_test.cc.o\n      ceres::DynamicNumericDiffCostFunction\u003cceres::MinusFunctor, (ceres::NumericDiffMethodType)2\u003e::Evaluate(double const* const*, double*, double**) const in autodiff_manifold_test.cc.o\n      ceres::DynamicNumericDiffCostFunction\u003cceres::MinusFunctor, (ceres::NumericDiffMethodType)2\u003e::Evaluate(double const* const*, double*, double**) const in autodiff_manifold_test.cc.o\n      ceres::SubsetManifold::SubsetManifold(int, std::__1::vector\u003cint, std::__1::allocator\u003cint\u003e\u003e const\u0026) in libceres.a[154](manifold.cc.o)\n      ceres::SubsetManifold::SubsetManifold(int, std::__1::vector\u003cint, std::__1::allocator\u003cint\u003e\u003e const\u0026) in libceres.a[154](manifold.cc.o)\n      ceres::SubsetManifold::SubsetManifold(int, std::__1::vector\u003cint, std::__1::allocator\u003cint\u003e\u003e const\u0026) in libceres.a[154](manifold.cc.o)\n      ...\nld: symbol(s) not found for architecture arm64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nninja: build stopped: subcommand failed.",
      "parentUuid": "bd3ae08b_2e8a9e1d",
      "revId": "9e1cc4fc0d3a70cf80b5710aa8a13c8d97bfbbdf",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "806bdb29_43166ed1",
        "filename": "CMakeLists.txt",
        "patchSetId": 14
      },
      "lineNbr": 34,
      "author": {
        "id": 5002
      },
      "writtenOn": "2024-07-17T21:01:56Z",
      "side": 1,
      "message": "The problem seems to be basic_string_view, which is only available in c++17, and if we do not ask for that standard, apparently we do not get access to c++17 for some reason? maybe because absl is trying to compile with c++14 in that case?",
      "parentUuid": "97756602_b9ebbabd",
      "revId": "9e1cc4fc0d3a70cf80b5710aa8a13c8d97bfbbdf",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9849b539_80735029",
        "filename": "CMakeLists.txt",
        "patchSetId": 14
      },
      "lineNbr": 34,
      "author": {
        "id": 6612
      },
      "writtenOn": "2024-07-18T06:32:12Z",
      "side": 1,
      "message": "Looks like it. Abseil minimum language level of support is C++14 and we need to explicitly request C++17. However, we still do not need to set `CMAKE_CXX_STANDARD_REQUIRED` since setting this variable to `ON` will enforce the exact language level given by `CMAKE_CXX_STANDARD`.",
      "parentUuid": "806bdb29_43166ed1",
      "revId": "9e1cc4fc0d3a70cf80b5710aa8a13c8d97bfbbdf",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65481da3_697cb6c4",
        "filename": "CMakeLists.txt",
        "patchSetId": 14
      },
      "lineNbr": 34,
      "author": {
        "id": 5002
      },
      "writtenOn": "2024-07-18T06:42:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9849b539_80735029",
      "revId": "9e1cc4fc0d3a70cf80b5710aa8a13c8d97bfbbdf",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c78b8ade_84c05ac9",
        "filename": "CMakeLists.txt",
        "patchSetId": 14
      },
      "lineNbr": 166,
      "author": {
        "id": 6612
      },
      "writtenOn": "2024-07-17T16:52:14Z",
      "side": 1,
      "message": "Not sure why we need this either. Generally, libraries should be self-contained and responsible for their own compiler options.",
      "revId": "9e1cc4fc0d3a70cf80b5710aa8a13c8d97bfbbdf",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10cb9457_0c690614",
        "filename": "CMakeLists.txt",
        "patchSetId": 14
      },
      "lineNbr": 166,
      "author": {
        "id": 5002
      },
      "writtenOn": "2024-07-17T17:16:29Z",
      "side": 1,
      "message": "without this absl warns and says that it will turn this on in the future. \nSo we turn it on unconditionally to be future safe and silence the warning.",
      "parentUuid": "c78b8ade_84c05ac9",
      "revId": "9e1cc4fc0d3a70cf80b5710aa8a13c8d97bfbbdf",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4dc3c55_86fad886",
        "filename": "CMakeLists.txt",
        "patchSetId": 14
      },
      "lineNbr": 166,
      "author": {
        "id": 6612
      },
      "writtenOn": "2024-07-17T17:36:43Z",
      "side": 1,
      "message": "We should probably document this in a brief comment.",
      "parentUuid": "10cb9457_0c690614",
      "revId": "9e1cc4fc0d3a70cf80b5710aa8a13c8d97bfbbdf",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b78414f_6c9daf1a",
        "filename": "CMakeLists.txt",
        "patchSetId": 14
      },
      "lineNbr": 166,
      "author": {
        "id": 5002
      },
      "writtenOn": "2024-07-18T06:42:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a4dc3c55_86fad886",
      "revId": "9e1cc4fc0d3a70cf80b5710aa8a13c8d97bfbbdf",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}