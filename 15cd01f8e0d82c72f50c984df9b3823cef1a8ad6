{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a81e0991_094f1d56",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-12-15T14:24:14Z",
      "side": 1,
      "message": "dmitriy, here is a first quick pass there are some minor restructuring comments but overall it looks good. I am going to take a more detailed pass after your next iteration.\n\n1. Please add the latest benchmark numbers.\n2. We should consistently deal with the AddTranspose for BlockSparseMatrices.",
      "revId": "15cd01f8e0d82c72f50c984df9b3823cef1a8ad6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06be054b_11ef627b",
        "filename": "internal/ceres/block_sparse_matrix.cc",
        "patchSetId": 4
      },
      "lineNbr": 309,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-12-15T14:24:14Z",
      "side": 1,
      "message": "in light of the use of the transpose block structure, should we ensure that it is always added? previously it was just being used if we were doing an iterative solve but now it it seems it is being used more generally.",
      "range": {
        "startLine": 309,
        "startChar": 7,
        "endLine": 309,
        "endChar": 19
      },
      "revId": "15cd01f8e0d82c72f50c984df9b3823cef1a8ad6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02c497ee_ea068dea",
        "filename": "internal/ceres/block_sparse_matrix_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 213,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-12-15T14:24:14Z",
      "side": 1,
      "message": "is the matrix large enough to actually trigger the multithreading?",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 213,
        "endChar": 6
      },
      "revId": "15cd01f8e0d82c72f50c984df9b3823cef1a8ad6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aea7acd9_a1d27a8e",
        "filename": "internal/ceres/parallel_for.h",
        "patchSetId": 4
      },
      "lineNbr": 65,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-12-15T14:24:14Z",
      "side": 1,
      "message": "what does this do?",
      "range": {
        "startLine": 65,
        "startChar": 16,
        "endLine": 65,
        "endChar": 23
      },
      "revId": "15cd01f8e0d82c72f50c984df9b3823cef1a8ad6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1d1064e_ffd15e2c",
        "filename": "internal/ceres/parallel_for.h",
        "patchSetId": 4
      },
      "lineNbr": 353,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-12-15T14:24:14Z",
      "side": 1,
      "message": "I think Invoke is the wrong name for this function it used to be that you used it to call the function/invoke the function once, but now you call it on a segment of indices. How about InvokeOnSegment ? I am open to tother ideas.",
      "range": {
        "startLine": 353,
        "startChar": 16,
        "endLine": 353,
        "endChar": 22
      },
      "revId": "15cd01f8e0d82c72f50c984df9b3823cef1a8ad6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea3b3548_24b71d36",
        "filename": "internal/ceres/program_evaluator.h",
        "patchSetId": 4
      },
      "lineNbr": 269,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-12-15T14:24:14Z",
      "side": 1,
      "message": "isn\u0027t this worth parallelizing too?",
      "range": {
        "startLine": 269,
        "startChar": 30,
        "endLine": 269,
        "endChar": 45
      },
      "revId": "15cd01f8e0d82c72f50c984df9b3823cef1a8ad6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae27ac6d_e355f858",
        "filename": "internal/ceres/trust_region_minimizer.cc",
        "patchSetId": 4
      },
      "lineNbr": 381,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-12-15T14:24:14Z",
      "side": 1,
      "message": "IMO these should not be passed per solve, they should be passed to the trust region strategy when the strategy is constructed in the preprocessor.",
      "range": {
        "startLine": 381,
        "startChar": 20,
        "endLine": 381,
        "endChar": 31
      },
      "revId": "15cd01f8e0d82c72f50c984df9b3823cef1a8ad6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17c9082f_93277914",
        "filename": "internal/ceres/trust_region_strategy.h",
        "patchSetId": 4
      },
      "lineNbr": 97,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-12-15T14:24:14Z",
      "side": 1,
      "message": "move these into Options and get them at the time of construction.",
      "range": {
        "startLine": 97,
        "startChar": 8,
        "endLine": 97,
        "endChar": 19
      },
      "revId": "15cd01f8e0d82c72f50c984df9b3823cef1a8ad6",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}