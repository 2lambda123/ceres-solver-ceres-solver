{
  "comments": [
    {
      "key": {
        "uuid": "557688f5_bcdbc463",
        "filename": "include/ceres/tiny_solver.h",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 5002
      },
      "writtenOn": "2017-10-12T14:08:51Z",
      "side": 1,
      "message": "Eigen/Dense I believe is better, if you are going to let them use any dense linear solver.",
      "range": {
        "startLine": 58,
        "startChar": 16,
        "endLine": 58,
        "endChar": 18
      },
      "revId": "40ccef518a64fa3ff1720075345ca7a8834f03d3",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e742dfeb_9a929862",
        "filename": "include/ceres/tiny_solver.h",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 5005
      },
      "writtenOn": "2017-10-12T16:21:09Z",
      "side": 1,
      "message": "Can that be a separate patch? Eigen/Dense is a much bigger include than just LU. And the user is free to use whatever they want (including QR) anyway, since they must then include that file in their code and pass it as a template argument.",
      "parentUuid": "557688f5_bcdbc463",
      "range": {
        "startLine": 58,
        "startChar": 16,
        "endLine": 58,
        "endChar": 18
      },
      "revId": "40ccef518a64fa3ff1720075345ca7a8834f03d3",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43e371a2_d75e1c50",
        "filename": "include/ceres/tiny_solver.h",
        "patchSetId": 4
      },
      "lineNbr": 363,
      "author": {
        "id": 5002
      },
      "writtenOn": "2017-10-12T14:08:51Z",
      "side": 1,
      "message": "if you did the heap allocation when you constructed the object, it would work. it has threading implications, but it would be done once and you would never touch it again.\n\nso why not have the fixedarray be part of the object rather than being constructed on demand in the operator() ?",
      "range": {
        "startLine": 363,
        "startChar": 11,
        "endLine": 363,
        "endChar": 12
      },
      "revId": "40ccef518a64fa3ff1720075345ca7a8834f03d3",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05cbb31b_127211fb",
        "filename": "include/ceres/tiny_solver.h",
        "patchSetId": 4
      },
      "lineNbr": 363,
      "author": {
        "id": 5005
      },
      "writtenOn": "2017-10-12T16:21:09Z",
      "side": 1,
      "message": "So I thought about this, and the reason is that if you go down this road, you would want to make just 1 cost function that you reuse. This is not the style of Ceres at the moment. Here\u0027s how it would look in practice\n\n  struct MyCostFunctor {\n     ... // cost functor impl\n     void SetExtraDataParams(...); // like setting the reprojection 2d point for bundling\n  };\n  MyCostFunctor functor;\n  TinySolverFunctorAdaptor\u003cMyCostFunction, 2, 3\u003e adaptor(functor); \u003c-- this has the jet buffer, maybe should be allocated on the heap by the user.\n\n  TinySolver\u003cTinySolverFunctorAdaptor\u003cMyCostFunction, 2, 3\u003e \u003e solver;\n\n  solver.Solver(\u0026f, \u0026x);\n\n  f.SetExtraDataParameters(...); \u003c-- clobbers old ones, replaces them with new ones, for new solver shot\n  solver.Solver(\u0026f, \u0026x); \u003c-- reuses f\n\nThis seems OK but not amazing, since the user has to know about plumbing data through on the side.\n\nNevertheless, I made the change.",
      "parentUuid": "43e371a2_d75e1c50",
      "range": {
        "startLine": 363,
        "startChar": 11,
        "endLine": 363,
        "endChar": 12
      },
      "revId": "40ccef518a64fa3ff1720075345ca7a8834f03d3",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73853170_be67df33",
        "filename": "include/ceres/tiny_solver.h",
        "patchSetId": 4
      },
      "lineNbr": 370,
      "author": {
        "id": 5002
      },
      "writtenOn": "2017-10-12T14:08:51Z",
      "side": 1,
      "message": "I think these should be moved into the underlying struct.",
      "range": {
        "startLine": 370,
        "startChar": 11,
        "endLine": 370,
        "endChar": 25
      },
      "revId": "40ccef518a64fa3ff1720075345ca7a8834f03d3",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "684e8cb1_a05f124c",
        "filename": "include/ceres/tiny_solver.h",
        "patchSetId": 4
      },
      "lineNbr": 370,
      "author": {
        "id": 5005
      },
      "writtenOn": "2017-10-12T16:21:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "73853170_be67df33",
      "range": {
        "startLine": 370,
        "startChar": 11,
        "endLine": 370,
        "endChar": 25
      },
      "revId": "40ccef518a64fa3ff1720075345ca7a8834f03d3",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee6ac5c6_6ecf1e5e",
        "filename": "include/ceres/tiny_solver.h",
        "patchSetId": 4
      },
      "lineNbr": 378,
      "author": {
        "id": 5002
      },
      "writtenOn": "2017-10-12T14:08:51Z",
      "side": 1,
      "message": "move to underlying struct.",
      "range": {
        "startLine": 378,
        "startChar": 11,
        "endLine": 378,
        "endChar": 25
      },
      "revId": "40ccef518a64fa3ff1720075345ca7a8834f03d3",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "935f3fc9_8cc8f5ae",
        "filename": "include/ceres/tiny_solver.h",
        "patchSetId": 4
      },
      "lineNbr": 378,
      "author": {
        "id": 5005
      },
      "writtenOn": "2017-10-12T16:21:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ee6ac5c6_6ecf1e5e",
      "range": {
        "startLine": 378,
        "startChar": 11,
        "endLine": 378,
        "endChar": 25
      },
      "revId": "40ccef518a64fa3ff1720075345ca7a8834f03d3",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8031510_daf20eca",
        "filename": "include/ceres/tiny_solver.h",
        "patchSetId": 4
      },
      "lineNbr": 398,
      "author": {
        "id": 5002
      },
      "writtenOn": "2017-10-12T14:08:51Z",
      "side": 1,
      "message": "why not re-write this to be a manual loop?",
      "range": {
        "startLine": 398,
        "startChar": 6,
        "endLine": 398,
        "endChar": 21
      },
      "revId": "40ccef518a64fa3ff1720075345ca7a8834f03d3",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd9d265c_a0cbd84d",
        "filename": "include/ceres/tiny_solver.h",
        "patchSetId": 4
      },
      "lineNbr": 398,
      "author": {
        "id": 5005
      },
      "writtenOn": "2017-10-12T16:21:09Z",
      "side": 1,
      "message": "We can benchmark it. But the manual loop will just be the same as the vectorized one; the memory thrashing is fundamental to what we\u0027re trying to do and has nothing to do with eigen.",
      "parentUuid": "d8031510_daf20eca",
      "range": {
        "startLine": 398,
        "startChar": 6,
        "endLine": 398,
        "endChar": 21
      },
      "revId": "40ccef518a64fa3ff1720075345ca7a8834f03d3",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d60116ac_919d65a1",
        "filename": "internal/ceres/tiny_solver_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 198,
      "author": {
        "id": 5002
      },
      "writtenOn": "2017-10-12T14:08:51Z",
      "side": 1,
      "message": "AutoDiffTestFunctor ? who knows or cares about Jets here.",
      "range": {
        "startLine": 198,
        "startChar": 7,
        "endLine": 198,
        "endChar": 21
      },
      "revId": "40ccef518a64fa3ff1720075345ca7a8834f03d3",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a32a79ec_515ce877",
        "filename": "internal/ceres/tiny_solver_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 210,
      "author": {
        "id": 5002
      },
      "writtenOn": "2017-10-12T14:08:51Z",
      "side": 1,
      "message": "this is not an autodiff test, this is a solver test.",
      "range": {
        "startLine": 210,
        "startChar": 5,
        "endLine": 210,
        "endChar": 15
      },
      "revId": "40ccef518a64fa3ff1720075345ca7a8834f03d3",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329",
      "unresolved": true
    }
  ]
}