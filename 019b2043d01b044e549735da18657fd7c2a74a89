{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0c68d4bc_80a4e47d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-02-26T18:10:47Z",
      "side": 1,
      "message": "\u0027the number of\u0027",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eda66923_547e6bbd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-02-26T18:10:47Z",
      "side": 1,
      "message": "required by a",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "106150e7_bd0e6253",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-02-26T18:10:47Z",
      "side": 1,
      "message": "with the number",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "508e1e4a_0c40c2db",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-02-26T18:10:47Z",
      "side": 1,
      "message": "allows us to store",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "387bde16_22c16192",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-02-26T18:10:47Z",
      "side": 1,
      "message": "this approach is that",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cc41667_e33f227f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-02-26T18:10:47Z",
      "side": 1,
      "message": "only once while",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d15aed94_295836c8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-02-26T18:10:47Z",
      "side": 1,
      "message": "implementation more efficient in both memory and runtime",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86a2d9c4_81fdb8de",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-21T22:03:06Z",
      "side": 1,
      "message": "This is an initial (undocumented) but already working implementation of `ProductManifold` using a `std::tuple` and mixed runtime/compile-time arithmetic. Please let me know if you would like to consider it.",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ebd54774_232ce46a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-22T04:36:59Z",
      "side": 1,
      "message": "I like this implementation in principle.\nMy advice would be to pull out the sequence stuff into its own file perhaps collocate it with the other integer_sequence stuff.\n\nIt would be nice if we can avoid the pimpl pattern and just have one class, if its not avoidable or is overly complex then thats fine. \n\nOn the other hand, the nice thing about the pimpl pattern is that we can move the whole implementation into its own header which is nice.\n\nI will let you decide the tradeoff there.",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32ece10b_bce78b20",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-02-26T18:10:47Z",
      "side": 1,
      "message": "This looks good, but I think we can replace the integer sequence manipulation with our existing algorithms that do the same jobs",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60b17d02_5a585ba3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-26T20:45:25Z",
      "side": 1,
      "message": "Thanks Alex for reviewing and the comments.\n\nUnfortunately, it is not possible to use `Sum` since the implementation requires the values to be known at compile-time. However, this is not the case for values in a tuple. Only the size of the tuple is known at compile-time requiring a different approach.",
      "parentUuid": "32ece10b_bce78b20",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7dc02fd8_565a9a69",
        "filename": "include/ceres/manifold.h",
        "patchSetId": 1
      },
      "lineNbr": 280,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-02-26T18:10:47Z",
      "side": 1,
      "message": "I think we can replace all of these with our existing algorithms in ceres/internal/integer_sequence_algorithm.h, specifically Sum and ExclusiveScan",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3be0548_76406a5c",
        "filename": "include/ceres/manifold.h",
        "patchSetId": 1
      },
      "lineNbr": 314,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-28T21:44:56Z",
      "side": 1,
      "message": "I will rename the function to `ComputeExclusiveScan` to be more explicit and in line with `std::exclusive_scan` available in C++17 for ranges and `ExclusiveScan` from `integer_sequence_algorithm.h`. Also I intend to move all tuple related functionality into `tuple_algorithm.h`.\n\nPlease let me know if you have any concerns.",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66d03ede_f4b25931",
        "filename": "include/ceres/manifold.h",
        "patchSetId": 1
      },
      "lineNbr": 314,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-28T21:46:04Z",
      "side": 1,
      "message": "that sounds like a good idea.\ncan you send out a tuple_algorithm.h/tuple_algorithm_test.cc as a separate CL, it will make for easier/faster reviewing.",
      "parentUuid": "a3be0548_76406a5c",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2bcb59e_3a8f9b6a",
        "filename": "include/ceres/manifold.h",
        "patchSetId": 1
      },
      "lineNbr": 484,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-28T19:55:26Z",
      "side": 1,
      "message": "Here\u0027s another design decision necessary: since we can store the actual manifold implementations instead of pointers to the base class, the user does not need to instantiate these on the heap using `new`. Should we drop pointers then?",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15df0280_2095b349",
        "filename": "include/ceres/manifold.h",
        "patchSetId": 1
      },
      "lineNbr": 484,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-28T19:56:43Z",
      "side": 1,
      "message": "how would this work with manifolds that are user defined and require constructor arguments?",
      "parentUuid": "b2bcb59e_3a8f9b6a",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a407414c_6b8ebb2d",
        "filename": "include/ceres/manifold.h",
        "patchSetId": 1
      },
      "lineNbr": 484,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-28T20:03:36Z",
      "side": 1,
      "message": "The user would instantiate the instance and pass it (either move or copy) to `ProductManifold` constructor. Whether the manifold is user-defined or not would not matter, neither whether it is derived from `Manifold` given the implementation of the interface methods are compatible. This is possible because the types are known at compile-time and the interface calls can be compile-time checked.\n\nThe usage would look like this:\n```\nProductManifold m{MyManifold{foo, bar}, OtherManifold{foobar}};\n```",
      "parentUuid": "15df0280_2095b349",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "abbdcc61_0035fdad",
        "filename": "include/ceres/manifold.h",
        "patchSetId": 1
      },
      "lineNbr": 484,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-28T20:06:36Z",
      "side": 1,
      "message": "As a side remark, `ProductManifoldImpl` is only avoidable if we are OK with introducing template arguments to `ProductManifold`:\n```\nProductManifold\u003cMyManifold, OtherManifold\u003e m{MyManifold{foo, bar}, OtherManifold{foobar}};\n```\nwhich is admittedly less convenient but avoids heap allocation.",
      "parentUuid": "a407414c_6b8ebb2d",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70c9e332_b315aa5c",
        "filename": "include/ceres/manifold.h",
        "patchSetId": 1
      },
      "lineNbr": 484,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-28T21:46:04Z",
      "side": 1,
      "message": "I am okay with ProductManifoldImpl and moving it into another file. That way this file remains clean.\n\nYour proposal would require Manifolds to be copyable though right? something we have not required in the past. Though admittedly its not clear to me why they should not be copyable.",
      "parentUuid": "abbdcc61_0035fdad",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cee51283_97ddeadd",
        "filename": "include/ceres/manifold.h",
        "patchSetId": 1
      },
      "lineNbr": 484,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-28T21:48:50Z",
      "side": 1,
      "message": "Not necessarily. Either copyable or moveable.",
      "parentUuid": "70c9e332_b315aa5c",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b5c9547b_44198f40",
        "filename": "include/ceres/manifold.h",
        "patchSetId": 1
      },
      "lineNbr": 484,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-28T21:49:57Z",
      "side": 1,
      "message": "sorry I meant that.",
      "parentUuid": "cee51283_97ddeadd",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "887dad22_07fa8fb1",
        "filename": "include/ceres/manifold.h",
        "patchSetId": 1
      },
      "lineNbr": 484,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-28T21:53:07Z",
      "side": 1,
      "message": "Do we want to move forward with the proposal or do we leave the `ProductManifold` constructor interface as is?",
      "parentUuid": "b5c9547b_44198f40",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}