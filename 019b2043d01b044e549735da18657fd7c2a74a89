{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0c68d4bc_80a4e47d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-02-26T18:10:47Z",
      "side": 1,
      "message": "\u0027the number of\u0027",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eda66923_547e6bbd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-02-26T18:10:47Z",
      "side": 1,
      "message": "required by a",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "106150e7_bd0e6253",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-02-26T18:10:47Z",
      "side": 1,
      "message": "with the number",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "508e1e4a_0c40c2db",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-02-26T18:10:47Z",
      "side": 1,
      "message": "allows us to store",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "387bde16_22c16192",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-02-26T18:10:47Z",
      "side": 1,
      "message": "this approach is that",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cc41667_e33f227f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-02-26T18:10:47Z",
      "side": 1,
      "message": "only once while",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d15aed94_295836c8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-02-26T18:10:47Z",
      "side": 1,
      "message": "implementation more efficient in both memory and runtime",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86a2d9c4_81fdb8de",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-21T22:03:06Z",
      "side": 1,
      "message": "This is an initial (undocumented) but already working implementation of `ProductManifold` using a `std::tuple` and mixed runtime/compile-time arithmetic. Please let me know if you would like to consider it.",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ebd54774_232ce46a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-02-22T04:36:59Z",
      "side": 1,
      "message": "I like this implementation in principle.\nMy advice would be to pull out the sequence stuff into its own file perhaps collocate it with the other integer_sequence stuff.\n\nIt would be nice if we can avoid the pimpl pattern and just have one class, if its not avoidable or is overly complex then thats fine. \n\nOn the other hand, the nice thing about the pimpl pattern is that we can move the whole implementation into its own header which is nice.\n\nI will let you decide the tradeoff there.",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32ece10b_bce78b20",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-02-26T18:10:47Z",
      "side": 1,
      "message": "This looks good, but I think we can replace the integer sequence manipulation with our existing algorithms that do the same jobs",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60b17d02_5a585ba3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-26T20:45:25Z",
      "side": 1,
      "message": "Thanks Alex for reviewing and the comments.\n\nUnfortunately, it is not possible to use `Sum` since the implementation requires the values to be known at compile-time. However, this is not the case for values in a tuple. Only the size of the tuple is known at compile-time requiring a different approach.",
      "parentUuid": "32ece10b_bce78b20",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7dc02fd8_565a9a69",
        "filename": "include/ceres/manifold.h",
        "patchSetId": 1
      },
      "lineNbr": 280,
      "author": {
        "id": 5155
      },
      "writtenOn": "2022-02-26T18:10:47Z",
      "side": 1,
      "message": "I think we can replace all of these with our existing algorithms in ceres/internal/integer_sequence_algorithm.h, specifically Sum and ExclusiveScan",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2bcb59e_3a8f9b6a",
        "filename": "include/ceres/manifold.h",
        "patchSetId": 1
      },
      "lineNbr": 484,
      "author": {
        "id": 6612
      },
      "writtenOn": "2022-02-28T19:55:26Z",
      "side": 1,
      "message": "Here\u0027s another design decision necessary: since we can store the actual manifold implementations instead of pointers to the base class, the user does not need to instantiate these on the heap using `new`. Should we drop pointers then?",
      "revId": "019b2043d01b044e549735da18657fd7c2a74a89",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}