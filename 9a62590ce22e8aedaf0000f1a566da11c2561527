{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "379d992c_f0941b78",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6827
      },
      "writtenOn": "2023-11-08T16:43:35Z",
      "side": 1,
      "message": "Here is the test code to reproduce the issue. Before the fix, the correct answer was not obtained when i\u003d\u003d5. After the fix, the correct answer is obtained for all values of i.\n\nstruct CostFunction {\n    bool operator()(const double* const x, double* residual) const {\n        residual[0] \u003d std::abs(x[0] - 5.0) * (x[0] \u003e 5.0 ? 2.0 : 1.0) + std::abs(x[1] - 10.0);\n        return true;\n    }\n};\n\nvoid Test(const std::array\u003cdouble, 2\u003e\u0026 initial_x)\n{\n    auto x \u003d initial_x;\n\n    ceres::Problem problem;\n\n    ceres::CostFunction* cost_function \u003d\n        new ceres::NumericDiffCostFunction\u003cCostFunction, ceres::CENTRAL, 1, 2\u003e(\n            new CostFunction);\n\n    problem.AddResidualBlock(cost_function, NULL, x.data());\n\n    ceres::Solver::Options options;\n    options.linear_solver_type \u003d ceres::DENSE_QR;\n    options.minimizer_progress_to_stdout \u003d true;\n\n    ceres::Solver::Summary summary;\n    ceres::Solve(options, \u0026problem, \u0026summary);\n\n    std::cout \u003c\u003c summary.BriefReport() \u003c\u003c \"\\n\";\n    std::cout \u003c\u003c \"x : (\" \u003c\u003c initial_x[0] \u003c\u003c \", \" \u003c\u003c initial_x[1] \u003c\u003c \")\"\n        \u003c\u003c \" -\u003e (\" \u003c\u003c x[0] \u003c\u003c \", \" \u003c\u003c x[1] \u003c\u003c \")\\n\";\n}\n\nint main(int argc, char** argv) {\n    google::InitGoogleLogging(argv[0]);\n\n    for (int i \u003d 0; i \u003c 10; ++i) {\n        Test({ static_cast\u003cdouble\u003e(i), 5.0 });  // wrong when i \u003d\u003d 5\n    }\n    return 0;\n}",
      "revId": "9a62590ce22e8aedaf0000f1a566da11c2561527",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8eb13f63_072b0c4d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2024-01-03T20:41:55Z",
      "side": 1,
      "message": "Changing the numerical differentiation algorithm by making such local decisions is not a great idea. The decision making should be done by the high level optimization algorithm rather than the differentiation routine whose job is to estimate derivatives.",
      "revId": "9a62590ce22e8aedaf0000f1a566da11c2561527",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {},
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "9a62590ce22e8aedaf0000f1a566da11c2561527",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "9a62590ce22e8aedaf0000f1a566da11c2561527",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {},
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Verified=MAX","label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "9a62590ce22e8aedaf0000f1a566da11c2561527",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}