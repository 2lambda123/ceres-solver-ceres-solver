{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b268d9b1_993d7f22",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-05-15T14:35:25Z",
      "side": 1,
      "message": "dmitriy, why don\u0027t we get this patch in then?\nand I will send you another one which ensures that blocksparsematrices use page locked memory if requested. And then simplify the cuda code assuming these two constraints?",
      "revId": "6bb4d1266de4c0c0ad40d5b2389802384085aff3",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02bc4119_f8eac7df",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 6141
      },
      "writtenOn": "2023-05-15T15:40:31Z",
      "side": 1,
      "message": "I am not 100% sure that this is the best way.\n\n\n\nIf we keep cell-reordering to keep E and F continuous, and add detection of two possible layouts into cuda-related code instead (with a check if submatrices are layout-compatible with crs [in other words, each contain maximum 1 cell per row-block]), then:\n - We will be able to replace CudaStreamedBuffer invocation with scheduling two asynchronous copies in the case of \"simple\" bundle-adjustment (with a single F-cell per residual). And hope that it will run asynchronously on gpu while we are updating preconditioner on cpu.\n - In other cases we still should be able to permute values of F using just a compressed block structure, without storing permutation; and values of E would be copied as-is.",
      "parentUuid": "b268d9b1_993d7f22",
      "revId": "6bb4d1266de4c0c0ad40d5b2389802384085aff3",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e050b4cc_129ec372",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-05-15T16:55:36Z",
      "side": 1,
      "message": "I think keeping E and F contiguous is fine. I am not sure if the \"simple\" bundle adjustment detection is worth it, it creates yet another special code path. Since memory copy is the hard part, I think we are okay doing the permutation. \n\nI can revert this CL, and in the cuda related code, you can assume that E is contiguous and before F always. Thats how the code is structured.",
      "parentUuid": "02bc4119_f8eac7df",
      "revId": "6bb4d1266de4c0c0ad40d5b2389802384085aff3",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {},
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6bb4d1266de4c0c0ad40d5b2389802384085aff3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6bb4d1266de4c0c0ad40d5b2389802384085aff3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {},
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Verified=MAX","label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6bb4d1266de4c0c0ad40d5b2389802384085aff3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}