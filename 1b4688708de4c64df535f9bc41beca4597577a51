{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "dde8de21_9dfdc148",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 6732
      },
      "writtenOn": "2023-01-15T22:17:34Z",
      "side": 1,
      "message": "To perform safe computing of sqrt(x^2 + y^2 + z^2 + w^2) were x, y, z and w are Jets we need to provide separate implementation of hypot which takes 4 arguments. Actually we need two implementations\n* First one for doubles\n* Second one for Jets\nIn such a case we preserve safety guarantees of hypot and do not perform redundant computations which we do in case of the following expression with Jets\n\nnorm \u003d hypot(hypot(x, y, z), w)\n\nHere square root is taken inside hypot(x, y, z) and then result raised to power 2 in hypot(result, w). It leads to additional computations including vectors (Jet.v fields)",
      "revId": "1b4688708de4c64df535f9bc41beca4597577a51",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27994e1e_07305fc3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5010
      },
      "writtenOn": "2023-01-16T00:35:17Z",
      "side": 1,
      "message": "adding a four argument hypot as a function on jets when one does not exist in the standard library is not a good idea. \n\nI need to also check if implementing a n hypot in terms of n-1 hypot is numerically safe, or is it just an efficiency thing.",
      "parentUuid": "dde8de21_9dfdc148",
      "revId": "1b4688708de4c64df535f9bc41beca4597577a51",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0c47cb0_5c691261",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 6732
      },
      "writtenOn": "2023-01-16T10:35:08Z",
      "side": 1,
      "message": "If you are concerned about name `hypot` we can change it to `norm`. About two calls to `hypot`:  personally I didn\u0027t find problems about it since no intermendiate computations within `hypot` result in overflow/underflow (or they are explictely catched). But of course, it runs slower",
      "parentUuid": "27994e1e_07305fc3",
      "revId": "1b4688708de4c64df535f9bc41beca4597577a51",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc20be2c_b89c0691",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 6732
      },
      "writtenOn": "2023-01-16T11:06:14Z",
      "side": 1,
      "message": "Update: probably it is a good idea to test first inner `hypot` for returned value (unfortunately I haven\u0027t done it)",
      "parentUuid": "e0c47cb0_5c691261",
      "revId": "1b4688708de4c64df535f9bc41beca4597577a51",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e974934_3b03cbee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2023-01-16T13:08:38Z",
      "side": 1,
      "message": "While I also think it is not a good idea to provide overloads for functions not defined in the standard library (Bessel functions being the sole exception to this rule due to their general (un)availability), I do see a benefit in providing the overload which would allow users to avoid the original issue. However, the problem still can occur in user code if Eigen\u0027s `.hypotNorm()` is used instead which makes use of nested `hypot` calls.\n\nAs for the name, there\u0027s already a `std::norm` which does not compute what one would expect, i.e., instead of the L^2 norm the function computes the corresponding square. Therefore, the name should be avoided.\n\nIn general, if we were to provide a `hypot` overload for more than three arguments, it should be variadic and not limited to a specific number of arguments.\n\nIt might be also worthwhile investigating whether providing a dedicated reciprocal `hypot` (`rhypot`) makes sense (see https://doi.org/10.48550/arXiv.2103.08694) as this is the expression generally used throughout the code.",
      "parentUuid": "fc20be2c_b89c0691",
      "revId": "1b4688708de4c64df535f9bc41beca4597577a51",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9d33204f_12c7452f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-01-16T14:59:20Z",
      "side": 1,
      "message": "I would be okay with a variadic function called SafeNorm or AccurateNorm. We can start with a recursive hypot based impl, and move to something more native later on.\n\nI like the idea of rhypot also, I think it is worth exploring.",
      "parentUuid": "9e974934_3b03cbee",
      "revId": "1b4688708de4c64df535f9bc41beca4597577a51",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96e5124f_84bedaff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2023-01-16T15:25:03Z",
      "side": 1,
      "message": "I would probably call the function `HypotNorm` to be consistent with Eigen.",
      "parentUuid": "9d33204f_12c7452f",
      "revId": "1b4688708de4c64df535f9bc41beca4597577a51",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6a8a318_c3a249fb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2023-01-16T15:36:32Z",
      "side": 1,
      "message": "Hypot and norm are basically synonyms, so calling it HypotNorm seems odd to me, its like saying NormNorm.",
      "tag": "mailMessageId\u003d\u003cCABqdRUAhFDenWWhEUQAtz\u003ddwtyX3LZwx2Ja+MVkLKvhwftRg-A@mail.gmail.com\u003e",
      "revId": "1b4688708de4c64df535f9bc41beca4597577a51",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ba84d94_c18070f6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 6732
      },
      "writtenOn": "2023-01-16T15:53:49Z",
      "side": 1,
      "message": "+1 for `SafeNorm` and for `rhypot`. If you don\u0027t mind I continue to work in this pull request",
      "parentUuid": "96e5124f_84bedaff",
      "revId": "1b4688708de4c64df535f9bc41beca4597577a51",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49183e1b_03362b5b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2023-01-16T16:00:31Z",
      "side": 1,
      "message": "I see what you mean. One can implement the norm in several ways though. `HypotNorm` would mean a norm implemented in terms of `hypot`. There\u0027s also a Blue norm, which uses Blue\u0027s algorithm: https://eigen.tuxfamily.org/dox/classEigen_1_1MatrixBase.html#a3f3faa00163c16824ff03e58a210c74c. The problem with SafeNorm and AccurateNorm is that it\u0027s not immediately clear what the names mean.",
      "parentUuid": "f6a8a318_c3a249fb",
      "revId": "1b4688708de4c64df535f9bc41beca4597577a51",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b55571f4_98537e98",
        "filename": "include/ceres/jet.h",
        "patchSetId": 2
      },
      "lineNbr": 466,
      "author": {
        "id": 6612
      },
      "writtenOn": "2023-01-16T13:08:38Z",
      "side": 1,
      "message": "Function must be inline.",
      "revId": "1b4688708de4c64df535f9bc41beca4597577a51",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dde2fd56_a035fa73",
        "filename": "include/ceres/jet.h",
        "patchSetId": 2
      },
      "lineNbr": 466,
      "author": {
        "id": 6612
      },
      "writtenOn": "2023-01-16T13:08:38Z",
      "side": 1,
      "message": "Are you sure about `noexcept` here? According to https://en.cppreference.com/w/cpp/numeric/math/hypot neither of of the `hypot` overloads is `noexcept`.",
      "revId": "1b4688708de4c64df535f9bc41beca4597577a51",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6d2bb5e_c23b812f",
        "filename": "include/ceres/jet.h",
        "patchSetId": 2
      },
      "lineNbr": 467,
      "author": {
        "id": 6612
      },
      "writtenOn": "2023-01-16T13:08:38Z",
      "side": 1,
      "message": "Global scope qualification is not necessary.",
      "range": {
        "startLine": 467,
        "startChar": 9,
        "endLine": 467,
        "endChar": 11
      },
      "revId": "1b4688708de4c64df535f9bc41beca4597577a51",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}